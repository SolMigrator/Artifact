{
    "name": "DigitalArtChain",
    "address": "0x323a3e1693e7a0959f65972f3bf2dfcb93239dfe",
    "Compiler Version": "v0.4.24+commit.e67f0147",
    "Optimization Enabled": "No with 200 runs",
    "Other Settings": "default evmVersion",
    "creation_bytecode": "6080604052660708ccaca7c000601260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055506101f4601260106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550606060405190810160405280602e81526020017f687474703a2f2f6170692e6469676974616c617274636861696e2e636f6d2f7481526020017f6f6b656e733f746f6b656e49643d00000000000000000000000000000000000081525060139080519060200190620000f392919062000236565b506040805190810160405280600a81526020017f2669706673486173683d00000000000000000000000000000000000000000000815250601490805190602001906200014192919062000236565b503480156200014f57600080fd5b506040805190810160405280600f81526020017f4469676974616c417274436861696e00000000000000000000000000000000008152506040805190810160405280600381526020017f4441430000000000000000000000000000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600590805190602001906200021492919062000236565b5080600690805190602001906200022d92919062000236565b505050620002e5565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200027957805160ff1916838001178555620002aa565b82800160010185558215620002aa579182015b82811115620002a95782518255916020019190600101906200028c565b5b509050620002b99190620002bd565b5090565b620002e291905b80821115620002de576000816000905550600101620002c4565b5090565b90565b6141f680620002f56000396000f3006080604052600436106101d8576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063060a56dc146101dd57806306f4f7de1461022c57806306fdde0314610259578063081812fc146102e9578063095ea7b3146103565780630b8021c4146103a357806314a268061461043b57806318160ddd146104a4578063239c4dcf146104cf57806323b872dd1461056757806326a65c10146105d457806327ea2df0146106235780632a5c792a146106a05780632f745c591461070c5780633ccfd60b1461076d57806342842e0e146107845780634f558e79146107f15780634f6ccce714610836578063536cb736146108775780635bf0b11e146108e05780636352211e146109b957806370a0823114610a2657806386f1f2d414610a7d5780638b2a960614610ad95780638da5cb5b14610b2257806395d89b4114610b795780639938b0de14610c095780639bc706e814610c48578063a22cb46514610c9f578063aa6f5bb614610cee578063b88d4fde14610d2d578063c435d2ac14610de0578063c87b56dd14610e41578063d9d6165514610ee7578063e985e9c514610f7f578063f0b9e5ba14610ffa578063f2fde38b146110df578063f3c156f314611122575b600080fd5b3480156101e957600080fd5b506101f2611142565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561023857600080fd5b5061025760048036038101908080359060200190929190505050611164565b005b34801561026557600080fd5b5061026e61135c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102ae578082015181840152602081019050610293565b50505050905090810190601f1680156102db5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102f557600080fd5b50610314600480360381019080803590602001909291905050506113fe565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561036257600080fd5b506103a1600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061143b565b005b3480156103af57600080fd5b506103e4600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611601565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561042757808201518184015260208101905061040c565b505050509050019250505060405180910390f35b34801561044757600080fd5b506104a2600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611698565b005b3480156104b057600080fd5b506104b961170d565b6040518082815260200191505060405180910390f35b3480156104db57600080fd5b506104fa6004803603810190808035906020019092919050505061171a565b604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020019250505060405180910390f35b34801561057357600080fd5b506105d2600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061177a565b005b3480156105e057600080fd5b506105e9611891565b60405180826fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561062f57600080fd5b5061068a600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506118b3565b6040518082815260200191505060405180910390f35b3480156106ac57600080fd5b506106b5611928565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156106f85780820151818401526020810190506106dd565b505050509050019250505060405180910390f35b34801561071857600080fd5b50610757600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611980565b6040518082815260200191505060405180910390f35b34801561077957600080fd5b506107826119f7565b005b34801561079057600080fd5b506107ef600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050611ad3565b005b3480156107fd57600080fd5b5061081c60048036038101908080359060200190929190505050611b0b565b604051808215151515815260200191505060405180910390f35b34801561084257600080fd5b5061086160048036038101908080359060200190929190505050611b7d565b6040518082815260200191505060405180910390f35b34801561088357600080fd5b506108de600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611bb5565b005b3480156108ec57600080fd5b5061090b60048036038101908080359060200190929190505050611c2a565b60405180806020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828103825284818151815260200191508051906020019080838360005b8381101561097d578082015181840152602081019050610962565b50505050905090810190601f1680156109aa5780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156109c557600080fd5b506109e460048036038101908080359060200190929190505050611d15565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610a3257600080fd5b50610a67600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611d93565b6040518082815260200191505060405180910390f35b610ad7600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611e17565b005b348015610ae557600080fd5b50610b206004803603810190808035906020019092919080356fffffffffffffffffffffffffffffffff169060200190929190505050612172565b005b348015610b2e57600080fd5b50610b37612325565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b348015610b8557600080fd5b50610b8e61234a565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610bce578082015181840152602081019050610bb3565b50505050905090810190601f168015610bfb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610c1557600080fd5b50610c4660048036038101908080356fffffffffffffffffffffffffffffffff1690602001909291905050506123ec565b005b348015610c5457600080fd5b50610c89600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506124c3565b6040518082815260200191505060405180910390f35b348015610cab57600080fd5b50610cec600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080351515906020019092919050505061250c565b005b348015610cfa57600080fd5b50610d2b60048036038101908080356fffffffffffffffffffffffffffffffff169060200190929190505050612648565b005b348015610d3957600080fd5b50610dde600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506126df565b005b348015610dec57600080fd5b50610e2b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061271e565b6040518082815260200191505060405180910390f35b348015610e4d57600080fd5b50610e6c60048036038101908080359060200190929190505050612795565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610eac578082015181840152602081019050610e91565b50505050905090810190601f168015610ed95780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610ef357600080fd5b50610f28600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506129dd565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610f6b578082015181840152602081019050610f50565b505050509050019250505060405180910390f35b348015610f8b57600080fd5b50610fe0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612a74565b604051808215151515815260200191505060405180910390f35b34801561100657600080fd5b5061108b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050612b08565b60405180827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3480156110eb57600080fd5b50611120600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612b37565b005b61114060048036038101908080359060200190929190505050612c8c565b005b601260109054906101000a90046fffffffffffffffffffffffffffffffff1681565b3373ffffffffffffffffffffffffffffffffffffffff166011600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156111d457600080fd5b3073ffffffffffffffffffffffffffffffffffffffff166342842e0e306011600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156112e157600080fd5b505af11580156112f5573d6000803e3d6000fd5b5050505060116000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff0219169055505050565b606060058054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113f45780601f106113c9576101008083540402835291602001916113f4565b820191906000526020600020905b8154815290600101906020018083116113d757829003601f168201915b5050505050905090565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600061144682611d15565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561148357600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806114c357506114c28133612a74565b5b15156114ce57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166114ef836113fe565b73ffffffffffffffffffffffffffffffffffffffff1614158061153f5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156115fc57826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b6060600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561168c57602002820191906000526020600020905b815481526020019060010190808311611678575b50505050509050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116f357600080fd5b8060139080519060200190611709929190614007565b5050565b6000600980549050905090565b60116020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a90046fffffffffffffffffffffffffffffffff16905082565b80611785338261310f565b151561179057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141515156117cc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561180857600080fd5b61181284836131a4565b61181c848361330d565b6118268383613525565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b601260009054906101000a90046fffffffffffffffffffffffffffffffff1681565b6000600d826040518082805190602001908083835b6020831015156118ed57805182526020820191506020810190506020830392506118c8565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020549050919050565b6060600980548060200260200160405190810160405280929190818152602001828054801561197657602002820191906000526020600020905b815481526020019060010190808311611962575b5050505050905090565b600061198b83611d93565b8210151561199857600080fd5b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156119e457fe5b9060005260206000200154905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611a5257600080fd5b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050158015611ad0573d6000803e3d6000fd5b50565b80611ade338261310f565b1515611ae957600080fd5b611b0584848460206040519081016040528060008152506126df565b50505050565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b6000611b8761170d565b82101515611b9457600080fd5b600982815481101515611ba357fe5b90600052602060002001549050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c1057600080fd5b8060149080519060200190611c26929190614007565b5050565b600c81815481101515611c3957fe5b9060005260206000209060020201600091509050806000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ce55780601f10611cba57610100808354040283529160200191611ce5565b820191906000526020600020905b815481529060010190602001808311611cc857829003601f168201915b5050505050908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6000806001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611d8a57600080fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611dd057600080fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b611e1f614087565b600080601260009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1634141515611e6057600080fd5b6000600d856040518082805190602001908083835b602083101515611e9a5780518252602082019150602081019050602083039250611e75565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902054141515611eda57600080fd5b60408051908101604052808581526020013373ffffffffffffffffffffffffffffffffffffffff1681525092506001600c84908060018154018082558091505090600182039060005260206000209060020201600090919290919091506000820151816000019080519060200190611f539291906140b7565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505003915081600d856040518082805190602001908083835b602083101515611fd95780518252602082019150602081019050602083039250611fb4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208190555061201a33836135fc565b600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150555080601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008481526020019081526020016000208190555050505050565b61217a614137565b823373ffffffffffffffffffffffffffffffffffffffff1661219b82611d15565b73ffffffffffffffffffffffffffffffffffffffff161415156121bd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166011600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561222e57600080fd5b60408051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001846fffffffffffffffffffffffffffffffff168152509150816011600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050612314308561143b565b61231f333086611ad3565b50505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156123e25780601f106123b7576101008083540402835291602001916123e2565b820191906000526020600020905b8154815290600101906020018083116123c557829003601f168201915b5050505050905090565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561244757600080fd5b6000816fffffffffffffffffffffffffffffffff1611801561247c5750612710816fffffffffffffffffffffffffffffffff16105b151561248757600080fd5b80601260106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b6000600e60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561254757600080fd5b80600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126a357600080fd5b80601260006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555050565b816126ea338261310f565b15156126f557600080fd5b61270085858561177a565b61270c85858585613653565b151561271757600080fd5b5050505050565b6000612729836124c3565b8210151561273657600080fd5b600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561278257fe5b9060005260206000200154905092915050565b60606127a082611b0b565b15156127ab57600080fd5b6129d6600c838154811015156127bd57fe5b90600052602060002090600202016000018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156128625780601f1061283757610100808354040283529160200191612862565b820191906000526020600020905b81548152906001019060200180831161284557829003601f168201915b50505050506129c860148054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129005780601f106128d557610100808354040283529160200191612900565b820191906000526020600020905b8154815290600101906020018083116128e357829003601f168201915b50505050506129ba61291187613841565b60138054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129a75780601f1061297c576101008083540402835291602001916129a7565b820191906000526020600020905b81548152906001019060200180831161298a57829003601f168201915b5050505050613a6390919063ffffffff16565b613a6390919063ffffffff16565b613a6390919063ffffffff16565b9050919050565b6060600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015612a6857602002820191906000526020600020905b815481526020019060010190808311612a54575b50505050509050919050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b600063f0b9e5ba7c01000000000000000000000000000000000000000000000000000000000290509392505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b9257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612bce57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b612c94614137565b600080600073ffffffffffffffffffffffffffffffffffffffff166011600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612d0957600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166011600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612d7a57600080fd5b346011600086815260200190815260200160002060010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16141515612dcc57600080fd5b601160008581526020019081526020016000206040805190810160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff16815250509250600083602001516fffffffffffffffffffffffffffffffff161115612fba57612eb88360200151613c3d565b9150818360200151039050826000015173ffffffffffffffffffffffffffffffffffffffff166108fc826fffffffffffffffffffffffffffffffff169081150290604051600060405180830381858888f19350505050158015612f1f573d6000803e3d6000fd5b50600c84815481101515612f2f57fe5b906000526020600020906002020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc836fffffffffffffffffffffffffffffffff169081150290604051600060405180830381858888f19350505050158015612fb8573d6000803e3d6000fd5b505b60116000858152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff021916905550503073ffffffffffffffffffffffffffffffffffffffff166342842e0e3033876040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1580156130f157600080fd5b505af1158015613105573d6000803e3d6000fd5b5050505050505050565b60008061311b83611d15565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061318a57508373ffffffffffffffffffffffffffffffffffffffff16613172846113fe565b73ffffffffffffffffffffffffffffffffffffffff16145b8061319b575061319a8185612a74565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff166131c482611d15565b73ffffffffffffffffffffffffffffffffffffffff161415156131e657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156133095760006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b600080600061331c8585613c86565b600860008581526020019081526020016000205492506133886001600760008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050613db590919063ffffffff16565b9150600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156133d657fe5b9060005260206000200154905080600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561343057fe5b90600052602060002001819055506000600760008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561348c57fe5b9060005260206000200181905550600760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054809190600190036134ec9190614179565b50600060086000868152602001908152602001600020819055508260086000838152602001908152602001600020819055505050505050565b60006135318383613dce565b600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806008600084815260200190815260200160002081905550505050565b6136068282613f28565b600980549050600a60008381526020019081526020016000208190555060098190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b6000806136758573ffffffffffffffffffffffffffffffffffffffff16613fd8565b15156136845760019150613838565b8473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561374657808201518184015260208101905061372b565b50505050905090810190601f1680156137735780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b15801561379457600080fd5b505af11580156137a8573d6000803e3d6000fd5b505050506040513d60208110156137be57600080fd5b8101908080519060200190929190505050905063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b6060806000606060008086141561388f576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509450613a5a565b60206040519080825280601f01601f1916602001820160405280156138c35781602001602082028038833980820191505090505b509350600092505b6000861115613960576030600a878115156138e257fe5b06017f010000000000000000000000000000000000000000000000000000000000000002848481518110151561391457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a8681151561395057fe5b04955082806001019350506138cb565b82806001900393506040519080825280601f01601f19166020018201604052801561399a5781602001602082028038833980820191505090505b509150600090505b8151811015613a56578383806001900394508151811015156139c057fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028282815181101515613a1957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506139a2565b8194505b50505050919050565b606080606080606060008088955087945060008551111515613a8157fe5b84518651016040519080825280601f01601f191660200182016040528015613ab85781602001602082028038833980820191505090505b509350839250600091505b8551821015613b76578582815181101515613ada57fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028382806001019350815181101515613b3957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050613ac3565b600091505b8451821015613c2e578482815181101515613b9257fe5b9060200101517f010000000000000000000000000000000000000000000000000000000000000090047f0100000000000000000000000000000000000000000000000000000000000000028382806001019350815181101515613bf157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050613b7b565b82965050505050505092915050565b6000612710601260109054906101000a90046fffffffffffffffffffffffffffffffff1683026fffffffffffffffffffffffffffffffff16811515613c7e57fe5b049050919050565b8173ffffffffffffffffffffffffffffffffffffffff16613ca682611d15565b73ffffffffffffffffffffffffffffffffffffffff16141515613cc857600080fd5b613d1b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613db590919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000828211151515613dc357fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613e3c57600080fd5b816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550613ee16001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054613feb90919063ffffffff16565b600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515613f6457600080fd5b613f6e8282613525565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080823b905060008111915050919050565b60008183019050828110151515613ffe57fe5b80905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061404857805160ff1916838001178555614076565b82800160010185558215614076579182015b8281111561407557825182559160200191906001019061405a565b5b50905061408391906141a5565b5090565b604080519081016040528060608152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106140f857805160ff1916838001178555614126565b82800160010185558215614126579182015b8281111561412557825182559160200191906001019061410a565b5b50905061413391906141a5565b5090565b6040805190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b8154818355818111156141a05781836000526020600020918201910161419f91906141a5565b5b505050565b6141c791905b808211156141c35760008160009055506001016141ab565b5090565b905600a165627a7a72305820a7ece9f69b41e906666cf13f1aea7a4bb46567d1c12b7ff092fb2c649d09ac590029",
    "abi": [
        {
            "constant": true,
            "inputs": [],
            "name": "publisherCut",
            "outputs": [
                {
                    "name": "",
                    "type": "uint128"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "cancelDigitalArtSellingItem",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getApproved",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_publisher",
                    "type": "address"
                }
            ],
            "name": "getPublishedTokens",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_preUri",
                    "type": "string"
                }
            ],
            "name": "setPreUri1",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "tokenIdToSellingItem",
            "outputs": [
                {
                    "name": "seller",
                    "type": "address"
                },
                {
                    "name": "price",
                    "type": "uint128"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "createDigitalArtFee",
            "outputs": [
                {
                    "name": "",
                    "type": "uint128"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_string",
                    "type": "string"
                }
            ],
            "name": "getIpfsHashToTokenId",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "getAllTokens",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "tokenOfOwnerByIndex",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "exists",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "tokenByIndex",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_preUri",
                    "type": "string"
                }
            ],
            "name": "setPreUri2",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "digitalArts",
            "outputs": [
                {
                    "name": "ipfsHash",
                    "type": "string"
                },
                {
                    "name": "publisher",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_ipfsHash",
                    "type": "string"
                }
            ],
            "name": "mintDigitalArt",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_price",
                    "type": "uint128"
                }
            ],
            "name": "addDigitalArtSellingItem",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_cut",
                    "type": "uint128"
                }
            ],
            "name": "setPublisherCut",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_publisher",
                    "type": "address"
                }
            ],
            "name": "publishedCountOf",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_approved",
                    "type": "bool"
                }
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_fee",
                    "type": "uint128"
                }
            ],
            "name": "setCreateDigitalArtFee",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_publisher",
                    "type": "address"
                },
                {
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "publishedTokenOfOwnerByIndex",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "tokenURI",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "getOwnedTokens",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_operator",
                    "type": "address"
                }
            ],
            "name": "isApprovedForAll",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "",
                    "type": "address"
                },
                {
                    "name": "",
                    "type": "uint256"
                },
                {
                    "name": "",
                    "type": "bytes"
                }
            ],
            "name": "onERC721Received",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes4"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "purchaseDigitalArtSellingItem",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_approved",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_approved",
                    "type": "bool"
                }
            ],
            "name": "ApprovalForAll",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        }
    ],
    "deployed_bytecode": "",
    "constructor_argument": "",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2018-05-19\r\n*/\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\ownership\\Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    emit OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721Holder.sol\r\n\r\ncontract ERC721Holder is ERC721Receiver {\r\n  function onERC721Received(address, uint256, bytes) public returns(bytes4) {\r\n    return ERC721_RECEIVED;\r\n  }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\math\\SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existance of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * @dev The zero address indicates there is no approved address.\r\n   * @dev There can only be one approved address per token at a given time.\r\n   * @dev Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      emit Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n   *  which is called upon a safe transfer, and return the magic value\r\n   *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n   *  the transfer is reverted.\r\n   * @dev Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * @dev Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * @dev Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      emit Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * @dev The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: node_modules\\openzeppelin-solidity\\contracts\\token\\ERC721\\ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  function ERC721Token(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() public view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() public view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * @dev Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * @dev Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * @dev Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * @dev Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * @dev Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts\\Integers.sol\r\n\r\n/**\r\n * Integers Library\r\n *\r\n * In summary this is a simple library of integer functions which allow a simple\r\n * conversion to and from strings\r\n *\r\n * @author James Lockhart <[email\u00a0protected]>\r\n */\r\nlibrary Integers {\r\n    /**\r\n     * Parse Int\r\n     *\r\n     * Converts an ASCII string value into an uint as long as the string\r\n     * its self is a valid unsigned integer\r\n     *\r\n     * @param _value The ASCII string to be converted to an unsigned integer\r\n     * @return uint The unsigned value of the ASCII string\r\n     */\r\n    function parseInt(string _value)\r\n        public\r\n        returns (uint _ret) {\r\n        bytes memory _bytesValue = bytes(_value);\r\n        uint j = 1;\r\n        for(uint i = _bytesValue.length-1; i >= 0 && i < _bytesValue.length; i--) {\r\n            assert(_bytesValue[i] >= 48 && _bytesValue[i] <= 57);\r\n            _ret += (uint(_bytesValue[i]) - 48)*j;\r\n            j*=10;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To String\r\n     *\r\n     * Converts an unsigned integer to the ASCII string equivalent value\r\n     *\r\n     * @param _base The unsigned integer to be converted to a string\r\n     * @return string The resulting ASCII string value\r\n     */\r\n    function toString(uint _base)\r\n        internal\r\n        returns (string) {\r\n\r\n        if  (_base==0){\r\n            return \"0\";\r\n        }\r\n\r\n        bytes memory _tmp = new bytes(32);\r\n        uint i;\r\n        for(i = 0;_base > 0;i++) {\r\n            _tmp[i] = byte((_base % 10) + 48);\r\n            _base /= 10;\r\n        }\r\n        bytes memory _real = new bytes(i--);\r\n        for(uint j = 0; j < _real.length; j++) {\r\n            _real[j] = _tmp[i--];\r\n        }\r\n        return string(_real);\r\n    }\r\n\r\n    /**\r\n     * To Byte\r\n     *\r\n     * Convert an 8 bit unsigned integer to a byte\r\n     *\r\n     * @param _base The 8 bit unsigned integer\r\n     * @return byte The byte equivalent\r\n     */\r\n    function toByte(uint8 _base)\r\n        public\r\n        returns (byte _ret) {\r\n        assembly {\r\n            let m_alloc := add(msize(),0x1)\r\n            mstore8(m_alloc, _base)\r\n            _ret := mload(m_alloc)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To Bytes\r\n     *\r\n     * Converts an unsigned integer to bytes\r\n     *\r\n     * @param _base The integer to be converted to bytes\r\n     * @return bytes The bytes equivalent\r\n     */\r\n    function toBytes(uint _base)\r\n        internal\r\n        returns (bytes _ret) {\r\n        assembly {\r\n            let m_alloc := add(msize(),0x1)\r\n            _ret := mload(m_alloc)\r\n            mstore(_ret, 0x20)\r\n            mstore(add(_ret, 0x20), _base)\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts\\Strings.sol\r\n\r\n/**\r\n * Strings Library\r\n *\r\n * In summary this is a simple library of string functions which make simple\r\n * string operations less tedious in solidity.\r\n *\r\n * Please be aware these functions can be quite gas heavy so use them only when\r\n * necessary not to clog the blockchain with expensive transactions.\r\n *\r\n * @author James Lockhart <[email\u00a0protected]>\r\n */\r\nlibrary Strings {\r\n\r\n    /**\r\n     * Concat (High gas cost)\r\n     *\r\n     * Appends two strings together and returns a new value\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string which will be the concatenated\r\n     *              prefix\r\n     * @param _value The value to be the concatenated suffix\r\n     * @return string The resulting string from combinging the base and value\r\n     */\r\n    function concat(string _base, string _value)\r\n        internal\r\n        returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        assert(_valueBytes.length > 0);\r\n\r\n        string memory _tmpValue = new string(_baseBytes.length +\r\n            _valueBytes.length);\r\n        bytes memory _newValue = bytes(_tmpValue);\r\n\r\n        uint i;\r\n        uint j;\r\n\r\n        for(i = 0; i < _baseBytes.length; i++) {\r\n            _newValue[j++] = _baseBytes[i];\r\n        }\r\n\r\n        for(i = 0; i<_valueBytes.length; i++) {\r\n            _newValue[j++] = _valueBytes[i];\r\n        }\r\n\r\n        return string(_newValue);\r\n    }\r\n\r\n    /**\r\n     * Index Of\r\n     *\r\n     * Locates and returns the position of a character within a string\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string acting as the haystack to be\r\n     *              searched\r\n     * @param _value The needle to search for, at present this is currently\r\n     *               limited to one character\r\n     * @return int The position of the needle starting from 0 and returning -1\r\n     *             in the case of no matches found\r\n     */\r\n    function indexOf(string _base, string _value)\r\n        internal\r\n        returns (int) {\r\n        return _indexOf(_base, _value, 0);\r\n    }\r\n\r\n    /**\r\n     * Index Of\r\n     *\r\n     * Locates and returns the position of a character within a string starting\r\n     * from a defined offset\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string acting as the haystack to be\r\n     *              searched\r\n     * @param _value The needle to search for, at present this is currently\r\n     *               limited to one character\r\n     * @param _offset The starting point to start searching from which can start\r\n     *                from 0, but must not exceed the length of the string\r\n     * @return int The position of the needle starting from 0 and returning -1\r\n     *             in the case of no matches found\r\n     */\r\n    function _indexOf(string _base, string _value, uint _offset)\r\n        internal\r\n        returns (int) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        assert(_valueBytes.length == 1);\r\n\r\n        for(uint i = _offset; i < _baseBytes.length; i++) {\r\n            if (_baseBytes[i] == _valueBytes[0]) {\r\n                return int(i);\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Length\r\n     *\r\n     * Returns the length of the specified string\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string to be measured\r\n     * @return uint The length of the passed string\r\n     */\r\n    function length(string _base)\r\n        internal\r\n        returns (uint) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        return _baseBytes.length;\r\n    }\r\n\r\n    /**\r\n     * Sub String\r\n     *\r\n     * Extracts the beginning part of a string based on the desired length\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string that will be used for\r\n     *              extracting the sub string from\r\n     * @param _length The length of the sub string to be extracted from the base\r\n     * @return string The extracted sub string\r\n     */\r\n    function substring(string _base, int _length)\r\n        internal\r\n        returns (string) {\r\n        return _substring(_base, _length, 0);\r\n    }\r\n\r\n    /**\r\n     * Sub String\r\n     *\r\n     * Extracts the part of a string based on the desired length and offset. The\r\n     * offset and length must not exceed the lenth of the base string.\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string that will be used for\r\n     *              extracting the sub string from\r\n     * @param _length The length of the sub string to be extracted from the base\r\n     * @param _offset The starting point to extract the sub string from\r\n     * @return string The extracted sub string\r\n     */\r\n    function _substring(string _base, int _length, int _offset)\r\n        internal\r\n        returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n\r\n        assert(uint(_offset+_length) <= _baseBytes.length);\r\n\r\n        string memory _tmp = new string(uint(_length));\r\n        bytes memory _tmpBytes = bytes(_tmp);\r\n\r\n        uint j = 0;\r\n        for(uint i = uint(_offset); i < uint(_offset+_length); i++) {\r\n          _tmpBytes[j++] = _baseBytes[i];\r\n        }\r\n\r\n        return string(_tmpBytes);\r\n    }\r\n\r\n    /**\r\n     * String Split (Very high gas cost)\r\n     *\r\n     * Splits a string into an array of strings based off the delimiter value.\r\n     * Please note this can be quite a gas expensive function due to the use of\r\n     * storage so only use if really required.\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *               otherwise this is the string value to be split.\r\n     * @param _value The delimiter to split the string on which must be a single\r\n     *               character\r\n     * @return string[] An array of values split based off the delimiter, but\r\n     *                  do not container the delimiter.\r\n     */\r\n    function split(string _base, string _value)\r\n        internal\r\n        returns (string[] storage splitArr) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        uint _offset = 0;\r\n\r\n        while(_offset < _baseBytes.length-1) {\r\n\r\n            int _limit = _indexOf(_base, _value, _offset);\r\n            if (_limit == -1) {\r\n                _limit = int(_baseBytes.length);\r\n            }\r\n\r\n            string memory _tmp = new string(uint(_limit)-_offset);\r\n            bytes memory _tmpBytes = bytes(_tmp);\r\n\r\n            uint j = 0;\r\n            for(uint i = _offset; i < uint(_limit); i++) {\r\n                _tmpBytes[j++] = _baseBytes[i];\r\n            }\r\n            _offset = uint(_limit) + 1;\r\n            splitArr.push(string(_tmpBytes));\r\n        }\r\n        return splitArr;\r\n    }\r\n\r\n    /**\r\n     * Compare To\r\n     *\r\n     * Compares the characters of two strings, to ensure that they have an\r\n     * identical footprint\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *               otherwise this is the string base to compare against\r\n     * @param _value The string the base is being compared to\r\n     * @return bool Simply notates if the two string have an equivalent\r\n     */\r\n    function compareTo(string _base, string _value)\r\n        internal\r\n        returns (bool) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        if (_baseBytes.length != _valueBytes.length) {\r\n            return false;\r\n        }\r\n\r\n        for(uint i = 0; i < _baseBytes.length; i++) {\r\n            if (_baseBytes[i] != _valueBytes[i]) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Compare To Ignore Case (High gas cost)\r\n     *\r\n     * Compares the characters of two strings, converting them to the same case\r\n     * where applicable to alphabetic characters to distinguish if the values\r\n     * match.\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *               otherwise this is the string base to compare against\r\n     * @param _value The string the base is being compared to\r\n     * @return bool Simply notates if the two string have an equivalent value\r\n     *              discarding case\r\n     */\r\n    function compareToIgnoreCase(string _base, string _value)\r\n        internal\r\n        returns (bool) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        bytes memory _valueBytes = bytes(_value);\r\n\r\n        if (_baseBytes.length != _valueBytes.length) {\r\n            return false;\r\n        }\r\n\r\n        for(uint i = 0; i < _baseBytes.length; i++) {\r\n            if (_baseBytes[i] != _valueBytes[i] &&\r\n                _upper(_baseBytes[i]) != _upper(_valueBytes[i])) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Upper\r\n     *\r\n     * Converts all the values of a string to their corresponding upper case\r\n     * value.\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string base to convert to upper case\r\n     * @return string\r\n     */\r\n    function upper(string _base)\r\n        internal\r\n        returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        for (uint i = 0; i < _baseBytes.length; i++) {\r\n            _baseBytes[i] = _upper(_baseBytes[i]);\r\n        }\r\n        return string(_baseBytes);\r\n    }\r\n\r\n    /**\r\n     * Lower\r\n     *\r\n     * Converts all the values of a string to their corresponding lower case\r\n     * value.\r\n     *\r\n     * @param _base When being used for a data type this is the extended object\r\n     *              otherwise this is the string base to convert to lower case\r\n     * @return string\r\n     */\r\n    function lower(string _base)\r\n        internal\r\n        returns (string) {\r\n        bytes memory _baseBytes = bytes(_base);\r\n        for (uint i = 0; i < _baseBytes.length; i++) {\r\n            _baseBytes[i] = _lower(_baseBytes[i]);\r\n        }\r\n        return string(_baseBytes);\r\n    }\r\n\r\n    /**\r\n     * Upper\r\n     *\r\n     * Convert an alphabetic character to upper case and return the original\r\n     * value when not alphabetic\r\n     *\r\n     * @param _b1 The byte to be converted to upper case\r\n     * @return bytes1 The converted value if the passed value was alphabetic\r\n     *                and in a lower case otherwise returns the original value\r\n     */\r\n    function _upper(bytes1 _b1)\r\n        private\r\n        constant\r\n        returns (bytes1) {\r\n\r\n        if (_b1 >= 0x61 && _b1 <= 0x7A) {\r\n            return bytes1(uint8(_b1)-32);\r\n        }\r\n\r\n        return _b1;\r\n    }\r\n\r\n    /**\r\n     * Lower\r\n     *\r\n     * Convert an alphabetic character to lower case and return the original\r\n     * value when not alphabetic\r\n     *\r\n     * @param _b1 The byte to be converted to lower case\r\n     * @return bytes1 The converted value if the passed value was alphabetic\r\n     *                and in a upper case otherwise returns the original value\r\n     */\r\n    function _lower(bytes1 _b1)\r\n        private\r\n        constant\r\n        returns (bytes1) {\r\n\r\n        if (_b1 >= 0x41 && _b1 <= 0x5A) {\r\n            return bytes1(uint8(_b1)+32);\r\n        }\r\n\r\n        return _b1;\r\n    }\r\n}\r\n\r\n// File: contracts\\DigitalArtChain.sol\r\n\r\ncontract DigitalArtChain is Ownable, ERC721Token, ERC721Holder {\r\n    using Strings for string;\r\n    using Integers for uint;\r\n\r\n    function DigitalArtChain () ERC721Token(\"DigitalArtChain\" ,\"DAC\") public {\r\n\r\n    }\r\n\r\n    struct DigitalArt {\r\n        string ipfsHash;\r\n        address publisher;\r\n    }\r\n\r\n    DigitalArt[] public digitalArts;\r\n    mapping (string => uint256) ipfsHashToTokenId;\r\n\r\n    mapping (address => uint256) internal publishedTokensCount;\r\n    mapping (address => uint256[]) internal publishedTokens;\r\n\r\n    mapping(address => mapping (uint256 => uint256)) internal publishedTokensIndex;\r\n\r\n\r\n    struct SellingItem {\r\n        address seller;\r\n        uint128 price;\r\n    }\r\n\r\n    mapping (uint256 => SellingItem) public tokenIdToSellingItem;\r\n\r\n    uint128 public createDigitalArtFee = 0.00198 ether;\r\n    uint128 public publisherCut = 500;\r\n    string preUri1 = \"http://api.digitalartchain.com/tokens?tokenId=\";\r\n    string preUri2 = \"&ipfsHash=\";\r\n\r\n    /*** Modifier ***/\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n    /*** Owner Action ***/\r\n    function withdraw() public onlyOwner {\r\n        owner.transfer(this.balance);\r\n    }\r\n\r\n    function setCreateDigitalArtFee(uint128 _fee) public onlyOwner {\r\n        createDigitalArtFee = _fee;\r\n    }\r\n\r\n    function setPublisherCut(uint128 _cut) public onlyOwner {\r\n        require(_cut > 0 && _cut < 10000);\r\n        publisherCut = _cut;\r\n    }\r\n\r\n    function setPreUri1(string _preUri) public onlyOwner {\r\n        preUri1 = _preUri;\r\n    }\r\n\r\n    function setPreUri2(string _preUri) public onlyOwner {\r\n        preUri2 = _preUri;\r\n    }\r\n\r\n    function getIpfsHashToTokenId(string _string) public view returns (uint256){\r\n        return ipfsHashToTokenId[_string];\r\n    }\r\n\r\n    function getOwnedTokens(address _owner) public view returns (uint256[]) {\r\n        return ownedTokens[_owner];\r\n    }\r\n\r\n    function getAllTokens() public view returns (uint256[]) {\r\n        return allTokens;\r\n    }\r\n\r\n    function publishedCountOf(address _publisher) public view returns (uint256) {\r\n        return publishedTokensCount[_publisher];\r\n    }\r\n\r\n    function publishedTokenOfOwnerByIndex(address _publisher, uint256 _index) public view returns (uint256) {\r\n        require(_index < publishedCountOf(_publisher));\r\n        return publishedTokens[_publisher][_index];\r\n    }\r\n\r\n    function getPublishedTokens(address _publisher) public view returns (uint256[]) {\r\n        return publishedTokens[_publisher];\r\n    }\r\n\r\n    function mintDigitalArt(string _ipfsHash) public payable {\r\n        require(msg.value == createDigitalArtFee);\r\n        require(ipfsHashToTokenId[_ipfsHash] == 0);\r\n\r\n        DigitalArt memory _digitalArt = DigitalArt({ipfsHash: _ipfsHash, publisher: msg.sender});\r\n        uint256 newDigitalArtId = digitalArts.push(_digitalArt) - 1;\r\n        ipfsHashToTokenId[_ipfsHash] = newDigitalArtId;\r\n        _mint(msg.sender, newDigitalArtId);\r\n\r\n        publishedTokensCount[msg.sender]++;\r\n        uint256 length = publishedTokens[msg.sender].length;\r\n        publishedTokens[msg.sender].push(newDigitalArtId);\r\n        publishedTokensIndex[msg.sender][newDigitalArtId] = length;\r\n    }\r\n\r\n    function tokenURI(uint256 _tokenId) public view returns (string) {\r\n        require(exists(_tokenId));\r\n        return preUri1.concat(_tokenId.toString()).concat(preUri2).concat(digitalArts[_tokenId].ipfsHash);\r\n    }\r\n\r\n    function addDigitalArtSellingItem(uint256 _tokenId, uint128 _price) public onlyOwnerOf(_tokenId) {\r\n        require(tokenIdToSellingItem[_tokenId].seller == address(0));\r\n        SellingItem memory _sellingItem = SellingItem(msg.sender, uint128(_price));\r\n        tokenIdToSellingItem[_tokenId] = _sellingItem;\r\n        approve(address(this), _tokenId);\r\n        safeTransferFrom(msg.sender, address(this), _tokenId);\r\n    }\r\n\r\n    function cancelDigitalArtSellingItem(uint256 _tokenId) public {\r\n        require(tokenIdToSellingItem[_tokenId].seller == msg.sender);\r\n        this.safeTransferFrom(address(this), tokenIdToSellingItem[_tokenId].seller, _tokenId);\r\n        delete tokenIdToSellingItem[_tokenId];\r\n    }\r\n\r\n    function purchaseDigitalArtSellingItem(uint256 _tokenId) public payable {\r\n        require(tokenIdToSellingItem[_tokenId].seller != address(0));\r\n        require(tokenIdToSellingItem[_tokenId].seller != msg.sender);\r\n        require(tokenIdToSellingItem[_tokenId].price == msg.value);\r\n\r\n        SellingItem memory sellingItem = tokenIdToSellingItem[_tokenId];\r\n\r\n        if (sellingItem.price > 0) {\r\n            uint128 actualPublisherCut = _computePublisherCut(sellingItem.price);\r\n            uint128 proceeds = sellingItem.price - actualPublisherCut;\r\n            sellingItem.seller.transfer(proceeds);\r\n            digitalArts[_tokenId].publisher.transfer(actualPublisherCut);\r\n        }\r\n\r\n        delete tokenIdToSellingItem[_tokenId];\r\n        this.safeTransferFrom(address(this), msg.sender, _tokenId);\r\n    }\r\n\r\n    /*** Tools ***/\r\n    function _computePublisherCut(uint128 _price) internal view returns (uint128) {\r\n        return _price * publisherCut / 10000;\r\n    }\r\n\r\n}",
    "data_type": "ERC721",
    "id": "DigitalArtChain_0x323a3e1693e7a0959f65972f3bf2dfcb93239dfe",
    "file": "./Contract_source_Code/DigitalArtChain_0x323a3e1693e7a0959f65972f3bf2dfcb93239dfe.sol"
}