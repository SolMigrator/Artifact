{
    "name": "CentraToken",
    "address": "0x96a65609a7b84e8842732deb08f56c3e21ac6f8a",
    "Compiler Version": "v0.4.13+commit.fb4cb1a",
    "Optimization Enabled": "No with 200 runs",
    "Other Settings": "default evmVersion",
    "creation_bytecode": "6060604052606460206a52b7d2dcc80cd2e40000000281151561001e57fe5b04600055341561002d57600080fd5b5b33600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606460206a52b7d2dcc80cd2e40000000281151561008957fe5b04600c6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5b611fad806101006000396000f300606060405236156101f6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680621b3fe61461020857806306fdde0314610231578063095ea7b3146102c05780630c4ada171461031a57806318160ddd1461037d578063186cd7d2146103a65780631ce7d9da146103cf57806323b872dd146103f857806325f96b73146104715780632f27b5561461049a578063313ce567146104c35780633ccfd60b146104f2578063421e52e31461051f5780634c73eef61461054857806357988a55146105715780636c675ae61461059a5780636fbe769d146105bc57806370a08231146105e5578063767bc136146106325780637a0131051461065b5780637b4fd96e146106845780637f66af09146106ad5780638da5cb5b146106d657806394a5c2e41461072b57806395d89b4114610754578063963e63c7146107e35780639c566cad1461080c578063a457f27f1461086f578063a75439d114610898578063a9059cbb146108c1578063b33a10de1461091b578063b545f2a61461097e578063cb0f86ab146109e1578063cbe23b9414610a44578063d1bdf63914610a6d578063dcc42e9b14610aba578063dd62ed3e14610ae3578063e740f4fc14610b4f578063e831574214610b78578063f45934b614610ba1578063f54580cc14610bca575b6102065b610202610bf3565b505b565b005b341561021357600080fd5b61021b61142d565b6040518082815260200191505060405180910390f35b341561023c57600080fd5b610244611435565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102855780820151818401525b602081019050610269565b50505050905090810190601f1680156102b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102cb57600080fd5b610300600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061146e565b604051808215151515815260200191505060405180910390f35b341561032557600080fd5b61033b6004808035906020019091905050611561565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561038857600080fd5b6103906115a1565b6040518082815260200191505060405180910390f35b34156103b157600080fd5b6103b96115ab565b6040518082815260200191505060405180910390f35b34156103da57600080fd5b6103e26115b1565b6040518082815260200191505060405180910390f35b341561040357600080fd5b610457600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115b9565b604051808215151515815260200191505060405180910390f35b341561047c57600080fd5b6104846118d6565b6040518082815260200191505060405180910390f35b34156104a557600080fd5b6104ad6118f4565b6040518082815260200191505060405180910390f35b34156104ce57600080fd5b6104d6611900565b604051808260ff1660ff16815260200191505060405180910390f35b34156104fd57600080fd5b610505611905565b604051808215151515815260200191505060405180910390f35b341561052a57600080fd5b6105326119db565b6040518082815260200191505060405180910390f35b341561055357600080fd5b61055b6119e8565b6040518082815260200191505060405180910390f35b341561057c57600080fd5b6105846119f5565b6040518082815260200191505060405180910390f35b6105a2610bf3565b604051808215151515815260200191505060405180910390f35b34156105c757600080fd5b6105cf6119fb565b6040518082815260200191505060405180910390f35b34156105f057600080fd5b61061c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611a09565b6040518082815260200191505060405180910390f35b341561063d57600080fd5b610645611a53565b6040518082815260200191505060405180910390f35b341561066657600080fd5b61066e611a61565b6040518082815260200191505060405180910390f35b341561068f57600080fd5b610697611a69565b6040518082815260200191505060405180910390f35b34156106b857600080fd5b6106c0611a74565b6040518082815260200191505060405180910390f35b34156106e157600080fd5b6106e9611a79565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561073657600080fd5b61073e611a9f565b6040518082815260200191505060405180910390f35b341561075f57600080fd5b610767611aac565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107a85780820151818401525b60208101905061078c565b50505050905090810190601f1680156107d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107ee57600080fd5b6107f6611ae5565b6040518082815260200191505060405180910390f35b341561081757600080fd5b61082d6004808035906020019091905050611af1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561087a57600080fd5b610882611b31565b6040518082815260200191505060405180910390f35b34156108a357600080fd5b6108ab611b3e565b6040518082815260200191505060405180910390f35b34156108cc57600080fd5b610901600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b4a565b604051808215151515815260200191505060405180910390f35b341561092657600080fd5b61093c6004808035906020019091905050611d54565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561098957600080fd5b61099f6004808035906020019091905050611d94565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109ec57600080fd5b610a026004808035906020019091905050611dd4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a4f57600080fd5b610a57611e14565b6040518082815260200191505060405180910390f35b3415610a7857600080fd5b610aa4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e22565b6040518082815260200191505060405180910390f35b3415610ac557600080fd5b610acd611e3a565b6040518082815260200191505060405180910390f35b3415610aee57600080fd5b610b39600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e48565b6040518082815260200191505060405180910390f35b3415610b5a57600080fd5b610b62611ed0565b6040518082815260200191505060405180910390f35b3415610b8357600080fd5b610b8b611ed8565b6040518082815260200191505060405180910390f35b3415610bac57600080fd5b610bb4611ee7565b6040518082815260200191505060405180910390f35b3415610bd557600080fd5b610bdd611ef5565b6040518082815260200191505060405180910390f35b60008060004291506359d6c780821115610c0c57600080fd5b6a52b7d2dcc80cd2e4000000600054101515610c2757600080fd5b6608e1bc9bf040003410151515610c3d57600080fd5b67016345785d8a00003410151515610c5457600080fd5b68a2a15d09519be00000341115610c6a57600080fd5b670de0b6b3a76400006608e1bc9bf0400034811515610c8557fe5b04029050600081111515610c9857600080fd5b6359850a80821015610cce5767016345785d8a00003410151515610cbb57600080fd5b6064607d8202811515610cca57fe5b0490505b8160006359850a800111158015610ced57506202a3006359850a800182105b15610d0557606460788202811515610d0157fe5b0490505b816202a3006359850a800111158015610d26575062093a806359850a800182105b15610d3e576064606e8202811515610d3a57fe5b0490505b8162093a806359850a800111158015610d5f5750621275006359850a800182105b15610d7757606460698202811515610d7357fe5b0490505b6a52b7d2dcc80cd2e4000000610d9882600054611f0190919063ffffffff16565b1115610da357600080fd5b610db881600054611f0190919063ffffffff16565b600081905550610e1081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f0190919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506801a055690d9db800003410158015610e74575068056bc75e2d6310000034105b8015610e8657506103e8600280549050105b8015610ed1575060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610f7f5760028054806001018281610eea9190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b68056bc75e2d631000003410158015610fa05750681b1ae4d6e2ef50000034105b8015610fb257506101f4600480549050105b8015610ffe57506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156110ad57600480548060010182816110179190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b681b1ae4d6e2ef50000034101580156110cb575060c8600680549050105b801561111757506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156111c657600680548060010182816111309190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6706f05b59d3b2000034101580156111e657506801a055690d9db8000034105b80156111fa57506305f5e100600880549050105b801561124657506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156112f5576008805480600101828161125f9190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b67016345785d8a0000341015801561131457506706f05b59d3b2000034105b801561132857506305f5e100600a80549050105b801561137457506001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b1561142357600a805480600101828161138d9190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600192505b505090565b6305f5e10081565b6040805190810160405280600c81526020017f43656e74726120746f6b656e000000000000000000000000000000000000000081525081565b600081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60028181548110151561157057fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000805490505b90565b6101f481565b6359d6c78081565b60006359850a804210156115cc57600080fd5b81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611697575081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156116a35750600082115b801561172e5750600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156118c55781600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506118cf565b600090506118cf565b5b9392505050565b606460206a52b7d2dcc80cd2e4000000028115156118f057fe5b0481565b67016345785d8a000081565b601281565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196357600080fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505050600190505b5b90565b6801a055690d9db8000081565b68056bc75e2d6310000081565b6103e881565b600060048054905090505b90565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600060068054905090505b90565b6359850a8081565b6608e1bc9bf0400081565b60c881565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b68a2a15d09519be0000081565b6040805190810160405280600681526020017f43656e747261000000000000000000000000000000000000000000000000000081525081565b67016345785d8a000081565b600a81815481101515611b0057fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b681b1ae4d6e2ef50000081565b67016345785d8a000081565b60006359850a80421015611b5d57600080fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611bac5750600082115b8015611c375750600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15611d445781600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611d4e565b60009050611d4e565b5b92915050565b600681815481101515611d6357fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600881815481101515611da357fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600481815481101515611de357fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a8054905090505b90565b60036020528060005260406000206000915090505481565b600060088054905090505b90565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6305f5e10081565b6a52b7d2dcc80cd2e400000081565b600060028054905090505b90565b6706f05b59d3b2000081565b6000808284019050611f1584821015611f20565b8091505b5092915050565b801515611f2c57600080fd5b5b50565b815481835581811511611f5757818360005260206000209182019101611f569190611f5c565b5b505050565b611f7e91905b80821115611f7a576000816000905550600101611f62565b5090565b905600a165627a7a723058207265aa844742b6d244b7e7c44ebacf3470efe2bebfdd6f99df45905ab3cebe210029",
    "abi": [
        {
            "constant": true,
            "inputs": [],
            "name": "card_blue_first",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [
                {
                    "name": "success",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "cards_gold",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "totalSupply",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "card_black_first",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ico_finish",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [
                {
                    "name": "success",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ownerSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "card_start_minamount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "decimals",
            "outputs": [
                {
                    "name": "",
                    "type": "uint8"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "withdraw",
            "outputs": [
                {
                    "name": "result",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "card_gold_minamount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "card_black_minamount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "card_gold_first",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "tokens_buy",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": true,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cards_black_total",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "balance",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cards_titanium_total",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ico_start",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "token_price",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "card_titanium_first",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "maxValue",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "minValue",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "cards_start",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "card_titanium_minamount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "minValuePre",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_amount",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [
                {
                    "name": "success",
                    "type": "bool"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "cards_titanium",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "cards_blue",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "cards_black",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cards_start_total",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "cards_black_check",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cards_blue_total",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_spender",
                    "type": "address"
                }
            ],
            "name": "allowance",
            "outputs": [
                {
                    "name": "remaining",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "card_start_first",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "maxTokens",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cards_gold_total",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "card_blue_minamount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "type": "function"
        },
        {
            "inputs": [],
            "payable": false,
            "type": "constructor"
        },
        {
            "payable": true,
            "type": "fallback"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_spender",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_value",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        }
    ],
    "deployed_bytecode": "0x606060405236156101f6576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680621b3fe61461020857806306fdde0314610231578063095ea7b3146102c05780630c4ada171461031a57806318160ddd1461037d578063186cd7d2146103a65780631ce7d9da146103cf57806323b872dd146103f857806325f96b73146104715780632f27b5561461049a578063313ce567146104c35780633ccfd60b146104f2578063421e52e31461051f5780634c73eef61461054857806357988a55146105715780636c675ae61461059a5780636fbe769d146105bc57806370a08231146105e5578063767bc136146106325780637a0131051461065b5780637b4fd96e146106845780637f66af09146106ad5780638da5cb5b146106d657806394a5c2e41461072b57806395d89b4114610754578063963e63c7146107e35780639c566cad1461080c578063a457f27f1461086f578063a75439d114610898578063a9059cbb146108c1578063b33a10de1461091b578063b545f2a61461097e578063cb0f86ab146109e1578063cbe23b9414610a44578063d1bdf63914610a6d578063dcc42e9b14610aba578063dd62ed3e14610ae3578063e740f4fc14610b4f578063e831574214610b78578063f45934b614610ba1578063f54580cc14610bca575b6102065b610202610bf3565b505b565b005b341561021357600080fd5b61021b61142d565b6040518082815260200191505060405180910390f35b341561023c57600080fd5b610244611435565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102855780820151818401525b602081019050610269565b50505050905090810190601f1680156102b25780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102cb57600080fd5b610300600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061146e565b604051808215151515815260200191505060405180910390f35b341561032557600080fd5b61033b6004808035906020019091905050611561565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561038857600080fd5b6103906115a1565b6040518082815260200191505060405180910390f35b34156103b157600080fd5b6103b96115ab565b6040518082815260200191505060405180910390f35b34156103da57600080fd5b6103e26115b1565b6040518082815260200191505060405180910390f35b341561040357600080fd5b610457600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115b9565b604051808215151515815260200191505060405180910390f35b341561047c57600080fd5b6104846118d6565b6040518082815260200191505060405180910390f35b34156104a557600080fd5b6104ad6118f4565b6040518082815260200191505060405180910390f35b34156104ce57600080fd5b6104d6611900565b604051808260ff1660ff16815260200191505060405180910390f35b34156104fd57600080fd5b610505611905565b604051808215151515815260200191505060405180910390f35b341561052a57600080fd5b6105326119db565b6040518082815260200191505060405180910390f35b341561055357600080fd5b61055b6119e8565b6040518082815260200191505060405180910390f35b341561057c57600080fd5b6105846119f5565b6040518082815260200191505060405180910390f35b6105a2610bf3565b604051808215151515815260200191505060405180910390f35b34156105c757600080fd5b6105cf6119fb565b6040518082815260200191505060405180910390f35b34156105f057600080fd5b61061c600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611a09565b6040518082815260200191505060405180910390f35b341561063d57600080fd5b610645611a53565b6040518082815260200191505060405180910390f35b341561066657600080fd5b61066e611a61565b6040518082815260200191505060405180910390f35b341561068f57600080fd5b610697611a69565b6040518082815260200191505060405180910390f35b34156106b857600080fd5b6106c0611a74565b6040518082815260200191505060405180910390f35b34156106e157600080fd5b6106e9611a79565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561073657600080fd5b61073e611a9f565b6040518082815260200191505060405180910390f35b341561075f57600080fd5b610767611aac565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107a85780820151818401525b60208101905061078c565b50505050905090810190601f1680156107d55780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156107ee57600080fd5b6107f6611ae5565b6040518082815260200191505060405180910390f35b341561081757600080fd5b61082d6004808035906020019091905050611af1565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561087a57600080fd5b610882611b31565b6040518082815260200191505060405180910390f35b34156108a357600080fd5b6108ab611b3e565b6040518082815260200191505060405180910390f35b34156108cc57600080fd5b610901600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611b4a565b604051808215151515815260200191505060405180910390f35b341561092657600080fd5b61093c6004808035906020019091905050611d54565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561098957600080fd5b61099f6004808035906020019091905050611d94565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109ec57600080fd5b610a026004808035906020019091905050611dd4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a4f57600080fd5b610a57611e14565b6040518082815260200191505060405180910390f35b3415610a7857600080fd5b610aa4600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e22565b6040518082815260200191505060405180910390f35b3415610ac557600080fd5b610acd611e3a565b6040518082815260200191505060405180910390f35b3415610aee57600080fd5b610b39600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611e48565b6040518082815260200191505060405180910390f35b3415610b5a57600080fd5b610b62611ed0565b6040518082815260200191505060405180910390f35b3415610b8357600080fd5b610b8b611ed8565b6040518082815260200191505060405180910390f35b3415610bac57600080fd5b610bb4611ee7565b6040518082815260200191505060405180910390f35b3415610bd557600080fd5b610bdd611ef5565b6040518082815260200191505060405180910390f35b60008060004291506359d6c780821115610c0c57600080fd5b6a52b7d2dcc80cd2e4000000600054101515610c2757600080fd5b6608e1bc9bf040003410151515610c3d57600080fd5b67016345785d8a00003410151515610c5457600080fd5b68a2a15d09519be00000341115610c6a57600080fd5b670de0b6b3a76400006608e1bc9bf0400034811515610c8557fe5b04029050600081111515610c9857600080fd5b6359850a80821015610cce5767016345785d8a00003410151515610cbb57600080fd5b6064607d8202811515610cca57fe5b0490505b8160006359850a800111158015610ced57506202a3006359850a800182105b15610d0557606460788202811515610d0157fe5b0490505b816202a3006359850a800111158015610d26575062093a806359850a800182105b15610d3e576064606e8202811515610d3a57fe5b0490505b8162093a806359850a800111158015610d5f5750621275006359850a800182105b15610d7757606460698202811515610d7357fe5b0490505b6a52b7d2dcc80cd2e4000000610d9882600054611f0190919063ffffffff16565b1115610da357600080fd5b610db881600054611f0190919063ffffffff16565b600081905550610e1081600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611f0190919063ffffffff16565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506801a055690d9db800003410158015610e74575068056bc75e2d6310000034105b8015610e8657506103e8600280549050105b8015610ed1575060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b15610f7f5760028054806001018281610eea9190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b68056bc75e2d631000003410158015610fa05750681b1ae4d6e2ef50000034105b8015610fb257506101f4600480549050105b8015610ffe57506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156110ad57600480548060010182816110179190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b681b1ae4d6e2ef50000034101580156110cb575060c8600680549050105b801561111757506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156111c657600680548060010182816111309190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b6706f05b59d3b2000034101580156111e657506801a055690d9db8000034105b80156111fa57506305f5e100600880549050105b801561124657506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b156112f5576008805480600101828161125f9190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b67016345785d8a0000341015801561131457506706f05b59d3b2000034105b801561132857506305f5e100600a80549050105b801561137457506001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414155b1561142357600a805480600101828161138d9190611f30565b916000526020600020900160005b33909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506001600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b600192505b505090565b6305f5e10081565b6040805190810160405280600c81526020017f43656e74726120746f6b656e000000000000000000000000000000000000000081525081565b600081600d60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a3600190505b92915050565b60028181548110151561157057fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000805490505b90565b6101f481565b6359d6c78081565b60006359850a804210156115cc57600080fd5b81600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611697575081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b80156116a35750600082115b801561172e5750600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b156118c55781600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600d60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a3600190506118cf565b600090506118cf565b5b9392505050565b606460206a52b7d2dcc80cd2e4000000028115156118f057fe5b0481565b67016345785d8a000081565b601281565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561196357600080fd5b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505050600190505b5b90565b6801a055690d9db8000081565b68056bc75e2d6310000081565b6103e881565b600060048054905090505b90565b6000600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b919050565b600060068054905090505b90565b6359850a8081565b6608e1bc9bf0400081565b60c881565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b68a2a15d09519be0000081565b6040805190810160405280600681526020017f43656e747261000000000000000000000000000000000000000000000000000081525081565b67016345785d8a000081565b600a81815481101515611b0057fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b681b1ae4d6e2ef50000081565b67016345785d8a000081565b60006359850a80421015611b5d57600080fd5b81600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410158015611bac5750600082115b8015611c375750600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482600c60008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205401115b15611d445781600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555081600c60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a360019050611d4e565b60009050611d4e565b5b92915050565b600681815481101515611d6357fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600881815481101515611da357fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600481815481101515611de357fe5b906000526020600020900160005b915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600a8054905090505b90565b60036020528060005260406000206000915090505481565b600060088054905090505b90565b6000600d60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490505b92915050565b6305f5e10081565b6a52b7d2dcc80cd2e400000081565b600060028054905090505b90565b6706f05b59d3b2000081565b6000808284019050611f1584821015611f20565b8091505b5092915050565b801515611f2c57600080fd5b5b50565b815481835581811511611f5757818360005260206000209182019101611f569190611f5c565b5b505050565b611f7e91905b80821115611f7a576000816000905550600101611f62565b5090565b905600a165627a7a723058207265aa844742b6d244b7e7c44ebacf3470efe2bebfdd6f99df45905ab3cebe210029",
    "constructor_argument": "",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2017-07-30\r\n*/\r\n\r\npragma solidity ^0.4.13;\r\n    \r\n   // ----------------------------------------------------------------------------------------------\r\n   // Developer Nechesov Andrey: Facebook.com/Nechesov   \r\n   // Enjoy. (c) PRCR.org ICO Platform 2017. The PRCR Licence.\r\n   // ----------------------------------------------------------------------------------------------\r\n    \r\n   // ERC Token Standard #20 Interface\r\n   // https://github.com/ethereum/EIPs/issues/20\r\n  contract ERC20Interface {\r\n      // Get the total token supply\r\n      function totalSupply() constant returns (uint256 totalSupply);\r\n   \r\n      // Get the account balance of another account with address _owner\r\n      function balanceOf(address _owner) constant returns (uint256 balance);\r\n   \r\n      // Send _value amount of tokens to address _to\r\n      function transfer(address _to, uint256 _value) returns (bool success);\r\n   \r\n      // Send _value amount of tokens from address _from to address _to\r\n      function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\r\n   \r\n      // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n      // If this function is called again it overwrites the current allowance with _value.\r\n      // this function is required for some DEX functionality\r\n      function approve(address _spender, uint256 _value) returns (bool success);\r\n   \r\n      // Returns the amount which _spender is still allowed to withdraw from _owner\r\n      function allowance(address _owner, address _spender) constant returns (uint256 remaining);\r\n   \r\n      // Triggered when tokens are transferred.\r\n      event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n   \r\n      // Triggered whenever approve(address _spender, uint256 _value) is called.\r\n      event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n  }  \r\n   \r\n  contract CentraToken is ERC20Interface {\r\n\r\n      string public constant symbol = \"Centra\";\r\n      string public constant name = \"Centra token\";\r\n      uint8 public constant decimals = 18; \r\n           \r\n      uint256 public constant maxTokens = 100000000*10**18; \r\n      uint256 public constant ownerSupply = maxTokens*32/100;\r\n      uint256 _totalSupply = ownerSupply;  \r\n\r\n      uint256 public constant token_price = 1/400*10**18; \r\n      uint public constant ico_start = 1501891200;\r\n      uint public constant ico_finish = 1507248000; \r\n      uint public constant minValuePre = 1/10*10**18; \r\n      uint public constant minValue = 1/10*10**18; \r\n      uint public constant maxValue = 3000*10**18;       \r\n\r\n      uint public constant card_gold_minamount  = 30*10**18;\r\n      uint public constant card_gold_first = 1000;\r\n      mapping(address => uint) cards_gold_check; \r\n      address[] public cards_gold;\r\n\r\n      uint public constant card_black_minamount = 100*10**18;\r\n      uint public constant card_black_first = 500;\r\n      mapping(address => uint) public cards_black_check; \r\n      address[] public cards_black;\r\n\r\n      uint public constant card_titanium_minamount  = 500*10**18;\r\n      uint public constant card_titanium_first = 200;\r\n      mapping(address => uint) cards_titanium_check; \r\n      address[] public cards_titanium;\r\n\r\n      uint public constant card_blue_minamount  = 5/10*10**18;\r\n      uint public constant card_blue_first = 100000000;\r\n      mapping(address => uint) cards_blue_check; \r\n      address[] public cards_blue;\r\n\r\n      uint public constant card_start_minamount  = 1/10*10**18;\r\n      uint public constant card_start_first = 100000000;\r\n      mapping(address => uint) cards_start_check; \r\n      address[] public cards_start;\r\n\r\n      using SafeMath for uint;      \r\n      \r\n      // Owner of this contract\r\n      address public owner;\r\n   \r\n      // Balances for each account\r\n      mapping(address => uint256) balances;\r\n   \r\n      // Owner of account approves the transfer of an amount to another account\r\n      mapping(address => mapping (address => uint256)) allowed;\r\n   \r\n      // Functions with this modifier can only be executed by the owner\r\n      modifier onlyOwner() {\r\n          if (msg.sender != owner) {\r\n              throw;\r\n          }\r\n          _;\r\n      }      \r\n   \r\n      // Constructor\r\n      function CentraToken() {\r\n          owner = msg.sender;\r\n          balances[owner] = ownerSupply;\r\n      }\r\n      \r\n      //default function for buy tokens      \r\n      function() payable {        \r\n          tokens_buy();        \r\n      }\r\n      \r\n      function totalSupply() constant returns (uint256 totalSupply) {\r\n          totalSupply = _totalSupply;\r\n      }\r\n\r\n      //Withdraw money from contract balance to owner\r\n      function withdraw() onlyOwner returns (bool result) {\r\n          owner.send(this.balance);\r\n          return true;\r\n      }\r\n   \r\n      // What is the balance of a particular account?\r\n      function balanceOf(address _owner) constant returns (uint256 balance) {\r\n          return balances[_owner];\r\n      }\r\n   \r\n      // Transfer the balance from owner's account to another account\r\n      function transfer(address _to, uint256 _amount) returns (bool success) {\r\n\r\n          if(now < ico_start) throw;\r\n\r\n          if (balances[msg.sender] >= _amount \r\n              && _amount > 0\r\n              && balances[_to] + _amount > balances[_to]) {\r\n              balances[msg.sender] -= _amount;\r\n              balances[_to] += _amount;\r\n              Transfer(msg.sender, _to, _amount);\r\n              return true;\r\n          } else {\r\n              return false;\r\n          }\r\n      }\r\n   \r\n      // Send _value amount of tokens from address _from to address _to\r\n      // The transferFrom method is used for a withdraw workflow, allowing contracts to send\r\n      // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\r\n      // fees in sub-currencies; the command should fail unless the _from account has\r\n      // deliberately authorized the sender of the message via some mechanism; we propose\r\n      // these standardized APIs for approval:\r\n      function transferFrom(\r\n          address _from,\r\n          address _to,\r\n          uint256 _amount\r\n     ) returns (bool success) {\r\n\r\n         if(now < ico_start) throw;\r\n\r\n         if (balances[_from] >= _amount\r\n             && allowed[_from][msg.sender] >= _amount\r\n             && _amount > 0\r\n             && balances[_to] + _amount > balances[_to]) {\r\n             balances[_from] -= _amount;\r\n             allowed[_from][msg.sender] -= _amount;\r\n             balances[_to] += _amount;\r\n             Transfer(_from, _to, _amount);\r\n             return true;\r\n         } else {\r\n             return false;\r\n         }\r\n     }\r\n  \r\n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\r\n     // If this function is called again it overwrites the current allowance with _value.\r\n     function approve(address _spender, uint256 _amount) returns (bool success) {\r\n         allowed[msg.sender][_spender] = _amount;\r\n         Approval(msg.sender, _spender, _amount);\r\n         return true;\r\n     }\r\n  \r\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\r\n         return allowed[_owner][_spender];\r\n     }\r\n     //get total black cards\r\n    function cards_black_total() constant returns (uint) { \r\n      return cards_black.length;\r\n    }\r\n    //get total gold cards\r\n    function cards_gold_total() constant returns (uint) { \r\n      return cards_gold.length;\r\n    }    \r\n    //get total titanium cards\r\n    function cards_titanium_total() constant returns (uint) { \r\n      return cards_titanium.length;\r\n    }\r\n    //get total blue cards\r\n    function cards_blue_total() constant returns (uint) { \r\n      return cards_blue.length;\r\n    }\r\n\r\n    //get total start cards\r\n    function cards_start_total() constant returns (uint) { \r\n      return cards_start.length;\r\n    }\r\n\r\n      /**\r\n      * Buy tokens pre-sale and sale \r\n      */\r\n      function tokens_buy() payable returns (bool) { \r\n\r\n        uint tnow = now;\r\n        \r\n        if(tnow > ico_finish) throw;        \r\n        if(_totalSupply >= maxTokens) throw;\r\n        if(!(msg.value >= token_price)) throw;\r\n        if(!(msg.value >= minValue)) throw;\r\n        if(msg.value > maxValue) throw;\r\n\r\n        uint tokens_buy = msg.value/token_price*10**18;\r\n\r\n        if(!(tokens_buy > 0)) throw;   \r\n\r\n        if(tnow < ico_start){\r\n          if(!(msg.value >= minValuePre)) throw;\r\n          tokens_buy = tokens_buy*125/100;\r\n        } \r\n        if((ico_start + 86400*0 <= tnow)&&(tnow < ico_start + 86400*2)){\r\n          tokens_buy = tokens_buy*120/100;\r\n        } \r\n        if((ico_start + 86400*2 <= tnow)&&(tnow < ico_start + 86400*7)){\r\n          tokens_buy = tokens_buy*110/100;        \r\n        } \r\n        if((ico_start + 86400*7 <= tnow)&&(tnow < ico_start + 86400*14)){\r\n          tokens_buy = tokens_buy*105/100;        \r\n        }         \r\n\r\n        if(_totalSupply.add(tokens_buy) > maxTokens) throw;\r\n        _totalSupply = _totalSupply.add(tokens_buy);\r\n        balances[msg.sender] = balances[msg.sender].add(tokens_buy); \r\n\r\n        if((msg.value >= card_gold_minamount)\r\n          &&(msg.value < card_black_minamount)\r\n          &&(cards_gold.length < card_gold_first)\r\n          &&(cards_gold_check[msg.sender] != 1)\r\n          ) {\r\n          cards_gold.push(msg.sender);\r\n          cards_gold_check[msg.sender] = 1;\r\n        }       \r\n\r\n        if((msg.value >= card_black_minamount)\r\n          &&(msg.value < card_titanium_minamount)\r\n          &&(cards_black.length < card_black_first)\r\n          &&(cards_black_check[msg.sender] != 1)\r\n          ) {\r\n          cards_black.push(msg.sender);\r\n          cards_black_check[msg.sender] = 1;\r\n        }        \r\n\r\n        if((msg.value >= card_titanium_minamount)\r\n          &&(cards_titanium.length < card_titanium_first)\r\n          &&(cards_titanium_check[msg.sender] != 1)\r\n          ) {\r\n          cards_titanium.push(msg.sender);\r\n          cards_titanium_check[msg.sender] = 1;\r\n        }\r\n\r\n        if((msg.value >= card_blue_minamount)\r\n          &&(msg.value < card_gold_minamount)\r\n          &&(cards_blue.length < card_blue_first)\r\n          &&(cards_blue_check[msg.sender] != 1)\r\n          ) {\r\n          cards_blue.push(msg.sender);\r\n          cards_blue_check[msg.sender] = 1;\r\n        }\r\n\r\n        if((msg.value >= card_start_minamount)\r\n          &&(msg.value < card_blue_minamount)\r\n          &&(cards_start.length < card_start_first)\r\n          &&(cards_start_check[msg.sender] != 1)\r\n          ) {\r\n          cards_start.push(msg.sender);\r\n          cards_start_check[msg.sender] = 1;\r\n        }\r\n\r\n        return true;\r\n      }\r\n      \r\n }\r\n\r\n /**\r\n   * Math operations with safety checks\r\n   */\r\n  library SafeMath {\r\n    function mul(uint a, uint b) internal returns (uint) {\r\n      uint c = a * b;\r\n      assert(a == 0 || c / a == b);\r\n      return c;\r\n    }\r\n\r\n    function div(uint a, uint b) internal returns (uint) {\r\n      // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n      uint c = a / b;\r\n      // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n      return c;\r\n    }\r\n\r\n    function sub(uint a, uint b) internal returns (uint) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n\r\n    function add(uint a, uint b) internal returns (uint) {\r\n      uint c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n\r\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n      return a >= b ? a : b;\r\n    }\r\n\r\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\r\n      return a < b ? a : b;\r\n    }\r\n\r\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n      return a >= b ? a : b;\r\n    }\r\n\r\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\r\n      return a < b ? a : b;\r\n    }\r\n\r\n    function assert(bool assertion) internal {\r\n      if (!assertion) {\r\n        throw;\r\n      }\r\n    }\r\n  }",
    "data_type": "ERC20",
    "id": "CentraToken_0x96a65609a7b84e8842732deb08f56c3e21ac6f8a",
    "file": "./Contract_source_Code/CentraToken_0x96a65609a7b84e8842732deb08f56c3e21ac6f8a.sol"
}