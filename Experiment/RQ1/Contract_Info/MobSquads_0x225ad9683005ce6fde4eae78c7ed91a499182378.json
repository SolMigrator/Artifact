{
    "name": "MobSquads",
    "address": "0x225ad9683005ce6fde4eae78c7ed91a499182378",
    "Compiler Version": "v0.4.19+commit.c4cbbb05",
    "Optimization Enabled": "Yes with 200 runs",
    "Other Settings": "default evmVersion",
    "creation_bytecode": "606060405264e8d4a510006000556611c37937e08000600155600d60085560c8600e5534156200002e57600080fd5b60068054600160a060020a033316600160a060020a031991821681179092556007805490911690911790556000600b55600c80549062000072906001830162000079565b50620000c9565b815481835581811511620000a057600083815260209020620000a0918101908301620000a5565b505050565b620000c691905b80821115620000c25760008155600101620000ac565b5090565b90565b611e1c80620000d96000396000f3006060604052600436106101d75763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630419867581146101dc57806306fdde03146101f4578063095ea7b31461027e5780630a0f8168146102a05780630b7e9c44146102cf5780630dfbdcc5146102ee5780631051db3414610313578063169e18d91461033a57806318160ddd1461034d57806323b872dd1461036057806327d7874c146103885780632821ca71146103a75780632b0fbf72146103bd5780632ba73c151461049557806347e74409146104b45780635809ea99146104c75780636352211e146104da5780636c13b345146104f057806370a082311461050657806376a327fc146105255780638462151c1461053357806395d89b41146105a5578063981b4385146105b857806398bcfbb8146105ce5780639ea58112146105e1578063a3f4df7e146105f7578063a9059cbb1461060a578063aa2f74941461062c578063b047fb5014610684578063b2e6ceeb14610697578063b9186d7d146106ad578063d067f646146106c3578063d3b5dc3b146106e2578063e5de1a31146106f5578063efef39a11461070b578063f5fb22ca14610716578063f76f8d7814610729578063fd2534921461073c575b600080fd5b34156101e757600080fd5b6101f260043561074f565b005b34156101ff57600080fd5b61020761078a565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024357808201518382015260200161022b565b50505050905090810190601f1680156102705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028957600080fd5b6101f2600160a060020a03600435166024356107cc565b34156102ab57600080fd5b6102b3610858565b604051600160a060020a03909116815260200160405180910390f35b34156102da57600080fd5b6101f2600160a060020a0360043516610867565b34156102f957600080fd5b6103016108a9565b60405190815260200160405180910390f35b341561031e57600080fd5b6103266108af565b604051901515815260200160405180910390f35b341561034557600080fd5b6103016108b4565b341561035857600080fd5b6103016108ba565b341561036b57600080fd5b6101f2600160a060020a03600435811690602435166044356108c0565b341561039357600080fd5b6101f2600160a060020a036004351661090e565b34156103b257600080fd5b61030160043561096d565b34156103c857600080fd5b6103d3600435610980565b604051808a81526020018060200189815260200188815260200187600160a060020a0316600160a060020a0316815260200186815260200185815260200184815260200183815260200182810382528a818151815260200191508051906020019080838360005b8381101561045257808201518382015260200161043a565b50505050905090810190601f16801561047f5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34156104a057600080fd5b6101f2600160a060020a0360043516610aec565b34156104bf57600080fd5b610301610b4b565b34156104d257600080fd5b610301610b51565b34156104e557600080fd5b6102b3600435610b57565b34156104fb57600080fd5b6102b3600435610b7b565b341561051157600080fd5b610301600160a060020a0360043516610b96565b610326600435602435610bb1565b341561053e57600080fd5b610552600160a060020a0360043516610e2d565b60405160208082528190810183818151815260200191508051906020019060200280838360005b83811015610591578082015183820152602001610579565b505050509050019250505060405180910390f35b34156105b057600080fd5b610207610f0e565b34156105c357600080fd5b610301600435610f4f565b34156105d957600080fd5b610301610f6e565b34156105ec57600080fd5b6101f2600435610f74565b341561060257600080fd5b610207610faf565b341561061557600080fd5b6101f2600160a060020a0360043516602435610fe6565b341561063757600080fd5b6101f260046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505084359460200135935061101e92505050565b341561068f57600080fd5b6102b3611060565b34156106a257600080fd5b6101f260043561106f565b34156106b857600080fd5b6103016004356110bd565b34156106ce57600080fd5b610301600160a060020a03600435166110cf565b34156106ed57600080fd5b6103016110e1565b341561070057600080fd5b6102b36004356110e7565b6101f2600435611102565b341561072157600080fd5b6101f2611686565b341561073457600080fd5b610207611710565b341561074757600080fd5b610301611747565b60065433600160a060020a039081169116148061077a575060075433600160a060020a039081169116145b151561078557600080fd5b600155565b610792611c30565b60408051908101604052600981527f4d6f625371756164730000000000000000000000000000000000000000000000602082015290505b90565b6107d6338261174d565b15156107e157600080fd5b60008181526004602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038581169182179092559133909116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b600654600160a060020a031681565b60065433600160a060020a0390811691161480610892575060075433600160a060020a039081169116145b151561089d57600080fd5b6108a68161176d565b50565b600e5481565b600190565b600d5481565b60095490565b6108ca838261174d565b15156108d557600080fd5b6108df82826117f8565b15156108ea57600080fd5b6108f382611818565b15156108fe57600080fd5b610909838383611826565b505050565b60065433600160a060020a0390811691161461092957600080fd5b600160a060020a038116151561093e57600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061097882611916565b90505b919050565b600061098a611c30565b6000806000806000806000808a995060098b8154811015156109a857fe5b90600052602060002090600602019050806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a505780601f10610a2557610100808354040283529160200191610a50565b820191906000526020600020905b815481529060010190602001808311610a3357829003601f168201915b5050505050985080600201549750600560008c8152602001908152602001600020549650600260008c815260200190815260200160002060009054906101000a9004600160a060020a031695508060030154945080600301546001148015610abb5750806004015442115b15610ac557600094505b8060040154935080600501549250610adc8b611916565b9150509193959799909294969850565b60065433600160a060020a03908116911614610b0757600080fd5b600160a060020a0381161515610b1c57600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a5481565b60015481565b600081815260026020526040902054600160a060020a031680151561097b57600080fd5b600260205260009081526040902054600160a060020a031681565b600160a060020a031660009081526003602052604090205490565b600082815260026020526040812054600160a060020a0390811690829081908190819081903316861415610be457600080fd5b60008881526002602052604090205433600160a060020a03908116911614610c0b57600080fd5b6001543410158015610c1c57508815155b8015610c2757508715155b15610e2157600160098a815481101515610c3d57fe5b9060005260206000209060060201600301819055504260780160098a815481101515610c6557fe5b906000526020600020906006020160040181905550610ca5600989815481101515610c8c57fe5b90600052602060002090600602016002015460066119d3565b6001019450600c85815481101515610cb957fe5b600091825260209091200180546001908101909155600d80549091019055600b54600c805487908110610ce857fe5b9060005260206000209001541115610d1d57600c805486908110610d0857fe5b600091825260209091200154600b55600a8590555b600e54600d541415610e2157610d44610d3d600154600d540260646119d3565b600f6119ef565b93506001600a540360060260010192508291505b82600601821015610ddf57600082815260026020526040902054600160a060020a031615801590610da4575060008281526002602052604090205430600160a060020a03908116911614155b15610dd457600082815260026020908152604080832054600160a060020a03168352601090915290208054850190555b600190910190610d58565b506000600d8190555b600c54811015610e21576000600c82815481101515610e0357fe5b6000918252602082200191909155600b819055600a55600101610de8565b50505050505092915050565b610e35611c30565b6000610e3f611c30565b6000806000610e4d87610b96565b9450841515610e7d576000604051805910610e655750595b90808252806020026020018201604052509550610f04565b84604051805910610e8b5750595b90808252806020026020018201604052509350610ea66108ba565b925060009150600090505b828111610f0057600081815260026020526040902054600160a060020a0388811691161415610ef85780848381518110610ee757fe5b602090810290910101526001909101905b600101610eb1565b8395505b5050505050919050565b610f16611c30565b60408051908101604052600481527f4d4f4253000000000000000000000000000000000000000000000000000000006020820152905090565b600c805482908110610f5d57fe5b600091825260209091200154905081565b60085481565b60065433600160a060020a0390811691161480610f9f575060075433600160a060020a039081169116145b1515610faa57600080fd5b600e55565b60408051908101604052600981527f4d6f625371756164730000000000000000000000000000000000000000000000602082015281565b610ff0338261174d565b1515610ffb57600080fd5b61100482611818565b151561100f57600080fd5b61101a338383611826565b5050565b60065433600160a060020a0390811691161480611049575060075433600160a060020a039081169116145b151561105457600080fd5b61090983308484611a1a565b600754600160a060020a031681565b6000818152600260205260409020543390600160a060020a031661109282611818565b151561109d57600080fd5b6110a782846117f8565b15156110b257600080fd5b610909818385611826565b60009081526005602052604090205490565b60106020526000908152604090205481565b60005481565b600460205260009081526040902054600160a060020a031681565b6000818152600260209081526040808320546005909252822054600854600160a060020a0390921692909181908190819081908190819081906111436108ba565b101561114e57600080fd5b33600160a060020a03168a600160a060020a03161415151561116f57600080fd5b61117833611818565b151561118357600080fd5b348990101561119157600080fd5b6111cf6111ca6111c360098e8154811015156111a957fe5b9060005260206000209060060201600501546103e86119d3565b60236119ef565b611c02565b97508a15156112c3576111e66111ca8960056119d3565b96506001600a540360060260020195508594505b8560050185101561128157600085815260026020526040902054600160a060020a031615801590611246575060008581526002602052604090205430600160a060020a03908116911614155b1561127657600085815260026020908152604080832054600160a060020a03168352601090915290208054880190555b6001909401936111fa565b600093505b600c548410156112c3576000600c858154811015156112a157fe5b6000918252602082200191909155600b819055600a5560019390930192611286565b600092508a156112d1578792505b600091508a60098c8154811015156112e557fe5b9060005260206000209060060201600201541415801561130457508a15155b1561133a576113376111ca60098d81548110151561131e57fe5b90600052602060002090600602016005015460146119d3565b91505b60008311801561138157506000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5430600160a060020a03908116911614155b156113e1576000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b54600160a060020a031683156108fc0284604051600060405180830381858888f1935050505015156113e157600080fd5b8a158015906113f05750600082115b8015611445575030600160a060020a03166002600060098e81548110151561141457fe5b60009182526020808320600260069093020191909101548352820192909252604001902054600160a060020a031614155b156114c3576002600060098d81548110151561145d57fe5b906000526020600020906006020160020154815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a03166108fc839081150290604051600060405180830381858888f1935050505015156114c357600080fd5b6114fb6111ca6114f460098e8154811015156114db57fe5b90600052602060002090600602016005015460646119d3565b606e6119ef565b90506115068b611916565b60008c815260056020526040812091909155600980548d90811061152657fe5b9060005260206000209060060201600301819055508860098c81548110151561154b57fe5b90600052602060002090600602016005018190555061156b8a338d611826565b30600160a060020a03168a600160a060020a03161415156115b757600160a060020a038a1681156108fc0282604051600060405180830381858888f1935050505015156115b757600080fd5b7f366e81d6675b75f581d1b7b428bc717efb1fa8b4bb542c1d26e15a1bc770baad8b8a600560008f8152602001908152602001600020548d336040519485526020850193909352604080850192909252600160a060020a039081166060850152909116608083015260a0909101905180910390a16000611637348b611c1e565b11156116795733600160a060020a03166108fc611654348c611c1e565b9081150290604051600060405180830381858888f19350505050151561167957600080fd5b5050505050505050505050565b600160a060020a03331660009081526010602052604081205415156116aa57600080fd5b50600160a060020a033316600090815260106020526040812054908111156108a657600160a060020a0333166000818152601060205260408082209190915582156108fc0290839051600060405180830381858888f1935050505015156108a657600080fd5b60408051908101604052600481527f4d4f425300000000000000000000000000000000000000000000000000000000602082015281565b600b5481565b600090815260026020526040902054600160a060020a0390811691161490565b600160a060020a03811615156117bb57600654600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156117b657600080fd5b6108a6565b80600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f1935050505015156108a657600080fd5b600090815260046020526040902054600160a060020a0391821691161490565b600160a060020a0316151590565b600160a060020a0380831660008181526003602090815260408083208054600101905585835260029091529020805473ffffffffffffffffffffffffffffffffffffffff191690911790558316156118c157600160a060020a0383166000908152600360209081526040808320805460001901905583835260049091529020805473ffffffffffffffffffffffffffffffffffffffff191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a1505050565b60008181526005602052604081205481831515611948576119456111ca61193e8460756119ef565b60646119d3565b90505b8360098581548110151561195857fe5b90600052602060002090600602016002015414801561197657508315155b1561198f5761198c6111ca61193e8460756119ef565b90505b8360098581548110151561199f57fe5b9060005260206000209060060201600201541415156119cc576119c96111ca61193e84607a6119ef565b90505b9392505050565b60008082848115156119e157fe5b0490508091505b5092915050565b600080831515611a0257600091506119e8565b50828202828482811515611a1257fe5b04146119cc57fe5b611a22611c42565b600060c06040519081016040528060016009805490500381526020018781526020018481526020016000815260200160008152602001858152509150600160098054806001018281611a749190611c7f565b6000928352602090922085916006020181518155602082015181600101908051611aa2929160200190611cab565b5060408201518160020155606082015181600301556080820151816004015560a08201518160050155505003905080600982815481101515611ae057fe5b600091825260209091206006918202019190915581061580611b025750806001145b15611b1b57600c805490611b199060018301611d29565b505b63ffffffff81168114611b2d57600080fd5b7fb3b0cf861f168bcdb275c69da97b2543631552ba562628aa3c7317d4a6089ef2818787604051838152600160a060020a038216604082015260606020820181815290820184818151815260200191508051906020019080838360005b83811015611ba2578082015183820152602001611b8a565b50505050905090810190601f168015611bcf5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16000818152600560205260408120859055611bfa908683611826565b505050505050565b60008060005460005484811515611c1557fe5b04029392505050565b600082821115611c2a57fe5b50900390565b60206040519081016040526000815290565b60c06040519081016040528060008152602001611c5d611c30565b8152602001600081526020016000815260200160008152602001600081525090565b815481835581811511610909576006028160060283600052602060002091820191016109099190611d4d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611cec57805160ff1916838001178555611d19565b82800160010185558215611d19579182015b82811115611d19578251825591602001919060010190611cfe565b50611d25929150611d92565b5090565b81548183558181151161090957600083815260209020610909918101908301611d92565b6107c991905b80821115611d25576000808255611d6d6001830182611dac565b5060006002820181905560038201819055600482018190556005820155600601611d53565b6107c991905b80821115611d255760008155600101611d98565b50805460018160011615610100020316600290046000825580601f10611dd257506108a6565b601f0160209004906000526020600020908101906108a69190611d925600a165627a7a72305820bfbe563236e760656176ce189d63464a0bf826caaf1741d27ca90bb0bea6e2920029",
    "abi": [
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_price",
                    "type": "uint256"
                }
            ],
            "name": "setHitPrice",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ceoAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                }
            ],
            "name": "payout",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "lethalBonusAtHits",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "implementsERC721",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "currentHitTotal",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "total",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCEO",
                    "type": "address"
                }
            ],
            "name": "setCEO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "nextPrice",
            "outputs": [
                {
                    "name": "nPrice",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getMobster",
            "outputs": [
                {
                    "name": "id",
                    "type": "uint256"
                },
                {
                    "name": "name",
                    "type": "string"
                },
                {
                    "name": "boss",
                    "type": "uint256"
                },
                {
                    "name": "sellingPrice",
                    "type": "uint256"
                },
                {
                    "name": "owner",
                    "type": "address"
                },
                {
                    "name": "state",
                    "type": "uint256"
                },
                {
                    "name": "dazedExipryTime",
                    "type": "uint256"
                },
                {
                    "name": "buyPrice",
                    "type": "uint256"
                },
                {
                    "name": "nextPrice",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCOO",
                    "type": "address"
                }
            ],
            "name": "setCOO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "leadingGang",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "hitPrice",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "mobsterIndexToOwner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "balance",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_victim",
                    "type": "uint256"
                },
                {
                    "name": "_hitter",
                    "type": "uint256"
                }
            ],
            "name": "hitMobster",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "tokensOfOwner",
            "outputs": [
                {
                    "name": "ownerTokens",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "gangHits",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "minimumTokensBeforeSale",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_count",
                    "type": "uint256"
                }
            ],
            "name": "setLethalBonusAtHits",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "NAME",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_name",
                    "type": "string"
                },
                {
                    "name": "_startPrice",
                    "type": "uint256"
                },
                {
                    "name": "_boss",
                    "type": "uint256"
                }
            ],
            "name": "createMobster",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cooAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "takeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "priceOf",
            "outputs": [
                {
                    "name": "price",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "mobsterBalances",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "precision",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "mobsterIndexToApproved",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "purchase",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "claimMobsterFunds",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "SYMBOL",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "leadingHitCount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "name",
                    "type": "string"
                },
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "Birth",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "oldPrice",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "newPrice",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "prevOwner",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "winner",
                    "type": "address"
                }
            ],
            "name": "TokenSold",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "approved",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        }
    ],
    "deployed_bytecode": "0x6060604052600436106101d75763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630419867581146101dc57806306fdde03146101f4578063095ea7b31461027e5780630a0f8168146102a05780630b7e9c44146102cf5780630dfbdcc5146102ee5780631051db3414610313578063169e18d91461033a57806318160ddd1461034d57806323b872dd1461036057806327d7874c146103885780632821ca71146103a75780632b0fbf72146103bd5780632ba73c151461049557806347e74409146104b45780635809ea99146104c75780636352211e146104da5780636c13b345146104f057806370a082311461050657806376a327fc146105255780638462151c1461053357806395d89b41146105a5578063981b4385146105b857806398bcfbb8146105ce5780639ea58112146105e1578063a3f4df7e146105f7578063a9059cbb1461060a578063aa2f74941461062c578063b047fb5014610684578063b2e6ceeb14610697578063b9186d7d146106ad578063d067f646146106c3578063d3b5dc3b146106e2578063e5de1a31146106f5578063efef39a11461070b578063f5fb22ca14610716578063f76f8d7814610729578063fd2534921461073c575b600080fd5b34156101e757600080fd5b6101f260043561074f565b005b34156101ff57600080fd5b61020761078a565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561024357808201518382015260200161022b565b50505050905090810190601f1680156102705780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561028957600080fd5b6101f2600160a060020a03600435166024356107cc565b34156102ab57600080fd5b6102b3610858565b604051600160a060020a03909116815260200160405180910390f35b34156102da57600080fd5b6101f2600160a060020a0360043516610867565b34156102f957600080fd5b6103016108a9565b60405190815260200160405180910390f35b341561031e57600080fd5b6103266108af565b604051901515815260200160405180910390f35b341561034557600080fd5b6103016108b4565b341561035857600080fd5b6103016108ba565b341561036b57600080fd5b6101f2600160a060020a03600435811690602435166044356108c0565b341561039357600080fd5b6101f2600160a060020a036004351661090e565b34156103b257600080fd5b61030160043561096d565b34156103c857600080fd5b6103d3600435610980565b604051808a81526020018060200189815260200188815260200187600160a060020a0316600160a060020a0316815260200186815260200185815260200184815260200183815260200182810382528a818151815260200191508051906020019080838360005b8381101561045257808201518382015260200161043a565b50505050905090810190601f16801561047f5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34156104a057600080fd5b6101f2600160a060020a0360043516610aec565b34156104bf57600080fd5b610301610b4b565b34156104d257600080fd5b610301610b51565b34156104e557600080fd5b6102b3600435610b57565b34156104fb57600080fd5b6102b3600435610b7b565b341561051157600080fd5b610301600160a060020a0360043516610b96565b610326600435602435610bb1565b341561053e57600080fd5b610552600160a060020a0360043516610e2d565b60405160208082528190810183818151815260200191508051906020019060200280838360005b83811015610591578082015183820152602001610579565b505050509050019250505060405180910390f35b34156105b057600080fd5b610207610f0e565b34156105c357600080fd5b610301600435610f4f565b34156105d957600080fd5b610301610f6e565b34156105ec57600080fd5b6101f2600435610f74565b341561060257600080fd5b610207610faf565b341561061557600080fd5b6101f2600160a060020a0360043516602435610fe6565b341561063757600080fd5b6101f260046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496505084359460200135935061101e92505050565b341561068f57600080fd5b6102b3611060565b34156106a257600080fd5b6101f260043561106f565b34156106b857600080fd5b6103016004356110bd565b34156106ce57600080fd5b610301600160a060020a03600435166110cf565b34156106ed57600080fd5b6103016110e1565b341561070057600080fd5b6102b36004356110e7565b6101f2600435611102565b341561072157600080fd5b6101f2611686565b341561073457600080fd5b610207611710565b341561074757600080fd5b610301611747565b60065433600160a060020a039081169116148061077a575060075433600160a060020a039081169116145b151561078557600080fd5b600155565b610792611c30565b60408051908101604052600981527f4d6f625371756164730000000000000000000000000000000000000000000000602082015290505b90565b6107d6338261174d565b15156107e157600080fd5b60008181526004602052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038581169182179092559133909116907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35050565b600654600160a060020a031681565b60065433600160a060020a0390811691161480610892575060075433600160a060020a039081169116145b151561089d57600080fd5b6108a68161176d565b50565b600e5481565b600190565b600d5481565b60095490565b6108ca838261174d565b15156108d557600080fd5b6108df82826117f8565b15156108ea57600080fd5b6108f382611818565b15156108fe57600080fd5b610909838383611826565b505050565b60065433600160a060020a0390811691161461092957600080fd5b600160a060020a038116151561093e57600080fd5b6006805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600061097882611916565b90505b919050565b600061098a611c30565b6000806000806000806000808a995060098b8154811015156109a857fe5b90600052602060002090600602019050806001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610a505780601f10610a2557610100808354040283529160200191610a50565b820191906000526020600020905b815481529060010190602001808311610a3357829003601f168201915b5050505050985080600201549750600560008c8152602001908152602001600020549650600260008c815260200190815260200160002060009054906101000a9004600160a060020a031695508060030154945080600301546001148015610abb5750806004015442115b15610ac557600094505b8060040154935080600501549250610adc8b611916565b9150509193959799909294969850565b60065433600160a060020a03908116911614610b0757600080fd5b600160a060020a0381161515610b1c57600080fd5b6007805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600a5481565b60015481565b600081815260026020526040902054600160a060020a031680151561097b57600080fd5b600260205260009081526040902054600160a060020a031681565b600160a060020a031660009081526003602052604090205490565b600082815260026020526040812054600160a060020a0390811690829081908190819081903316861415610be457600080fd5b60008881526002602052604090205433600160a060020a03908116911614610c0b57600080fd5b6001543410158015610c1c57508815155b8015610c2757508715155b15610e2157600160098a815481101515610c3d57fe5b9060005260206000209060060201600301819055504260780160098a815481101515610c6557fe5b906000526020600020906006020160040181905550610ca5600989815481101515610c8c57fe5b90600052602060002090600602016002015460066119d3565b6001019450600c85815481101515610cb957fe5b600091825260209091200180546001908101909155600d80549091019055600b54600c805487908110610ce857fe5b9060005260206000209001541115610d1d57600c805486908110610d0857fe5b600091825260209091200154600b55600a8590555b600e54600d541415610e2157610d44610d3d600154600d540260646119d3565b600f6119ef565b93506001600a540360060260010192508291505b82600601821015610ddf57600082815260026020526040902054600160a060020a031615801590610da4575060008281526002602052604090205430600160a060020a03908116911614155b15610dd457600082815260026020908152604080832054600160a060020a03168352601090915290208054850190555b600190910190610d58565b506000600d8190555b600c54811015610e21576000600c82815481101515610e0357fe5b6000918252602082200191909155600b819055600a55600101610de8565b50505050505092915050565b610e35611c30565b6000610e3f611c30565b6000806000610e4d87610b96565b9450841515610e7d576000604051805910610e655750595b90808252806020026020018201604052509550610f04565b84604051805910610e8b5750595b90808252806020026020018201604052509350610ea66108ba565b925060009150600090505b828111610f0057600081815260026020526040902054600160a060020a0388811691161415610ef85780848381518110610ee757fe5b602090810290910101526001909101905b600101610eb1565b8395505b5050505050919050565b610f16611c30565b60408051908101604052600481527f4d4f4253000000000000000000000000000000000000000000000000000000006020820152905090565b600c805482908110610f5d57fe5b600091825260209091200154905081565b60085481565b60065433600160a060020a0390811691161480610f9f575060075433600160a060020a039081169116145b1515610faa57600080fd5b600e55565b60408051908101604052600981527f4d6f625371756164730000000000000000000000000000000000000000000000602082015281565b610ff0338261174d565b1515610ffb57600080fd5b61100482611818565b151561100f57600080fd5b61101a338383611826565b5050565b60065433600160a060020a0390811691161480611049575060075433600160a060020a039081169116145b151561105457600080fd5b61090983308484611a1a565b600754600160a060020a031681565b6000818152600260205260409020543390600160a060020a031661109282611818565b151561109d57600080fd5b6110a782846117f8565b15156110b257600080fd5b610909818385611826565b60009081526005602052604090205490565b60106020526000908152604090205481565b60005481565b600460205260009081526040902054600160a060020a031681565b6000818152600260209081526040808320546005909252822054600854600160a060020a0390921692909181908190819081908190819081906111436108ba565b101561114e57600080fd5b33600160a060020a03168a600160a060020a03161415151561116f57600080fd5b61117833611818565b151561118357600080fd5b348990101561119157600080fd5b6111cf6111ca6111c360098e8154811015156111a957fe5b9060005260206000209060060201600501546103e86119d3565b60236119ef565b611c02565b97508a15156112c3576111e66111ca8960056119d3565b96506001600a540360060260020195508594505b8560050185101561128157600085815260026020526040902054600160a060020a031615801590611246575060008581526002602052604090205430600160a060020a03908116911614155b1561127657600085815260026020908152604080832054600160a060020a03168352601090915290208054880190555b6001909401936111fa565b600093505b600c548410156112c3576000600c858154811015156112a157fe5b6000918252602082200191909155600b819055600a5560019390930192611286565b600092508a156112d1578792505b600091508a60098c8154811015156112e557fe5b9060005260206000209060060201600201541415801561130457508a15155b1561133a576113376111ca60098d81548110151561131e57fe5b90600052602060002090600602016005015460146119d3565b91505b60008311801561138157506000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b5430600160a060020a03908116911614155b156113e1576000805260026020527fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b54600160a060020a031683156108fc0284604051600060405180830381858888f1935050505015156113e157600080fd5b8a158015906113f05750600082115b8015611445575030600160a060020a03166002600060098e81548110151561141457fe5b60009182526020808320600260069093020191909101548352820192909252604001902054600160a060020a031614155b156114c3576002600060098d81548110151561145d57fe5b906000526020600020906006020160020154815260200190815260200160002060009054906101000a9004600160a060020a0316600160a060020a03166108fc839081150290604051600060405180830381858888f1935050505015156114c357600080fd5b6114fb6111ca6114f460098e8154811015156114db57fe5b90600052602060002090600602016005015460646119d3565b606e6119ef565b90506115068b611916565b60008c815260056020526040812091909155600980548d90811061152657fe5b9060005260206000209060060201600301819055508860098c81548110151561154b57fe5b90600052602060002090600602016005018190555061156b8a338d611826565b30600160a060020a03168a600160a060020a03161415156115b757600160a060020a038a1681156108fc0282604051600060405180830381858888f1935050505015156115b757600080fd5b7f366e81d6675b75f581d1b7b428bc717efb1fa8b4bb542c1d26e15a1bc770baad8b8a600560008f8152602001908152602001600020548d336040519485526020850193909352604080850192909252600160a060020a039081166060850152909116608083015260a0909101905180910390a16000611637348b611c1e565b11156116795733600160a060020a03166108fc611654348c611c1e565b9081150290604051600060405180830381858888f19350505050151561167957600080fd5b5050505050505050505050565b600160a060020a03331660009081526010602052604081205415156116aa57600080fd5b50600160a060020a033316600090815260106020526040812054908111156108a657600160a060020a0333166000818152601060205260408082209190915582156108fc0290839051600060405180830381858888f1935050505015156108a657600080fd5b60408051908101604052600481527f4d4f425300000000000000000000000000000000000000000000000000000000602082015281565b600b5481565b600090815260026020526040902054600160a060020a0390811691161490565b600160a060020a03811615156117bb57600654600160a060020a039081169030163180156108fc0290604051600060405180830381858888f1935050505015156117b657600080fd5b6108a6565b80600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f1935050505015156108a657600080fd5b600090815260046020526040902054600160a060020a0391821691161490565b600160a060020a0316151590565b600160a060020a0380831660008181526003602090815260408083208054600101905585835260029091529020805473ffffffffffffffffffffffffffffffffffffffff191690911790558316156118c157600160a060020a0383166000908152600360209081526040808320805460001901905583835260049091529020805473ffffffffffffffffffffffffffffffffffffffff191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051600160a060020a039384168152919092166020820152604080820192909252606001905180910390a1505050565b60008181526005602052604081205481831515611948576119456111ca61193e8460756119ef565b60646119d3565b90505b8360098581548110151561195857fe5b90600052602060002090600602016002015414801561197657508315155b1561198f5761198c6111ca61193e8460756119ef565b90505b8360098581548110151561199f57fe5b9060005260206000209060060201600201541415156119cc576119c96111ca61193e84607a6119ef565b90505b9392505050565b60008082848115156119e157fe5b0490508091505b5092915050565b600080831515611a0257600091506119e8565b50828202828482811515611a1257fe5b04146119cc57fe5b611a22611c42565b600060c06040519081016040528060016009805490500381526020018781526020018481526020016000815260200160008152602001858152509150600160098054806001018281611a749190611c7f565b6000928352602090922085916006020181518155602082015181600101908051611aa2929160200190611cab565b5060408201518160020155606082015181600301556080820151816004015560a08201518160050155505003905080600982815481101515611ae057fe5b600091825260209091206006918202019190915581061580611b025750806001145b15611b1b57600c805490611b199060018301611d29565b505b63ffffffff81168114611b2d57600080fd5b7fb3b0cf861f168bcdb275c69da97b2543631552ba562628aa3c7317d4a6089ef2818787604051838152600160a060020a038216604082015260606020820181815290820184818151815260200191508051906020019080838360005b83811015611ba2578082015183820152602001611b8a565b50505050905090810190601f168015611bcf5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a16000818152600560205260408120859055611bfa908683611826565b505050505050565b60008060005460005484811515611c1557fe5b04029392505050565b600082821115611c2a57fe5b50900390565b60206040519081016040526000815290565b60c06040519081016040528060008152602001611c5d611c30565b8152602001600081526020016000815260200160008152602001600081525090565b815481835581811511610909576006028160060283600052602060002091820191016109099190611d4d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611cec57805160ff1916838001178555611d19565b82800160010185558215611d19579182015b82811115611d19578251825591602001919060010190611cfe565b50611d25929150611d92565b5090565b81548183558181151161090957600083815260209020610909918101908301611d92565b6107c991905b80821115611d25576000808255611d6d6001830182611dac565b5060006002820181905560038201819055600482018190556005820155600601611d53565b6107c991905b80821115611d255760008155600101611d98565b50805460018160011615610100020316600290046000825580601f10611dd257506108a6565b601f0160209004906000526020600020908101906108a69190611d925600a165627a7a72305820bfbe563236e760656176ce189d63464a0bf826caaf1741d27ca90bb0bea6e2920029",
    "constructor_argument": "",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2018-03-02\r\n*/\r\n\r\npragma solidity ^0.4.19; //\r\n\r\n// MobSquads.io\r\n\r\n\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n\r\n  // Optional\r\n  // function name() public view returns (string name);\r\n  // function symbol() public view returns (string symbol);\r\n  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);\r\n  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);\r\n}\r\n\r\ncontract MobSquads is ERC721 {\r\n\r\n  /*** EVENTS ***/\r\n\r\n  /// @dev The Birth event is fired whenever a new mobster comes into existence.\r\n  event Birth(uint256 tokenId, string name, address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a token is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721.\r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n  /*** CONSTANTS ***/\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"MobSquads\"; //\r\n  string public constant SYMBOL = \"MOBS\"; //\r\n\r\n  uint256 public precision = 1000000000000; //0.000001 Eth\r\n\r\n  uint256 public hitPrice =  0.005 ether;\r\n\r\n  /*** STORAGE ***/\r\n\r\n  /// @dev A mapping from mobster IDs to the address that owns them. All villians have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public mobsterIndexToOwner;\r\n\r\n  // @dev A mapping from owner address to count of tokens that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from mobsters to an address that has been approved to call\r\n  ///  transferFrom(). Each mobster can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public mobsterIndexToApproved;\r\n\r\n  // @dev A mapping from mobsters to the price of the token.\r\n  mapping (uint256 => uint256) private mobsterIndexToPrice;\r\n\r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n\r\n  // minimum tokens before sales\r\n  uint256 public minimumTokensBeforeSale = 13;\r\n\r\n  /*** DATATYPES ***/\r\n  struct Mobster {\r\n    uint256 id; // needed for gnarly front end\r\n    string name;\r\n    uint256 boss; // which gang member of\r\n    uint256 state; // 0 = normal , 1 = dazed\r\n    uint256 dazedExipryTime; // if this mobster was disarmed, when does it expire\r\n    uint256 buyPrice; // the price at which this mobster was bossd\r\n  }\r\n\r\n  Mobster[] private mobsters;\r\n  uint256 public leadingGang;\r\n  uint256 public leadingHitCount;\r\n  uint256[] public gangHits;  // number of hits a gang has done\r\n  uint256 public currentHitTotal;\r\n  uint256 public lethalBonusAtHits = 200;\r\n\r\n\r\n  // @dev A mapping from mobsters to the price of the token.\r\n  mapping (uint256 => uint256) private bossIndexToGang;\r\n\r\n  mapping (address => uint256) public mobsterBalances;\r\n\r\n\r\n  /*** ACCESS MODIFIERS ***/\r\n  /// @dev Access modifier for CEO-only functionality\r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  /*** CONSTRUCTOR ***/\r\n  function MobSquads() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n    leadingHitCount = 0;\r\n     gangHits.length++;\r\n  //  _createMobster(\"The Godfather\",address(this),2000000000000000,0);\r\n  }\r\n\r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().\r\n  /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n  ///  clear all approvals.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    mobsterIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  /// @dev Creates a new mobster with the given name.\r\n  function createMobster(string _name, uint256 _startPrice, uint256 _boss) public onlyCLevel {\r\n    _createMobster(_name, address(this), _startPrice,_boss);\r\n  }\r\n\r\n  /// @notice Returns all the relevant information about a specific mobster.\r\n  /// @param _tokenId The tokenId of the mobster of interest.\r\n  function getMobster(uint256 _tokenId) public view returns (\r\n    uint256 id,\r\n    string name,\r\n    uint256 boss,\r\n    uint256 sellingPrice,\r\n    address owner,\r\n    uint256 state,\r\n    uint256 dazedExipryTime,\r\n    uint256 buyPrice,\r\n    uint256 nextPrice\r\n  ) {\r\n    id = _tokenId;\r\n    Mobster storage mobster = mobsters[_tokenId];\r\n    name = mobster.name;\r\n    boss = mobster.boss;\r\n    sellingPrice =mobsterIndexToPrice[_tokenId];\r\n    owner = mobsterIndexToOwner[_tokenId];\r\n    state = mobster.state;\r\n    if (mobster.state==1 && now>mobster.dazedExipryTime){\r\n        state=0; // time expired so say they are armed\r\n    }\r\n    dazedExipryTime=mobster.dazedExipryTime;\r\n    buyPrice=mobster.buyPrice;\r\n    nextPrice=calculateNewPrice(_tokenId);\r\n  }\r\n\r\n\r\n  function setLethalBonusAtHits (uint256 _count) public onlyCLevel {\r\n        lethalBonusAtHits = _count;\r\n    }\r\n\r\n    function setHitPrice (uint256 _price) public onlyCLevel {\r\n          hitPrice = _price;\r\n      }\r\n\r\n  /// hit a mobster\r\n  function hitMobster(uint256 _victim  , uint256 _hitter) public payable returns (bool){\r\n    address mobsterOwner = mobsterIndexToOwner[_victim];\r\n    require(msg.sender != mobsterOwner); // it doesn't make sense, but hey\r\n    require(msg.sender==mobsterIndexToOwner[_hitter]); // they must be a hitter owner\r\n\r\n    // Godfather cannot be hit\r\n    if (msg.value>=hitPrice && _victim!=0 && _hitter!=0){\r\n        // zap mobster\r\n        mobsters[_victim].state=1;\r\n        mobsters[_victim].dazedExipryTime = now + (2 * 1 minutes);\r\n\r\n        uint256 gangNumber=SafeMath.div(mobsters[_hitter].boss,6)+1;\r\n\r\n        gangHits[gangNumber]++; // increase the hit count for this gang\r\n        currentHitTotal++;\r\n\r\n        if  (gangHits[gangNumber]>leadingHitCount){\r\n            leadingHitCount=gangHits[gangNumber];\r\n            leadingGang=gangNumber;\r\n        }\r\n\r\n      // Lethal Bonus Time\r\n     if (currentHitTotal==lethalBonusAtHits){\r\n       uint256 lethalBonus = SafeMath.mul(SafeMath.div(currentHitTotal * hitPrice,100),15); // 15% = 90% for mobsters/bosses\r\n\r\n         // each of the 6 members of the gang with the most hits receives 10% of the Hit Pool\r\n         uint256 winningMobsterIndex  = (6*(leadingGang-1))+1; // include the boss\r\n         for (uint256 x = winningMobsterIndex;x<6+winningMobsterIndex;x++){\r\n             if(mobsterIndexToOwner[x]!=0 && mobsterIndexToOwner[x]!=address(this)){\r\n                         mobsterBalances[ mobsterIndexToOwner[x]]+=lethalBonus; // available for withdrawal\r\n              }\r\n         } // end for this gang\r\n\r\n         currentHitTotal=0; // reset the counter\r\n\r\n         // need to reset the gangHits\r\n         for (uint256 y = 0 ; y<gangHits.length;y++){\r\n           gangHits[y]=0;\r\n           leadingHitCount=0;\r\n           leadingGang=0;\r\n         }\r\n\r\n     } // end if bonus time\r\n\r\n\r\n   } // end if this is a hit\r\n\r\n}\r\n\r\n\r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  /// For querying owner of token\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = mobsterIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to);\r\n  }\r\n\r\n\r\n\r\n  // Allows someone to send ether and obtain the token\r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = mobsterIndexToOwner[_tokenId];\r\n\r\n    uint256 sellingPrice = mobsterIndexToPrice[_tokenId];\r\n    // no sales until we reach a minimum amount\r\n    require(totalSupply()>=minimumTokensBeforeSale);\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != msg.sender);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(msg.sender));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n// Godfather when sold will raise by 17% (10% previous owner , 3.5% to contract, 3,5% to pool for mobsters)\r\n// Bosses when sold will raise by 17% (10% previous owner , 3.5% to contract , 3.5% to Godfather owner)\r\n// Mobsters when sold will raise by 22% (10% previous owner, 3.5% to Godfather, 3.5% to contract, 5% to their boss owner)\r\n    uint256 contractFee = roundIt(uint256(SafeMath.mul(SafeMath.div(mobsters[_tokenId].buyPrice,1000),35))); // 3.5%\r\n\r\n     // godfather is flipped\r\n    if (_tokenId==0){\r\n        uint256 poolPayment = roundIt(uint256(SafeMath.div(contractFee,5))); // 20%\r\n        // each of the 5 members of the gang with the most hits receives 20% of the mobsterPool\r\n\r\n        //leadingGang 0,1,2,3,4 = gangs\r\n        // leaders are  always 1,7,13,19,25 ,,,, so mobsters are (6*leadingGang)+2; -->\r\n        uint256 winningMobsterIndex  = (6*(leadingGang-1))+2; // boss not included in mobster payments\r\n        for (uint256 x = winningMobsterIndex;x<5+winningMobsterIndex;x++){\r\n            if(mobsterIndexToOwner[x]!=0 &&  mobsterIndexToOwner[x]!=address(this)){\r\n                        mobsterBalances[ mobsterIndexToOwner[x]]+=poolPayment; // available for withdrawal\r\n             }\r\n        }\r\n\r\n        // need to reset the gangHits\r\n        for (uint256 y = 0 ; y<gangHits.length;y++){\r\n          gangHits[y]=0;\r\n          leadingHitCount=0;\r\n          leadingGang=0;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // boss\r\n    uint256 godFatherFee = 0;\r\n    if (_tokenId!=0){\r\n        godFatherFee = contractFee; // 3.5%\r\n    }\r\n    // mobster\r\n    uint256 bossFee = 0;\r\n    if (mobsters[_tokenId].boss!=_tokenId && _tokenId!=0){\r\n        bossFee =  roundIt(uint256(SafeMath.div(mobsters[_tokenId].buyPrice,20))); // 5%\r\n    }\r\n    // pay the godfather if not owned by contract\r\n    if (godFatherFee>0 && mobsterIndexToOwner[0]!=address(this)){\r\n        mobsterIndexToOwner[0].transfer(godFatherFee);\r\n    }\r\n\r\n     // pay the bossFee if not owned by the contract\r\n    if (_tokenId!=0 && bossFee>0 && mobsterIndexToOwner[mobsters[_tokenId].boss]!=address(this)){\r\n        mobsterIndexToOwner[mobsters[_tokenId].boss].transfer(bossFee);\r\n    }\r\n\r\n     uint256 previousOwnerPayout = roundIt(SafeMath.mul(SafeMath.div(mobsters[_tokenId].buyPrice, 100), 110)); // 110% to previous owner\r\n\r\n     mobsterIndexToPrice[_tokenId]  = calculateNewPrice(_tokenId);\r\n     mobsters[_tokenId].state=0;\r\n     mobsters[_tokenId].buyPrice=sellingPrice;\r\n\r\n    _transfer(oldOwner, msg.sender, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(previousOwnerPayout); // 110% to previous owner\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, mobsterIndexToPrice[_tokenId], oldOwner, msg.sender);\r\n\r\n    if(SafeMath.sub(msg.value, sellingPrice)>0){\r\n             msg.sender.transfer(SafeMath.sub(msg.value, sellingPrice)); // return any additional amount\r\n    }\r\n\r\n  }\r\n\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return mobsterIndexToPrice[_tokenId];\r\n  }\r\n\r\n  function nextPrice(uint256 _tokenId) public view returns (uint256 nPrice) {\r\n    return calculateNewPrice(_tokenId);\r\n  }\r\n\r\n\r\n    function claimMobsterFunds() public {\r\n      if (mobsterBalances[msg.sender]==0) revert();\r\n      uint256 amount = mobsterBalances[msg.sender];\r\n      if (amount>0){\r\n        mobsterBalances[msg.sender] = 0;\r\n        msg.sender.transfer(amount);\r\n      }\r\n    }\r\n\r\n\r\n function calculateNewPrice(uint256 _tokenId) internal view returns (uint256 price){\r\n   uint256 sellingPrice = mobsterIndexToPrice[_tokenId];\r\n   uint256 newPrice;\r\n\r\n   // level 0\r\n   // Godfather when sold will raise by 17%\r\n   if (_tokenId==0){\r\n         newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 117), 100));\r\n   }\r\n   // level 1\r\n    //Bosses when sold will raise by 17%\r\n  if (mobsters[_tokenId].boss==_tokenId && _tokenId!=0){\r\n        newPrice = roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 117), 100));\r\n   }\r\n   // level 2\r\n   // Mobsters when sold will raise by 22%\r\n  if (mobsters[_tokenId].boss!=_tokenId){\r\n        newPrice= roundIt(SafeMath.div(SafeMath.mul(sellingPrice, 122), 100));\r\n   }\r\n   return newPrice;\r\n }\r\n\r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n\r\n  /// @dev Required for ERC-721 compliance.\r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = mobsterIndexToOwner[_tokenId];\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  /// @param _owner The owner whose tokens we are interested in.\r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalmobsters = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 mobsterId;\r\n      for (mobsterId = 0; mobsterId <= totalmobsters; mobsterId++) {\r\n        if (mobsterIndexToOwner[mobsterId] == _owner) {\r\n          result[resultIndex] = mobsterId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  function totalSupply() public view returns (uint256 total) {\r\n    return mobsters.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  /// For checking approval of transfer for address _to\r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return mobsterIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n\r\n  /// For creating mobsters\r\n  function _createMobster(string _name, address _owner, uint256 _price, uint256 _boss) private {\r\n\r\n    Mobster memory _mobster = Mobster({\r\n      name: _name,\r\n      boss: _boss,\r\n      state: 0,\r\n      dazedExipryTime: 0,\r\n      buyPrice: _price,\r\n      id: mobsters.length-1\r\n    });\r\n    uint256 newMobsterId = mobsters.push(_mobster) - 1;\r\n    mobsters[newMobsterId].id=newMobsterId;\r\n\r\n\r\n    if (newMobsterId % 6 ==0 || newMobsterId==1)\r\n    {\r\n        gangHits.length++;\r\n    }\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newMobsterId == uint256(uint32(newMobsterId)));\r\n\r\n    Birth(newMobsterId, _name, _owner);\r\n\r\n    mobsterIndexToPrice[newMobsterId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newMobsterId);\r\n  }\r\n\r\n  /// Check for token ownership\r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == mobsterIndexToOwner[_tokenId];\r\n  }\r\n\r\n  /// For paying out balance on contract\r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  /// @dev Assigns ownership of a specific mobster to an address.\r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n    // Since the number of mobsters is capped to 2^32 we can't overflow this\r\n    ownershipTokenCount[_to]++;\r\n    //transfer ownership\r\n    mobsterIndexToOwner[_tokenId] = _to;\r\n\r\n    // When creating new mobsters _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete mobsterIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n    // utility to round to the game precision\r\n    function roundIt(uint256 amount) internal constant returns (uint256)\r\n    {\r\n        // round down to correct preicision\r\n        uint256 result = (amount/precision)*precision;\r\n        return result;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}",
    "data_type": "ERC721",
    "id": "MobSquads_0x225ad9683005ce6fde4eae78c7ed91a499182378",
    "file": "./Contract_source_Code/MobSquads_0x225ad9683005ce6fde4eae78c7ed91a499182378.sol"
}