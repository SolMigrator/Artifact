{
    "name": "HodlEarthToken",
    "address": "0x8a8ec4cedf933dc983724c235fd4f4754ffbe6fc",
    "Compiler Version": "v0.4.24+commit.e67f0147",
    "Optimization Enabled": "Yes with 200 runs",
    "Other Settings": "default evmVersion",
    "creation_bytecode": "6080604052600c805460a060020a60ff02191690553480156200002157600080fd5b50604080518082018252600e81527f486f646c4561727468546f6b656e0000000000000000000000000000000000006020808301919091528251808401909352600483527f48454152000000000000000000000000000000000000000000000000000000009083015290620000bf7f01ffc9a700000000000000000000000000000000000000000000000000000000640100000000620001dc810204565b620000f37f80ac58cd00000000000000000000000000000000000000000000000000000000640100000000620001dc810204565b620001277f4f558e7900000000000000000000000000000000000000000000000000000000640100000000620001dc810204565b81516200013c90600590602085019062000249565b5080516200015290600690602084019062000249565b50620001877f780e9d6300000000000000000000000000000000000000000000000000000000640100000000620001dc810204565b620001bb7f5b5e139f00000000000000000000000000000000000000000000000000000000640100000000620001dc810204565b5050600c805433600160a060020a03199182168117909116179055620002ee565b7fffffffff0000000000000000000000000000000000000000000000000000000080821614156200020c57600080fd5b7fffffffff00000000000000000000000000000000000000000000000000000000166000908152602081905260409020805460ff19166001179055565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200028c57805160ff1916838001178555620002bc565b82800160010185558215620002bc579182015b82811115620002bc5782518255916020019190600101906200029f565b50620002ca929150620002ce565b5090565b620002eb91905b80821115620002ca5760008155600101620002d5565b90565b6127bb80620002fe6000396000f3006080604052600436106101d75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101dc57806306fdde0314610212578063081812fc1461029c578063095ea7b3146102d057806318160ddd146102f657806319fa8f501461031d57806323b872dd1461034f5780632c837334146103795780632f745c59146103bb5780633ccfd60b146103df5780633e523e56146103f45780633f4ba83a146104295780633f9b0af21461043e57806341cb2bbf1461045b57806342842e0e1461047357806346b7c7871461049d5780634f558e79146104d95780634f6ccce7146104f15780635c975abb146105095780635d0413d11461051e5780636352211e1461053357806364fb3d1f1461054b57806370a082311461063e578063715018a61461065f5780638456cb5914610674578063892b9df9146106895780638da5cb5b146106a75780639184671f146106bc57806395c04de6146107af57806395d89b41146108e2578063a22cb465146108f7578063b88d4fde1461091d578063bda1c7111461098c578063c87b56dd146109aa578063d8fde871146109c2578063e985e9c5146109dd578063f2fde38b14610a04578063f63582ad14610a25575b600080fd5b3480156101e857600080fd5b506101fe600160e060020a031960043516610ab3565b604080519115158252519081900360200190f35b34801561021e57600080fd5b50610227610ad2565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610261578181015183820152602001610249565b50505050905090810190601f16801561028e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a857600080fd5b506102b4600435610b09565b60408051600160a060020a039092168252519081900360200190f35b3480156102dc57600080fd5b506102f4600160a060020a0360043516602435610b24565b005b34801561030257600080fd5b5061030b610bda565b60408051918252519081900360200190f35b34801561032957600080fd5b50610332610be1565b60408051600160e060020a03199092168252519081900360200190f35b34801561035b57600080fd5b506102f4600160a060020a0360043581169060243516604435610c05565b34801561038557600080fd5b50610394600435602435610c65565b60408051938452600160c860020a0319909216602084015282820152519081900360600190f35b3480156103c757600080fd5b5061030b600160a060020a0360043516602435610ca4565b3480156103eb57600080fd5b506101fe610cf2565b34801561040057600080fd5b5061040c600435610d4e565b60408051600160c860020a03199092168252519081900360200190f35b34801561043557600080fd5b506102f4610d66565b34801561044a57600080fd5b5061030b6004356024351515610e29565b34801561046757600080fd5b5061030b600435610e7d565b34801561047f57600080fd5b506102f4600160a060020a0360043581169060243516604435610e8f565b3480156104a957600080fd5b506104b5600435610eea565b60408051600160c860020a0319909316835260208301919091528051918290030190f35b3480156104e557600080fd5b506101fe600435610f10565b3480156104fd57600080fd5b5061030b600435610f2d565b34801561051557600080fd5b506101fe610f62565b34801561052a57600080fd5b5061030b610f72565b34801561053f57600080fd5b506102b4600435610fa0565b604080516020600480358082013583810280860185019096528085526102f495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610fc49650505050505050565b34801561064a57600080fd5b5061030b600160a060020a036004351661124f565b34801561066b57600080fd5b506102f4611282565b34801561068057600080fd5b506102f46112f0565b6102f4600435602435600160c860020a0319604435166064356113a6565b3480156106b357600080fd5b506102b461156e565b604080516020600480358082013583810280860185019096528085526102f495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061157d9650505050505050565b3480156107bb57600080fd5b5060408051602060048035808201358381028086018501909652808552610804953695939460249493850192918291850190849080828437509497506117f89650505050505050565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561084c578181015183820152602001610834565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561088b578181015183820152602001610873565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156108ca5781810151838201526020016108b2565b50505050905001965050505050505060405180910390f35b3480156108ee57600080fd5b50610227611987565b34801561090357600080fd5b506102f4600160a060020a036004351660243515156119be565b34801561092957600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102f494600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750611a429650505050505050565b6102f4600435602435600160c860020a031960443516606435611aa4565b3480156109b657600080fd5b50610227600435611ca7565b3480156109ce57600080fd5b506101fe600435602435611d5c565b3480156109e957600080fd5b506101fe600160a060020a0360043581169060243516611d86565b348015610a1057600080fd5b506102f4600160a060020a0360043516611db4565b348015610a3157600080fd5b506040805160206004803580820135838102808601850190965280855261080495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611dd79650505050505050565b600160e060020a03191660009081526020819052604090205460ff1690565b60408051808201909152600e81527f486f646c4561727468546f6b656e000000000000000000000000000000000000602082015281565b600090815260026020526040902054600160a060020a031690565b6000610b2f82610fa0565b9050600160a060020a038381169082161415610b4a57600080fd5b33600160a060020a0382161480610b665750610b668133611d86565b1515610b7157600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6009545b90565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b600c5460a060020a900460ff1615610c55576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b610c60838383611f43565b505050565b6000806000610c748585611fe8565b6000818152600d6020908152604080832054600e90925290912054919760c860020a909102965090945092505050565b6000610caf8361124f565b8210610cba57600080fd5b600160a060020a0383166000908152600760205260409020805483908110610cde57fe5b906000526020600020015490505b92915050565b600c54600090600160a060020a03163314610d0c57600080fd5b600c54604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610d46573d6000803e3d6000fd5b506001905090565b600d6020526000908152604090205460c860020a0281565b600c54600160a060020a03163314610d7d57600080fd5b600c5460a060020a900460ff161515610de0576040805160e560020a62461bcd02815260206004820152601660248201527f436f6e7472616374206973206e6f742070617573656400000000000000000000604482015290519081900360640190fd5b600c805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600066038d7ea4c6800081610e4582600a63ffffffff611ff416565b9250610e57838663ffffffff61200916565b9250831515610e75575066038d7ea4c6800080831015610e75578092505b505092915050565b600e6020526000908152604090205481565b600c5460a060020a900460ff1615610edf576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b610c60838383612032565b6000908152600d6020908152604080832054600e9092529091205460c860020a90910291565b600090815260016020526040902054600160a060020a0316151590565b6000610f37610bda565b8210610f4257600080fd5b6009805483908110610f5057fe5b90600052602060002001549050919050565b600c5460a060020a900460ff1681565b60006203d090610f80610bda565b1015610f94575066016bcc41e90000610bde565b5066038d7ea4c6800090565b600081815260016020526040812054600160a060020a0316801515610cec57600080fd5b600080600080600080600c60149054906101000a900460ff16151515611022576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b89519550611031866001610e29565b600c54909250600160a060020a0316331461108c573482111561108c576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612770833981519152604482015290519081900360640190fd5b5060005b858110156112435787818151811015156110a657fe5b90602001906020020151945086818151811015156110c057fe5b9060200190602002015193506111048a828151811015156110dd57fe5b906020019060200201518a838151811015156110f557fe5b90602001906020020151611fe8565b6000818152600d602052604090205490935060c860020a02600160c860020a031916151561117c576040805160e560020a62461bcd02815260206004820152601460248201527f506c6f7420646f6573206e6f742065786973742e000000000000000000000000604482015290519081900360640190fd5b3361118684610fa0565b600160a060020a03161461120a576040805160e560020a62461bcd02815260206004820152603160248201527f5570646174652063616e206f6e6c792062652063617272696564206f7574206260448201527f792074686520706c6f74206f776e65722e000000000000000000000000000000606482015290519081900360840190fd5b6000838152600d60209081526040808320805466ffffffffffffff191660c860020a8a04179055600e9091529020849055600101611090565b50505050505050505050565b6000600160a060020a038216151561126657600080fd5b50600160a060020a031660009081526003602052604090205490565b600c54600160a060020a0316331461129957600080fd5b600c54604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a2600c805473ffffffffffffffffffffffffffffffffffffffff19169055565b600c54600160a060020a0316331461130757600080fd5b600c5460a060020a900460ff1615611357576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b600c805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600c5460009081908190819060a060020a900460ff16156113ff576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b611407610f72565b915061141560016000610e29565b600c54909150600160a060020a0316331461147257818101341015611472576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612770833981519152604482015290519081900360640190fd5b61147c8888611d5c565b92506001831515146114d8576040805160e560020a62461bcd02815260206004820152601360248201527f4c6174206c6f6e6720697320696e76616c696400000000000000000000000000604482015290519081900360640190fd5b6114e28888611fe8565b6000818152600d602052604090205490945060c860020a02600160c860020a03191615611559576040805160e560020a62461bcd02815260206004820152601460248201527f506c6f7420616c7265616479206578697374732e000000000000000000000000604482015290519081900360640190fd5b611564848787612064565b5050505050505050565b600c54600160a060020a031681565b600080600080600080600080600c60149054906101000a900460ff161515156115de576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b8b5197506115ea610f72565b92506115f7886000610e29565b600c54909250600160a060020a03163314611663578161161d848a63ffffffff61200916565b01341015611663576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612770833981519152604482015290519081900360640190fd5b5060005b878110156117ea57898181518110151561167d57fe5b906020019060200201519650888181518110151561169757fe5b9060200190602002015195506116db8c828151811015156116b457fe5b906020019060200201518c838151811015156116cc57fe5b90602001906020020151611d5c565b9350600184151514611737576040805160e560020a62461bcd02815260206004820152601360248201527f4c6174206c6f6e6720697320696e76616c696400000000000000000000000000604482015290519081900360640190fd5b6117608c8281518110151561174857fe5b906020019060200201518c838151811015156110f557fe5b6000818152600d602052604090205490955060c860020a02600160c860020a031916156117d7576040805160e560020a62461bcd02815260206004820152601460248201527f506c6f7420616c7265616479206578697374732e000000000000000000000000604482015290519081900360640190fd5b6117e2858888612064565b600101611667565b505050505050505050505050565b60608060606000606080606060008851945084604051908082528060200260200182016040528015611834578160200160208202803883390190505b50935084604051908082528060200260200182016040528015611861578160200160208202803883390190505b5092508460405190808252806020026020018201604052801561188e578160200160208202803883390190505b509150600090505b848110156119785788818151811015156118ac57fe5b9060200190602002015184828151811015156118c457fe5b602090810290910101528851600d906000908b90849081106118e257fe5b6020908102909101810151825281019190915260400160002054835160c860020a9091029084908390811061191357fe5b600160c860020a03199092166020928302909101909101528851600e906000908b908490811061193f57fe5b90602001906020020151815260200190815260200160002054828281518110151561196657fe5b60209081029091010152600101611896565b50919790965090945092505050565b60408051808201909152600481527f4845415200000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0382163314156119d457600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600c5460a060020a900460ff1615611a92576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b611a9e8484848461209f565b50505050565b600c54600090819060a060020a900460ff1615611af9576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b611b038686611fe8565b9150611b10600180610e29565b905033611b1c83610fa0565b600160a060020a031614611ba0576040805160e560020a62461bcd02815260206004820152603160248201527f5570646174652063616e206f6e6c792062652063617272696564206f7574206260448201527f792074686520706c6f74206f776e65722e000000000000000000000000000000606482015290519081900360840190fd5b600c54600160a060020a03163314611bf85734811115611bf8576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612770833981519152604482015290519081900360640190fd5b6000828152600d602052604090205460c860020a02600160c860020a0319161515611c6d576040805160e560020a62461bcd02815260206004820152601460248201527f506c6f7420646f6573206e6f742065786973742e000000000000000000000000604482015290519081900360640190fd5b506000908152600d60209081526040808320805466ffffffffffffff191660c860020a90960495909517909455600e905291909120555050565b6060611cb282610f10565b1515611cbd57600080fd5b6000828152600b602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015611d505780601f10611d2557610100808354040283529160200191611d50565b820191906000526020600020905b815481529060010190602001808311611d3357829003601f168201915b50505050509050919050565b600060058306158015611d70575060088206155b15611d7d57506001610cec565b50600092915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600c54600160a060020a03163314611dcb57600080fd5b611dd4816120de565b50565b6060806060600080606080606060008a51955085604051908082528060200260200182016040528015611e14578160200160208202803883390190505b50935085604051908082528060200260200182016040528015611e41578160200160208202803883390190505b50925085604051908082528060200260200182016040528015611e6e578160200160208202803883390190505b509150600090505b85811015611f3257611ea78b82815181101515611e8f57fe5b906020019060200201518b838151811015156110f557fe5b9450848482815181101515611eb857fe5b60209081029091018101919091526000868152600d9091526040902054835160c860020a90910290849083908110611eec57fe5b600160c860020a031990921660209283029091018201526000868152600e90915260409020548251839083908110611f2057fe5b60209081029091010152600101611e76565b509199909850909650945050505050565b80611f4e338261215c565b1515611f5957600080fd5b600160a060020a0384161515611f6e57600080fd5b600160a060020a0383161515611f8357600080fd5b611f8d84836121bb565b611f97848361222c565b611fa18383612365565b8183600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b633b9aca009091020190565b6000818381151561200157fe5b049392505050565b600082151561201a57506000610cec565b5081810281838281151561202a57fe5b0414610cec57fe5b8061203d338261215c565b151561204857600080fd5b611a9e8484846020604051908101604052806000815250611a42565b6000838152600d60209081526040808320805466ffffffffffffff191660c860020a8704179055600e9091529020819055610c6033846123ae565b816120aa338261215c565b15156120b557600080fd5b6120c0858585610c05565b6120cc858585856123fd565b15156120d757600080fd5b5050505050565b600160a060020a03811615156120f357600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008061216883610fa0565b905080600160a060020a031684600160a060020a031614806121a3575083600160a060020a031661219884610b09565b600160a060020a0316145b806121b357506121b38185611d86565b949350505050565b81600160a060020a03166121ce82610fa0565b600160a060020a0316146121e157600080fd5b600081815260026020526040902054600160a060020a031615612228576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b600080600061223b858561256a565b600084815260086020908152604080832054600160a060020a038916845260079092529091205490935061227690600163ffffffff61260016565b600160a060020a03861660009081526007602052604090208054919350908390811061229e57fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156122de57fe5b6000918252602080832090910192909255600160a060020a038716815260079091526040812080548490811061231057fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490612347906000198301612712565b50600093845260086020526040808520859055908452909220555050565b60006123718383612612565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6123b882826126a2565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b60008061241285600160a060020a03166126fd565b15156124215760019150612561565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156124b457818101518382015260200161249c565b50505050905090810190601f1680156124e15780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561250357600080fd5b505af1158015612517573d6000803e3d6000fd5b505050506040513d602081101561252d57600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81600160a060020a031661257d82610fa0565b600160a060020a03161461259057600080fd5b600160a060020a0382166000908152600360205260409020546125ba90600163ffffffff61260016565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008282111561260c57fe5b50900390565b600081815260016020526040902054600160a060020a03161561263457600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038816908117909155845260039091529091205461268291612705565b600160a060020a0390921660009081526003602052604090209190915550565b600160a060020a03821615156126b757600080fd5b6126c18282612365565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b81810182811015610cec57fe5b815481835581811115610c6057600083815260209020610c60918101908301610bde91905b8082111561274b5760008155600101612737565b50905600436f6e7472616374206973207061757365640000000000000000000000000000496e73756666696369656e74204574682073656e742e00000000000000000000a165627a7a7230582015ed4b5445283d88f2eef74f16c97ab6910766541d9ff959fc5de1cb2fa9ace40029",
    "abi": [
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_interfaceId",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getApproved",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "InterfaceId_ERC165",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes4"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_plotLat",
                    "type": "uint256"
                },
                {
                    "name": "_plotLng",
                    "type": "uint256"
                }
            ],
            "name": "getPlot",
            "outputs": [
                {
                    "name": "plotReference",
                    "type": "uint256"
                },
                {
                    "name": "colour",
                    "type": "bytes7"
                },
                {
                    "name": "descriptor",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "tokenOfOwnerByIndex",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "withdraw",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "plotColours",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes7"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_noPlots",
                    "type": "uint256"
                },
                {
                    "name": "_updatePlot",
                    "type": "bool"
                }
            ],
            "name": "calculateTransactionFee",
            "outputs": [
                {
                    "name": "fee",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "plotDescriptors",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_plotReference",
                    "type": "uint256"
                }
            ],
            "name": "getPlotByReference",
            "outputs": [
                {
                    "name": "colour",
                    "type": "bytes7"
                },
                {
                    "name": "descriptor",
                    "type": "bytes32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "exists",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "tokenByIndex",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "calculatePlotPrice",
            "outputs": [
                {
                    "name": "currentPlotPrice",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_plotLat",
                    "type": "uint256[]"
                },
                {
                    "name": "_plotLng",
                    "type": "uint256[]"
                },
                {
                    "name": "_colours",
                    "type": "bytes7[]"
                },
                {
                    "name": "_descriptors",
                    "type": "bytes32[]"
                }
            ],
            "name": "updatePlots",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_plotLat",
                    "type": "uint256"
                },
                {
                    "name": "_plotLng",
                    "type": "uint256"
                },
                {
                    "name": "_colour",
                    "type": "bytes7"
                },
                {
                    "name": "_title",
                    "type": "bytes32"
                }
            ],
            "name": "newPlot",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_plotLat",
                    "type": "uint256[]"
                },
                {
                    "name": "_plotLng",
                    "type": "uint256[]"
                },
                {
                    "name": "_colours",
                    "type": "bytes7[]"
                },
                {
                    "name": "_descriptors",
                    "type": "bytes32[]"
                }
            ],
            "name": "newPlots",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_plotReferences",
                    "type": "uint256[]"
                }
            ],
            "name": "getPlotsByReference",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256[]"
                },
                {
                    "name": "",
                    "type": "bytes7[]"
                },
                {
                    "name": "",
                    "type": "bytes32[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_approved",
                    "type": "bool"
                }
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_plotLat",
                    "type": "uint256"
                },
                {
                    "name": "_plotLng",
                    "type": "uint256"
                },
                {
                    "name": "_colour",
                    "type": "bytes7"
                },
                {
                    "name": "_descriptor",
                    "type": "bytes32"
                }
            ],
            "name": "updatePlot",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "tokenURI",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_lat",
                    "type": "uint256"
                },
                {
                    "name": "_lng",
                    "type": "uint256"
                }
            ],
            "name": "validatePlotLatLng",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_operator",
                    "type": "address"
                }
            ],
            "name": "isApprovedForAll",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_plotLats",
                    "type": "uint256[]"
                },
                {
                    "name": "_plotLngs",
                    "type": "uint256[]"
                }
            ],
            "name": "getPlots",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256[]"
                },
                {
                    "name": "",
                    "type": "bytes7[]"
                },
                {
                    "name": "",
                    "type": "bytes32[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [],
            "name": "Pause",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [],
            "name": "Unpause",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "previousOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipRenounced",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_to",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_approved",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_approved",
                    "type": "bool"
                }
            ],
            "name": "ApprovalForAll",
            "type": "event"
        }
    ],
    "deployed_bytecode": "0x6080604052600436106101d75763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a781146101dc57806306fdde0314610212578063081812fc1461029c578063095ea7b3146102d057806318160ddd146102f657806319fa8f501461031d57806323b872dd1461034f5780632c837334146103795780632f745c59146103bb5780633ccfd60b146103df5780633e523e56146103f45780633f4ba83a146104295780633f9b0af21461043e57806341cb2bbf1461045b57806342842e0e1461047357806346b7c7871461049d5780634f558e79146104d95780634f6ccce7146104f15780635c975abb146105095780635d0413d11461051e5780636352211e1461053357806364fb3d1f1461054b57806370a082311461063e578063715018a61461065f5780638456cb5914610674578063892b9df9146106895780638da5cb5b146106a75780639184671f146106bc57806395c04de6146107af57806395d89b41146108e2578063a22cb465146108f7578063b88d4fde1461091d578063bda1c7111461098c578063c87b56dd146109aa578063d8fde871146109c2578063e985e9c5146109dd578063f2fde38b14610a04578063f63582ad14610a25575b600080fd5b3480156101e857600080fd5b506101fe600160e060020a031960043516610ab3565b604080519115158252519081900360200190f35b34801561021e57600080fd5b50610227610ad2565b6040805160208082528351818301528351919283929083019185019080838360005b83811015610261578181015183820152602001610249565b50505050905090810190601f16801561028e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a857600080fd5b506102b4600435610b09565b60408051600160a060020a039092168252519081900360200190f35b3480156102dc57600080fd5b506102f4600160a060020a0360043516602435610b24565b005b34801561030257600080fd5b5061030b610bda565b60408051918252519081900360200190f35b34801561032957600080fd5b50610332610be1565b60408051600160e060020a03199092168252519081900360200190f35b34801561035b57600080fd5b506102f4600160a060020a0360043581169060243516604435610c05565b34801561038557600080fd5b50610394600435602435610c65565b60408051938452600160c860020a0319909216602084015282820152519081900360600190f35b3480156103c757600080fd5b5061030b600160a060020a0360043516602435610ca4565b3480156103eb57600080fd5b506101fe610cf2565b34801561040057600080fd5b5061040c600435610d4e565b60408051600160c860020a03199092168252519081900360200190f35b34801561043557600080fd5b506102f4610d66565b34801561044a57600080fd5b5061030b6004356024351515610e29565b34801561046757600080fd5b5061030b600435610e7d565b34801561047f57600080fd5b506102f4600160a060020a0360043581169060243516604435610e8f565b3480156104a957600080fd5b506104b5600435610eea565b60408051600160c860020a0319909316835260208301919091528051918290030190f35b3480156104e557600080fd5b506101fe600435610f10565b3480156104fd57600080fd5b5061030b600435610f2d565b34801561051557600080fd5b506101fe610f62565b34801561052a57600080fd5b5061030b610f72565b34801561053f57600080fd5b506102b4600435610fa0565b604080516020600480358082013583810280860185019096528085526102f495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750610fc49650505050505050565b34801561064a57600080fd5b5061030b600160a060020a036004351661124f565b34801561066b57600080fd5b506102f4611282565b34801561068057600080fd5b506102f46112f0565b6102f4600435602435600160c860020a0319604435166064356113a6565b3480156106b357600080fd5b506102b461156e565b604080516020600480358082013583810280860185019096528085526102f495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750506040805187358901803560208181028481018201909552818452989b9a99890198929750908201955093508392508501908490808284375094975061157d9650505050505050565b3480156107bb57600080fd5b5060408051602060048035808201358381028086018501909652808552610804953695939460249493850192918291850190849080828437509497506117f89650505050505050565b60405180806020018060200180602001848103845287818151815260200191508051906020019060200280838360005b8381101561084c578181015183820152602001610834565b50505050905001848103835286818151815260200191508051906020019060200280838360005b8381101561088b578181015183820152602001610873565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156108ca5781810151838201526020016108b2565b50505050905001965050505050505060405180910390f35b3480156108ee57600080fd5b50610227611987565b34801561090357600080fd5b506102f4600160a060020a036004351660243515156119be565b34801561092957600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526102f494600160a060020a038135811695602480359092169560443595369560849401918190840183828082843750949750611a429650505050505050565b6102f4600435602435600160c860020a031960443516606435611aa4565b3480156109b657600080fd5b50610227600435611ca7565b3480156109ce57600080fd5b506101fe600435602435611d5c565b3480156109e957600080fd5b506101fe600160a060020a0360043581169060243516611d86565b348015610a1057600080fd5b506102f4600160a060020a0360043516611db4565b348015610a3157600080fd5b506040805160206004803580820135838102808601850190965280855261080495369593946024949385019291829185019084908082843750506040805187358901803560208181028481018201909552818452989b9a998901989297509082019550935083925085019084908082843750949750611dd79650505050505050565b600160e060020a03191660009081526020819052604090205460ff1690565b60408051808201909152600e81527f486f646c4561727468546f6b656e000000000000000000000000000000000000602082015281565b600090815260026020526040902054600160a060020a031690565b6000610b2f82610fa0565b9050600160a060020a038381169082161415610b4a57600080fd5b33600160a060020a0382161480610b665750610b668133611d86565b1515610b7157600080fd5b600082815260026020526040808220805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b6009545b90565b7f01ffc9a70000000000000000000000000000000000000000000000000000000081565b600c5460a060020a900460ff1615610c55576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b610c60838383611f43565b505050565b6000806000610c748585611fe8565b6000818152600d6020908152604080832054600e90925290912054919760c860020a909102965090945092505050565b6000610caf8361124f565b8210610cba57600080fd5b600160a060020a0383166000908152600760205260409020805483908110610cde57fe5b906000526020600020015490505b92915050565b600c54600090600160a060020a03163314610d0c57600080fd5b600c54604051600160a060020a0390911690303180156108fc02916000818181858888f19350505050158015610d46573d6000803e3d6000fd5b506001905090565b600d6020526000908152604090205460c860020a0281565b600c54600160a060020a03163314610d7d57600080fd5b600c5460a060020a900460ff161515610de0576040805160e560020a62461bcd02815260206004820152601660248201527f436f6e7472616374206973206e6f742070617573656400000000000000000000604482015290519081900360640190fd5b600c805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600066038d7ea4c6800081610e4582600a63ffffffff611ff416565b9250610e57838663ffffffff61200916565b9250831515610e75575066038d7ea4c6800080831015610e75578092505b505092915050565b600e6020526000908152604090205481565b600c5460a060020a900460ff1615610edf576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b610c60838383612032565b6000908152600d6020908152604080832054600e9092529091205460c860020a90910291565b600090815260016020526040902054600160a060020a0316151590565b6000610f37610bda565b8210610f4257600080fd5b6009805483908110610f5057fe5b90600052602060002001549050919050565b600c5460a060020a900460ff1681565b60006203d090610f80610bda565b1015610f94575066016bcc41e90000610bde565b5066038d7ea4c6800090565b600081815260016020526040812054600160a060020a0316801515610cec57600080fd5b600080600080600080600c60149054906101000a900460ff16151515611022576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b89519550611031866001610e29565b600c54909250600160a060020a0316331461108c573482111561108c576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612770833981519152604482015290519081900360640190fd5b5060005b858110156112435787818151811015156110a657fe5b90602001906020020151945086818151811015156110c057fe5b9060200190602002015193506111048a828151811015156110dd57fe5b906020019060200201518a838151811015156110f557fe5b90602001906020020151611fe8565b6000818152600d602052604090205490935060c860020a02600160c860020a031916151561117c576040805160e560020a62461bcd02815260206004820152601460248201527f506c6f7420646f6573206e6f742065786973742e000000000000000000000000604482015290519081900360640190fd5b3361118684610fa0565b600160a060020a03161461120a576040805160e560020a62461bcd02815260206004820152603160248201527f5570646174652063616e206f6e6c792062652063617272696564206f7574206260448201527f792074686520706c6f74206f776e65722e000000000000000000000000000000606482015290519081900360840190fd5b6000838152600d60209081526040808320805466ffffffffffffff191660c860020a8a04179055600e9091529020849055600101611090565b50505050505050505050565b6000600160a060020a038216151561126657600080fd5b50600160a060020a031660009081526003602052604090205490565b600c54600160a060020a0316331461129957600080fd5b600c54604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a2600c805473ffffffffffffffffffffffffffffffffffffffff19169055565b600c54600160a060020a0316331461130757600080fd5b600c5460a060020a900460ff1615611357576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b600c805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600c5460009081908190819060a060020a900460ff16156113ff576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b611407610f72565b915061141560016000610e29565b600c54909150600160a060020a0316331461147257818101341015611472576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612770833981519152604482015290519081900360640190fd5b61147c8888611d5c565b92506001831515146114d8576040805160e560020a62461bcd02815260206004820152601360248201527f4c6174206c6f6e6720697320696e76616c696400000000000000000000000000604482015290519081900360640190fd5b6114e28888611fe8565b6000818152600d602052604090205490945060c860020a02600160c860020a03191615611559576040805160e560020a62461bcd02815260206004820152601460248201527f506c6f7420616c7265616479206578697374732e000000000000000000000000604482015290519081900360640190fd5b611564848787612064565b5050505050505050565b600c54600160a060020a031681565b600080600080600080600080600c60149054906101000a900460ff161515156115de576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b8b5197506115ea610f72565b92506115f7886000610e29565b600c54909250600160a060020a03163314611663578161161d848a63ffffffff61200916565b01341015611663576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612770833981519152604482015290519081900360640190fd5b5060005b878110156117ea57898181518110151561167d57fe5b906020019060200201519650888181518110151561169757fe5b9060200190602002015195506116db8c828151811015156116b457fe5b906020019060200201518c838151811015156116cc57fe5b90602001906020020151611d5c565b9350600184151514611737576040805160e560020a62461bcd02815260206004820152601360248201527f4c6174206c6f6e6720697320696e76616c696400000000000000000000000000604482015290519081900360640190fd5b6117608c8281518110151561174857fe5b906020019060200201518c838151811015156110f557fe5b6000818152600d602052604090205490955060c860020a02600160c860020a031916156117d7576040805160e560020a62461bcd02815260206004820152601460248201527f506c6f7420616c7265616479206578697374732e000000000000000000000000604482015290519081900360640190fd5b6117e2858888612064565b600101611667565b505050505050505050505050565b60608060606000606080606060008851945084604051908082528060200260200182016040528015611834578160200160208202803883390190505b50935084604051908082528060200260200182016040528015611861578160200160208202803883390190505b5092508460405190808252806020026020018201604052801561188e578160200160208202803883390190505b509150600090505b848110156119785788818151811015156118ac57fe5b9060200190602002015184828151811015156118c457fe5b602090810290910101528851600d906000908b90849081106118e257fe5b6020908102909101810151825281019190915260400160002054835160c860020a9091029084908390811061191357fe5b600160c860020a03199092166020928302909101909101528851600e906000908b908490811061193f57fe5b90602001906020020151815260200190815260200160002054828281518110151561196657fe5b60209081029091010152600101611896565b50919790965090945092505050565b60408051808201909152600481527f4845415200000000000000000000000000000000000000000000000000000000602082015281565b600160a060020a0382163314156119d457600080fd5b336000818152600460209081526040808320600160a060020a03871680855290835292819020805460ff1916861515908117909155815190815290519293927f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31929181900390910190a35050565b600c5460a060020a900460ff1615611a92576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b611a9e8484848461209f565b50505050565b600c54600090819060a060020a900460ff1615611af9576040805160e560020a62461bcd0281526020600482015260126024820152600080516020612750833981519152604482015290519081900360640190fd5b611b038686611fe8565b9150611b10600180610e29565b905033611b1c83610fa0565b600160a060020a031614611ba0576040805160e560020a62461bcd02815260206004820152603160248201527f5570646174652063616e206f6e6c792062652063617272696564206f7574206260448201527f792074686520706c6f74206f776e65722e000000000000000000000000000000606482015290519081900360840190fd5b600c54600160a060020a03163314611bf85734811115611bf8576040805160e560020a62461bcd0281526020600482015260166024820152600080516020612770833981519152604482015290519081900360640190fd5b6000828152600d602052604090205460c860020a02600160c860020a0319161515611c6d576040805160e560020a62461bcd02815260206004820152601460248201527f506c6f7420646f6573206e6f742065786973742e000000000000000000000000604482015290519081900360640190fd5b506000908152600d60209081526040808320805466ffffffffffffff191660c860020a90960495909517909455600e905291909120555050565b6060611cb282610f10565b1515611cbd57600080fd5b6000828152600b602090815260409182902080548351601f600260001961010060018616150201909316929092049182018490048402810184019094528084529091830182828015611d505780601f10611d2557610100808354040283529160200191611d50565b820191906000526020600020905b815481529060010190602001808311611d3357829003601f168201915b50505050509050919050565b600060058306158015611d70575060088206155b15611d7d57506001610cec565b50600092915050565b600160a060020a03918216600090815260046020908152604080832093909416825291909152205460ff1690565b600c54600160a060020a03163314611dcb57600080fd5b611dd4816120de565b50565b6060806060600080606080606060008a51955085604051908082528060200260200182016040528015611e14578160200160208202803883390190505b50935085604051908082528060200260200182016040528015611e41578160200160208202803883390190505b50925085604051908082528060200260200182016040528015611e6e578160200160208202803883390190505b509150600090505b85811015611f3257611ea78b82815181101515611e8f57fe5b906020019060200201518b838151811015156110f557fe5b9450848482815181101515611eb857fe5b60209081029091018101919091526000868152600d9091526040902054835160c860020a90910290849083908110611eec57fe5b600160c860020a031990921660209283029091018201526000868152600e90915260409020548251839083908110611f2057fe5b60209081029091010152600101611e76565b509199909850909650945050505050565b80611f4e338261215c565b1515611f5957600080fd5b600160a060020a0384161515611f6e57600080fd5b600160a060020a0383161515611f8357600080fd5b611f8d84836121bb565b611f97848361222c565b611fa18383612365565b8183600160a060020a031685600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a450505050565b633b9aca009091020190565b6000818381151561200157fe5b049392505050565b600082151561201a57506000610cec565b5081810281838281151561202a57fe5b0414610cec57fe5b8061203d338261215c565b151561204857600080fd5b611a9e8484846020604051908101604052806000815250611a42565b6000838152600d60209081526040808320805466ffffffffffffff191660c860020a8704179055600e9091529020819055610c6033846123ae565b816120aa338261215c565b15156120b557600080fd5b6120c0858585610c05565b6120cc858585856123fd565b15156120d757600080fd5b5050505050565b600160a060020a03811615156120f357600080fd5b600c54604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600c805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60008061216883610fa0565b905080600160a060020a031684600160a060020a031614806121a3575083600160a060020a031661219884610b09565b600160a060020a0316145b806121b357506121b38185611d86565b949350505050565b81600160a060020a03166121ce82610fa0565b600160a060020a0316146121e157600080fd5b600081815260026020526040902054600160a060020a031615612228576000818152600260205260409020805473ffffffffffffffffffffffffffffffffffffffff191690555b5050565b600080600061223b858561256a565b600084815260086020908152604080832054600160a060020a038916845260079092529091205490935061227690600163ffffffff61260016565b600160a060020a03861660009081526007602052604090208054919350908390811061229e57fe5b90600052602060002001549050806007600087600160a060020a0316600160a060020a03168152602001908152602001600020848154811015156122de57fe5b6000918252602080832090910192909255600160a060020a038716815260079091526040812080548490811061231057fe5b6000918252602080832090910192909255600160a060020a0387168152600790915260409020805490612347906000198301612712565b50600093845260086020526040808520859055908452909220555050565b60006123718383612612565b50600160a060020a039091166000908152600760209081526040808320805460018101825590845282842081018590559383526008909152902055565b6123b882826126a2565b600980546000838152600a60205260408120829055600182018355919091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af015550565b60008061241285600160a060020a03166126fd565b15156124215760019150612561565b6040517f150b7a020000000000000000000000000000000000000000000000000000000081523360048201818152600160a060020a03898116602485015260448401889052608060648501908152875160848601528751918a169463150b7a0294938c938b938b93909160a490910190602085019080838360005b838110156124b457818101518382015260200161249c565b50505050905090810190601f1680156124e15780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561250357600080fd5b505af1158015612517573d6000803e3d6000fd5b505050506040513d602081101561252d57600080fd5b5051600160e060020a031981167f150b7a020000000000000000000000000000000000000000000000000000000014925090505b50949350505050565b81600160a060020a031661257d82610fa0565b600160a060020a03161461259057600080fd5b600160a060020a0382166000908152600360205260409020546125ba90600163ffffffff61260016565b600160a060020a03909216600090815260036020908152604080832094909455918152600190915220805473ffffffffffffffffffffffffffffffffffffffff19169055565b60008282111561260c57fe5b50900390565b600081815260016020526040902054600160a060020a03161561263457600080fd5b6000818152600160208181526040808420805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038816908117909155845260039091529091205461268291612705565b600160a060020a0390921660009081526003602052604090209190915550565b600160a060020a03821615156126b757600080fd5b6126c18282612365565b6040518190600160a060020a038416906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000903b1190565b81810182811015610cec57fe5b815481835581811115610c6057600083815260209020610c60918101908301610bde91905b8082111561274b5760008155600101612737565b50905600436f6e7472616374206973207061757365640000000000000000000000000000496e73756666696369656e74204574682073656e742e00000000000000000000a165627a7a7230582015ed4b5445283d88f2eef74f16c97ab6910766541d9ff959fc5de1cb2fa9ace40029",
    "constructor_argument": "",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2018-09-05\r\n*/\r\n\r\npragma solidity ^0.4.24;\r\n \r\n// File: zeppelin-solidity/contracts/introspection/ERC165.sol\r\n \r\n/**\r\n* @title ERC165\r\n* @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\r\n*/\r\ninterface ERC165 {\r\n \r\n  /**\r\n   * @notice Query if a contract implements an interface\r\n   * @param _interfaceId The interface identifier, as specified in ERC-165\r\n   * @dev Interface identification is specified in ERC-165. This function\r\n   * uses less than 30,000 gas.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool);\r\n}\r\n \r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n \r\n/**\r\n* @title ERC721 Non-Fungible Token Standard basic interface\r\n* @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n*/\r\ncontract ERC721Basic is ERC165 {\r\n  event Transfer(\r\n    address indexed _from,\r\n    address indexed _to,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event Approval(\r\n    address indexed _owner,\r\n    address indexed _approved,\r\n    uint256 indexed _tokenId\r\n  );\r\n  event ApprovalForAll(\r\n    address indexed _owner,\r\n    address indexed _operator,\r\n    bool _approved\r\n  );\r\n \r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n \r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId)\r\n    public view returns (address _operator);\r\n \r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator)\r\n    public view returns (bool);\r\n \r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId)\r\n    public;\r\n \r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public;\r\n}\r\n \r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n \r\n/**\r\n* @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n* @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n*/\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256 _tokenId);\r\n \r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n \r\n \r\n/**\r\n* @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n* @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n*/\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() external view returns (string _name);\r\n  function symbol() external view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n \r\n \r\n/**\r\n* @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n* @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n*/\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n \r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n \r\n/**\r\n* @title ERC721 token receiver interface\r\n* @dev Interface for any contract that wants to support safeTransfers\r\n* from ERC721 asset contracts.\r\n*/\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;\r\n \r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   * after a `safetransfer`. This function MAY throw to revert and reject the\r\n   * transfer. Return of other than the magic value MUST result in the\r\n   * transaction being reverted.\r\n   * Note: the contract address is always the message sender.\r\n   * @param _operator The address which called `safeTransferFrom` function\r\n   * @param _from The address which previously owned the token\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(\r\n    address _operator,\r\n    address _from,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    returns(bytes4);\r\n}\r\n \r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n \r\n/**\r\n* @title SafeMath\r\n* @dev Math operations with safety checks that throw on error\r\n*/\r\nlibrary SafeMath {\r\n \r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\r\n    // benefit is lost if 'b' is also tested.\r\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n \r\n    c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n \r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    // uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return a / b;\r\n  }\r\n \r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n \r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\r\n    c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n \r\n// File: zeppelin-solidity/contracts/AddressUtils.sol\r\n \r\n/**\r\n* Utility library of inline functions on addresses\r\n*/\r\nlibrary AddressUtils {\r\n \r\n  /**\r\n   * Returns whether the target address is a contract\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   * as the code is not actually created until after the constructor finishes.\r\n   * @param addr address to check\r\n   * @return whether the target address is a contract\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    // XXX Currently there is no better way to check if there is a contract in an address\r\n    // than to check the size of the code at that address.\r\n    // See https://ethereum.stackexchange.com/a/14016/36603\r\n    // for more details about how this works.\r\n    // TODO Check this again before the Serenity release, because all addresses will be\r\n    // contracts then.\r\n    // solium-disable-next-line security/no-inline-assembly\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n \r\n}\r\n \r\n// File: zeppelin-solidity/contracts/introspection/SupportsInterfaceWithLookup.sol\r\n \r\n/**\r\n* @title SupportsInterfaceWithLookup\r\n* @author Matt Condon (@shrugs)\r\n* @dev Implements ERC165 using a lookup table.\r\n*/\r\ncontract SupportsInterfaceWithLookup is ERC165 {\r\n  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\r\n  /**\r\n   * 0x01ffc9a7 ===\r\n   *   bytes4(keccak256('supportsInterface(bytes4)'))\r\n   */\r\n \r\n  /**\r\n   * @dev a mapping of interface id to whether or not it's supported\r\n   */\r\n  mapping(bytes4 => bool) internal supportedInterfaces;\r\n \r\n  /**\r\n   * @dev A contract implementing SupportsInterfaceWithLookup\r\n   * implement ERC165 itself\r\n   */\r\n  constructor()\r\n    public\r\n  {\r\n    _registerInterface(InterfaceId_ERC165);\r\n  }\r\n \r\n  /**\r\n   * @dev implement supportsInterface(bytes4) using a lookup table\r\n   */\r\n  function supportsInterface(bytes4 _interfaceId)\r\n    external\r\n    view\r\n    returns (bool)\r\n  {\r\n    return supportedInterfaces[_interfaceId];\r\n  }\r\n \r\n  /**\r\n   * @dev private method for registering an interface\r\n   */\r\n  function _registerInterface(bytes4 _interfaceId)\r\n    internal\r\n  {\r\n    require(_interfaceId != 0xffffffff);\r\n    supportedInterfaces[_interfaceId] = true;\r\n  }\r\n}\r\n \r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\r\n \r\n/**\r\n* @title ERC721 Non-Fungible Token Standard basic implementation\r\n* @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n*/\r\ncontract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {\r\n \r\n  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;\r\n  /*\r\n   * 0x80ac58cd ===\r\n   *   bytes4(keccak256('balanceOf(address)')) ^\r\n   *   bytes4(keccak256('ownerOf(uint256)')) ^\r\n   *   bytes4(keccak256('approve(address,uint256)')) ^\r\n   *   bytes4(keccak256('getApproved(uint256)')) ^\r\n   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))\r\n   */\r\n \r\n  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;\r\n  /*\r\n   * 0x4f558e79 ===\r\n   *   bytes4(keccak256('exists(uint256)'))\r\n   */\r\n \r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n \r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;\r\n \r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n \r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n \r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n \r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n \r\n  /**\r\n   * @dev Guarantees msg.sender is owner of the given token\r\n   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n   */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n   * @param _tokenId uint256 ID of the token to validate\r\n   */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n \r\n  constructor()\r\n    public\r\n  {\r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721);\r\n    _registerInterface(InterfaceId_ERC721Exists);\r\n  }\r\n \r\n  /**\r\n   * @dev Gets the balance of the specified address\r\n   * @param _owner address to query the balance of\r\n   * @return uint256 representing the amount owned by the passed address\r\n   */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n \r\n  /**\r\n   * @dev Gets the owner of the specified token ID\r\n   * @param _tokenId uint256 ID of the token to query the owner of\r\n   * @return owner address currently marked as the owner of the given token ID\r\n   */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n \r\n  /**\r\n   * @dev Returns whether the specified token exists\r\n   * @param _tokenId uint256 ID of the token to query the existence of\r\n   * @return whether the token exists\r\n   */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n \r\n  /**\r\n   * @dev Approves another address to transfer the given token ID\r\n   * The zero address indicates there is no approved address.\r\n   * There can only be one approved address per token at a given time.\r\n   * Can only be called by the token owner or an approved operator.\r\n   * @param _to address to be approved for the given token ID\r\n   * @param _tokenId uint256 ID of the token to be approved\r\n   */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n \r\n    tokenApprovals[_tokenId] = _to;\r\n    emit Approval(owner, _to, _tokenId);\r\n  }\r\n \r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n \r\n  /**\r\n   * @dev Sets or unsets the approval of a given operator\r\n   * An operator is allowed to transfer all tokens of the sender on their behalf\r\n   * @param _to operator address to set the approval\r\n   * @param _approved representing the status of the approval to be set\r\n   */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    emit ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n \r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(\r\n    address _owner,\r\n    address _operator\r\n  )\r\n    public\r\n    view\r\n    returns (bool)\r\n  {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n \r\n  /**\r\n   * @dev Transfers the ownership of a given token ID to another address\r\n   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n \r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n \r\n    emit Transfer(_from, _to, _tokenId);\r\n  }\r\n \r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   *\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    // solium-disable-next-line arg-overflow\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n \r\n  /**\r\n   * @dev Safely transfers the ownership of a given token ID to another address\r\n   * If the target address is a contract, it must implement `onERC721Received`,\r\n   * which is called upon a safe transfer, and return the magic value\r\n   * `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`; otherwise,\r\n   * the transfer is reverted.\r\n   * Requires the msg sender to be the owner, approved, or operator\r\n   * @param _from current owner of the token\r\n   * @param _to address to receive the ownership of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes data to send along with a safe transfer check\r\n   */\r\n  function safeTransferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    public\r\n    canTransfer(_tokenId)\r\n  {\r\n    transferFrom(_from, _to, _tokenId);\r\n    // solium-disable-next-line arg-overflow\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n \r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(\r\n    address _spender,\r\n    uint256 _tokenId\r\n  )\r\n    internal\r\n    view\r\n    returns (bool)\r\n  {\r\n    address owner = ownerOf(_tokenId);\r\n    // Disable solium check because of\r\n    // https://github.com/duaraghav8/Solium/issues/175\r\n    // solium-disable-next-line operator-whitespace\r\n    return (\r\n      _spender == owner ||\r\n      getApproved(_tokenId) == _spender ||\r\n      isApprovedForAll(owner, _spender)\r\n    );\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to The address that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    emit Transfer(address(0), _to, _tokenId);\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    emit Transfer(_owner, address(0), _tokenId);\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to clear current approval of a given token ID\r\n   * Reverts if the given address is not indeed the owner of the token\r\n   * @param _owner owner of the token\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n    }\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to invoke `onERC721Received` on a target address\r\n   * The call is not executed if the target address is not a contract\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _to target address that will receive the tokens\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @param _data bytes optional data to send along with the call\r\n   * @return whether the call correctly returned the expected magic value\r\n   */\r\n  function checkAndCallSafeTransfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId,\r\n    bytes _data\r\n  )\r\n    internal\r\n    returns (bool)\r\n  {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(\r\n      msg.sender, _from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n \r\n// File: zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\r\n \r\n/**\r\n* @title Full ERC721 Token\r\n* This implementation includes all the required and some optional functionality of the ERC721 standard\r\n* Moreover, it includes approve all functionality using operator terminology\r\n* @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n*/\r\ncontract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {\r\n \r\n  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;\r\n  /**\r\n   * 0x780e9d63 ===\r\n   *   bytes4(keccak256('totalSupply()')) ^\r\n   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n   *   bytes4(keccak256('tokenByIndex(uint256)'))\r\n   */\r\n \r\n  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;\r\n  /**\r\n   * 0x5b5e139f ===\r\n   *   bytes4(keccak256('name()')) ^\r\n   *   bytes4(keccak256('symbol()')) ^\r\n   *   bytes4(keccak256('tokenURI(uint256)'))\r\n   */\r\n \r\n  // Token name\r\n  string internal name_;\r\n \r\n  // Token symbol\r\n  string internal symbol_;\r\n \r\n  // Mapping from owner to list of owned token IDs\r\n  mapping(address => uint256[]) internal ownedTokens;\r\n \r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n \r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n \r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n \r\n  // Optional mapping for token URIs\r\n mapping(uint256 => string) internal tokenURIs;\r\n \r\n  /**\r\n   * @dev Constructor function\r\n   */\r\n  constructor(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n \r\n    // register the supported interfaces to conform to ERC721 via ERC165\r\n    _registerInterface(InterfaceId_ERC721Enumerable);\r\n    _registerInterface(InterfaceId_ERC721Metadata);\r\n  }\r\n \r\n  /**\r\n   * @dev Gets the token name\r\n   * @return string representing the token name\r\n   */\r\n  function name() external view returns (string) {\r\n    return name_;\r\n  }\r\n \r\n  /**\r\n   * @dev Gets the token symbol\r\n   * @return string representing the token symbol\r\n   */\r\n  function symbol() external view returns (string) {\r\n    return symbol_;\r\n  }\r\n \r\n  /**\r\n   * @dev Returns an URI for a given token ID\r\n   * Throws if the token ID does not exist. May return an empty string.\r\n   * @param _tokenId uint256 ID of the token to query\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n \r\n  /**\r\n   * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n   * @param _owner address owning the tokens list to be accessed\r\n   * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n   * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n   */\r\n  function tokenOfOwnerByIndex(\r\n    address _owner,\r\n    uint256 _index\r\n  )\r\n    public\r\n    view\r\n    returns (uint256)\r\n  {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n \r\n  /**\r\n   * @dev Gets the total amount of tokens stored by the contract\r\n   * @return uint256 representing the total amount of tokens\r\n   */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n \r\n  /**\r\n   * @dev Gets the token ID at a given index of all the tokens in this contract\r\n   * Reverts if the index is greater or equal to the total number of tokens\r\n   * @param _index uint256 representing the index to be accessed of the tokens list\r\n   * @return uint256 token ID at the given index of the tokens list\r\n   */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to set the token URI for a given token\r\n   * Reverts if the token ID does not exist\r\n   * @param _tokenId uint256 ID of the token to set its URI\r\n   * @param _uri string URI to assign\r\n   */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to add a token ID to the list of a given address\r\n   * @param _to address representing the new owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n   */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to remove a token ID from the list of a given address\r\n   * @param _from address representing the previous owner of the given token ID\r\n   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n   */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n \r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n \r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n \r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to mint a new token\r\n   * Reverts if the given token ID already exists\r\n   * @param _to address the beneficiary that will own the minted token\r\n   * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n   */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n \r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n \r\n  /**\r\n   * @dev Internal function to burn a specific token\r\n   * Reverts if the token does not exist\r\n   * @param _owner owner of the token to burn\r\n   * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n   */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n \r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n \r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n \r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n \r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n \r\n}\r\n \r\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\r\n \r\n/**\r\n* @title Ownable\r\n* @dev The Ownable contract has an owner address, and provides basic authorization control\r\n* functions, this simplifies the implementation of \"user permissions\".\r\n*/\r\ncontract Ownable {\r\n  address public owner;\r\n \r\n \r\n  event OwnershipRenounced(address indexed previousOwner);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n \r\n \r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  constructor() public {\r\n    owner = msg.sender;\r\n  }\r\n \r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev Allows the current owner to relinquish control of the contract.\r\n   * @notice Renouncing to ownership will leave the contract without an owner.\r\n   * It will not be possible to call the functions with the `onlyOwner`\r\n   * modifier anymore.\r\n   */\r\n  function renounceOwnership() public onlyOwner {\r\n    emit OwnershipRenounced(owner);\r\n    owner = address(0);\r\n }\r\n \r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address _newOwner) public onlyOwner {\r\n    _transferOwnership(_newOwner);\r\n  }\r\n \r\n  /**\r\n   * @dev Transfers control of the contract to a newOwner.\r\n   * @param _newOwner The address to transfer ownership to.\r\n   */\r\n  function _transferOwnership(address _newOwner) internal {\r\n    require(_newOwner != address(0));\r\n    emit OwnershipTransferred(owner, _newOwner);\r\n    owner = _newOwner;\r\n  }\r\n}\r\n \r\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\r\n \r\n/**\r\n* @title Pausable\r\n* @dev Base contract which allows children to implement an emergency stop mechanism.\r\n*/\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n \r\n  bool public paused = false;\r\n \r\n \r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is not paused.\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused,\"Contract is paused\");\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev Modifier to make a function callable only when the contract is paused.\r\n   */\r\n  modifier whenPaused() {\r\n    require(paused,\"Contract is not paused\");\r\n    _;\r\n  }\r\n \r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused public {\r\n    paused = true;\r\n    emit Pause();\r\n  }\r\n \r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused public {\r\n    paused = false;\r\n    emit Unpause();\r\n  }\r\n}\r\n \r\n// File: contracts/HodlEarth.sol\r\n \r\n/***\r\n*\r\n* need to add pausable when minting need to check that it doesnt exist first\r\n* need to allow the minter to attribute up to X tokens\r\n*/\r\ncontract HodlEarthToken is ERC721Token, Ownable, Pausable {\r\n  string public constant name = \"HodlEarthToken\";\r\n  string public constant symbol = \"HEAR\";\r\n \r\n  constructor() ERC721Token(name, symbol) public {\r\n    owner = msg.sender;\r\n  }\r\n \r\n  mapping (uint256 => bytes7) public plotColours;\r\n  mapping (uint256 => bytes32) public plotDescriptors;\r\n \r\n  function calculatePlotPrice() public view returns(uint256 currentPlotPrice){\r\n \r\n    if(totalSupply() < 250000){\r\n        currentPlotPrice = 0.0004 * 1000000000000000000;\r\n    } else currentPlotPrice = 0.001 * 1000000000000000000;\r\n \r\n  }\r\n \r\n  function calculateTransactionFee(uint256 _noPlots,bool _updatePlot) public pure returns(uint256 fee){\r\n \r\n    uint256 plotPrice;\r\n    plotPrice = 0.001 * 1000000000000000000;\r\n    fee = plotPrice.div(10);\r\n    fee = fee.mul(_noPlots);\r\n \r\n    if(_updatePlot == false){\r\n       \r\n       uint256 minFee = 0.001 * 1000000000000000000;\r\n       if(fee < minFee) fee = minFee;\r\n    }\r\n \r\n  }\r\n \r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused{\r\n \r\n    super.transferFrom(_from,_to,_tokenId);\r\n \r\n  }\r\n \r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public whenNotPaused{\r\n \r\n    super.safeTransferFrom(_from,_to,_tokenId);\r\n \r\n  }\r\n \r\n  function safeTransferFrom(address _from,address _to,uint256 _tokenId,bytes _data) public whenNotPaused{\r\n \r\n    super.safeTransferFrom(_from,_to,_tokenId,_data);\r\n \r\n  }\r\n \r\n  function getPlot(uint256 _plotLat,uint256 _plotLng) public view returns(uint256 plotReference,bytes7 colour,bytes32 descriptor){\r\n \r\n    plotReference = _generatePlotReference(_plotLat,_plotLng);\r\n    colour = plotColours[plotReference];\r\n    descriptor = plotDescriptors[plotReference];\r\n \r\n  }\r\n \r\n  function getPlotByReference(uint256 _plotReference) public view returns(bytes7 colour,bytes32 descriptor){\r\n \r\n    colour = plotColours[_plotReference];\r\n    descriptor = plotDescriptors[_plotReference];\r\n \r\n  }\r\n \r\n \r\n  function getPlots(uint256[] _plotLats,uint256[] _plotLngs) public view returns(uint256[],bytes7[],bytes32[]){\r\n \r\n    uint arrayLength = _plotLats.length;\r\n    uint256 plotReference;\r\n    uint256[] memory plotIds = new uint[](arrayLength);\r\n    bytes7[] memory colours = new bytes7[](arrayLength);\r\n    bytes32[] memory descriptors = new bytes32[](arrayLength);\r\n    for (uint i=0; i<arrayLength; i++) {\r\n      plotReference = _generatePlotReference(_plotLats[i],_plotLngs[i]);\r\n      plotIds[i] = plotReference;\r\n      colours[i] =  plotColours[plotReference];\r\n      descriptors[i] = plotDescriptors[plotReference];\r\n \r\n    }\r\n \r\n    return(plotIds,colours,descriptors);\r\n  }\r\n \r\n \r\n  function getPlotsByReference(uint256[] _plotReferences) public view returns(uint256[],bytes7[],bytes32[]){\r\n \r\n    uint arrayLength = _plotReferences.length;\r\n    uint256[] memory plotIds = new uint[](arrayLength);\r\n    bytes7[] memory colours = new bytes7[](arrayLength);\r\n    bytes32[] memory descriptors = new bytes32[](arrayLength);\r\n    for (uint i=0; i<arrayLength; i++) {\r\n      plotIds[i] = _plotReferences[i];\r\n      colours[i] =  plotColours[_plotReferences[i]];\r\n      descriptors[i] = plotDescriptors[_plotReferences[i]];\r\n    }\r\n \r\n    return(plotIds,colours,descriptors);\r\n  }\r\n \r\n \r\n  function newPlot(uint256 _plotLat,uint256 _plotLng,bytes7 _colour,bytes32 _title) public payable whenNotPaused{\r\n \r\n    uint256 plotReference;\r\n    bool validLatLng;\r\n    uint256 plotPrice;\r\n    uint256 transactionFee;\r\n \r\n    //check the amount sent\r\n    plotPrice = calculatePlotPrice();\r\n    transactionFee = calculateTransactionFee(1,false);\r\n    if(msg.sender != owner){\r\n        require(\r\n            msg.value >= plotPrice + transactionFee,\r\n            \"Insufficient Eth sent.\"\r\n        );\r\n    }\r\n \r\n    validLatLng = validatePlotLatLng(_plotLat,_plotLng);\r\n    require(\r\n        validLatLng == true,\r\n        \"Lat long is invalid\"\r\n    );\r\n    plotReference = _generatePlotReference(_plotLat,_plotLng);\r\n    require(\r\n       plotColours[plotReference] == 0,\r\n      \"Plot already exists.\"\r\n    );\r\n    _addPlot(plotReference,_colour,_title);\r\n \r\n  }\r\n  function newPlots(uint256[] _plotLat,uint256[] _plotLng,bytes7[] _colours,bytes32[] _descriptors) public payable whenNotPaused{\r\n \r\n    uint256 noPlots = _plotLat.length;\r\n    bytes7 colour;\r\n    bytes32 descriptor;\r\n    uint256 plotReference;\r\n    bool validLatLng;\r\n    uint256 plotPrice;\r\n    uint256 transactionFee;\r\n \r\n    plotPrice = calculatePlotPrice();\r\n    transactionFee = calculateTransactionFee(noPlots,false);\r\n \r\n    if(msg.sender != owner){\r\n      require(\r\n        msg.value >= plotPrice.mul(noPlots) + transactionFee,\r\n        \"Insufficient Eth sent.\"\r\n      );\r\n    }\r\n \r\n    for (uint i=0; i<noPlots; i++) {\r\n        colour =  _colours[i];\r\n        descriptor = _descriptors[i];\r\n        validLatLng = validatePlotLatLng(_plotLat[i],_plotLng[i]);\r\n        require(\r\n           validLatLng == true,\r\n           \"Lat long is invalid\"\r\n        );\r\n        plotReference = _generatePlotReference(_plotLat[i],_plotLng[i]);\r\n        require(\r\n           plotColours[plotReference] == 0,\r\n          \"Plot already exists.\"\r\n        );\r\n        _addPlot(plotReference,colour,descriptor);\r\n    }\r\n \r\n  }\r\n \r\n  function _generatePlotReference(uint256 _plotLat,uint256 _plotLng) internal pure returns(uint256 plotReference){\r\n \r\n    plotReference = (_plotLat * 1000000000) + _plotLng;\r\n \r\n  }\r\n \r\n  function _addPlot(uint256 _plotReference,bytes7 _colour,bytes32 _descriptor) private{\r\n \r\n    //check that the plotreference does not already exist\r\n    plotColours[_plotReference] =  _colour;\r\n    plotDescriptors[_plotReference] =  _descriptor;\r\n    _mint(msg.sender, _plotReference);\r\n  }\r\n \r\n  function validatePlotLatLng(uint256 _lat,uint256 _lng) public pure returns(bool){\r\n    //confirm the lat and long conforms to the hodlearth dimensions\r\n    if(_lat%5 == 0 && _lng%8 == 0) return true;\r\n    return false;\r\n  }\r\n \r\n  function updatePlot(uint256 _plotLat,uint256 _plotLng,bytes7 _colour,bytes32 _descriptor) public payable whenNotPaused{\r\n \r\n    uint256 plotReference;\r\n    uint256 transactionFee;\r\n \r\n    plotReference = _generatePlotReference(_plotLat,_plotLng);\r\n    transactionFee = calculateTransactionFee(1,true);\r\n \r\n    require(\r\n      ownerOf(plotReference) == msg.sender,\r\n      \"Update can only be carried out by the plot owner.\"\r\n    );\r\n \r\n    if(msg.sender != owner){\r\n      require(\r\n      msg.value >= transactionFee,\r\n          \"Insufficient Eth sent.\"\r\n      );\r\n    }\r\n    require(\r\n      plotColours[plotReference] != 0,\r\n      \"Plot does not exist.\"\r\n    );\r\n \r\n \r\n    plotColours[plotReference] =  _colour;\r\n    plotDescriptors[plotReference] = _descriptor;\r\n  }\r\n \r\n  function updatePlots(uint256[] _plotLat,uint256[] _plotLng,bytes7[] _colours,bytes32[] _descriptors) public payable whenNotPaused{\r\n \r\n    uint256 noPlots = _plotLat.length;\r\n    bytes7 colour;\r\n    bytes32 descriptor;\r\n    uint256 plotReference;\r\n    uint256 transactionFee;\r\n \r\n    transactionFee = calculateTransactionFee(noPlots,true);\r\n \r\n    if(msg.sender != owner){\r\n      require(\r\n      msg.value >= transactionFee,\r\n          \"Insufficient Eth sent.\"\r\n     );\r\n    }\r\n \r\n    for (uint i=0; i<noPlots; i++) {\r\n        colour =  _colours[i];\r\n        descriptor = _descriptors[i];\r\n        plotReference = _generatePlotReference(_plotLat[i],_plotLng[i]);\r\n        require(\r\n            plotColours[plotReference] != 0,\r\n            \"Plot does not exist.\"\r\n        );\r\n        require(\r\n            ownerOf(plotReference) == msg.sender,\r\n            \"Update can only be carried out by the plot owner.\"\r\n        );\r\n \r\n \r\n        plotColours[plotReference] =  colour;\r\n        plotDescriptors[plotReference] = descriptor;\r\n    }\r\n  }\r\n \r\n  function withdraw() public onlyOwner returns(bool) {\r\n     owner.transfer(address(this).balance);\r\n     return true;\r\n  }\r\n \r\n}",
    "data_type": "ERC721",
    "id": "HodlEarthToken_0x8a8ec4cedf933dc983724c235fd4f4754ffbe6fc",
    "file": "./Contract_source_Code/HodlEarthToken_0x8a8ec4cedf933dc983724c235fd4f4754ffbe6fc.sol"
}