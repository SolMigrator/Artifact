{
    "name": "EthernautsMarket",
    "address": "0x3b74618d5c023de31bd90fcdf5875099de46a864",
    "Compiler Version": "v0.4.19+commit.c4cbbb05",
    "Optimization Enabled": "No with 200 runs",
    "Other Settings": "default evmVersion",
    "creation_bytecode": "",
    "abi": [
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_interfaceID",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ceoAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "implementsERC721",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "getBalance",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ctoAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCEO",
                    "type": "address"
                }
            ],
            "name": "setCEO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCOO",
                    "type": "address"
                }
            ],
            "name": "setCOO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ATTR_GOLDENGOOSE",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes2"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_startingPrice",
                    "type": "uint256"
                },
                {
                    "name": "_endingPrice",
                    "type": "uint256"
                },
                {
                    "name": "_duration",
                    "type": "uint256"
                }
            ],
            "name": "createSaleAuction",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_Fee1",
                    "type": "uint8"
                },
                {
                    "name": "_Fee2",
                    "type": "uint8"
                },
                {
                    "name": "_Fees",
                    "type": "uint8"
                },
                {
                    "name": "_1Step",
                    "type": "uint8"
                },
                {
                    "name": "_2Step",
                    "type": "uint8"
                },
                {
                    "name": "_Steps",
                    "type": "uint8"
                }
            ],
            "name": "setPercentages",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "bid",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_CStorageAddress",
                    "type": "address"
                }
            ],
            "name": "setEthernautsStorageContract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ethernautsStorage",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ATTR_SEEDED",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes2"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "newContractAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_creatorTokenID",
                    "type": "uint256"
                },
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_price",
                    "type": "uint256"
                },
                {
                    "name": "_assetID",
                    "type": "uint16"
                },
                {
                    "name": "_category",
                    "type": "uint8"
                },
                {
                    "name": "_attributes",
                    "type": "uint8"
                },
                {
                    "name": "_stats",
                    "type": "uint8[10]"
                }
            ],
            "name": "createNewAsset",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ATTR_TRADABLE",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes2"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "count",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_v2Address",
                    "type": "address"
                }
            ],
            "name": "setNewAddress",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_ownerCut",
                    "type": "uint256"
                }
            ],
            "name": "setOwnerCut",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "STATS_SIZE",
            "outputs": [
                {
                    "name": "",
                    "type": "uint8"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getAuction",
            "outputs": [
                {
                    "name": "seller",
                    "type": "address"
                },
                {
                    "name": "startingPrice",
                    "type": "uint256"
                },
                {
                    "name": "endingPrice",
                    "type": "uint256"
                },
                {
                    "name": "duration",
                    "type": "uint256"
                },
                {
                    "name": "startedAt",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ATTR_LEASABLE",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes2"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newOracle",
                    "type": "address"
                }
            ],
            "name": "setOracle",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ownerCut",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ATTR_PRODUCIBLE",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes2"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "cancelAuctionWhenPaused",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ATTR_CONSUMABLE",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes2"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "cancelAuction",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "oracleAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "SHIP_SLOTS",
            "outputs": [
                {
                    "name": "",
                    "type": "uint8"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cooAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "takeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ATTR_PERMANENT",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes2"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getCurrentPrice",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "isExploring",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                }
            ],
            "name": "withdrawBalances",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_contract",
                    "type": "address"
                },
                {
                    "name": "_seller",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_startingPrice",
                    "type": "uint256"
                },
                {
                    "name": "_endingPrice",
                    "type": "uint256"
                },
                {
                    "name": "_duration",
                    "type": "uint256"
                }
            ],
            "name": "createAuctionWhenPaused",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "nonFungibleContract",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "purchase",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ATTR_EXPLORABLE",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes2"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCTO",
                    "type": "address"
                }
            ],
            "name": "setCTO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_firstStepLimit",
                    "type": "uint256"
                },
                {
                    "name": "_secondStepLimit",
                    "type": "uint256"
                }
            ],
            "name": "setStepLimits",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "name": "_cut",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "oldPrice",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "newPrice",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "name": "prevOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "winner",
                    "type": "address"
                }
            ],
            "name": "Purchase",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "startingPrice",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "endingPrice",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "duration",
                    "type": "uint256"
                }
            ],
            "name": "AuctionCreated",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "totalPrice",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "winner",
                    "type": "address"
                }
            ],
            "name": "AuctionSuccessful",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "AuctionCancelled",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokens",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "approved",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokens",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "assetId",
                    "type": "uint16"
                },
                {
                    "indexed": false,
                    "name": "price",
                    "type": "uint256"
                }
            ],
            "name": "Build",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "newContract",
                    "type": "address"
                }
            ],
            "name": "ContractUpgrade",
            "type": "event"
        }
    ],
    "deployed_bytecode": "0x60606040526004361061027d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461028257806306fdde03146102dc578063095ea7b31461036a5780630a0f8168146103ac5780631051db341461040157806312065fe01461042e57806318160ddd146104575780631f5136601461048057806323b872dd146104d557806327d7874c146105365780632ba73c151461056f5780632d381f84146105a85780633d7d3f5a146106135780633e77dcfb146106515780633f4ba83a146106b3578063454a2ab3146106c85780634b3afdd2146106e057806356410637146107195780635c975abb1461076e5780635ea396241461079b5780636352211e146108065780636af04a57146108695780636ca40093146108be5780636d18dc631461094a57806370a08231146109b55780637158798814610a02578063757de57314610a3b578063764b08c314610a5e57806378bd793514610a8d57806378f1361414610b0c5780637adbf97314610b7757806383b5ff8b14610bb05780638456cb5914610bd95780638645a3da14610bee578063878eb36814610c5957806393e1595d14610c7c57806395d89b4114610ce757806396b5a75514610d75578063a89ae4ba14610d98578063a9059cbb14610ded578063aff4cbea14610e2f578063b047fb5014610e5e578063b2e6ceeb14610eb3578063c459b00314610ed6578063c55d0f5614610f41578063c86dca5a14610f78578063ca64a02d14610fb3578063d9f0cf0414610fec578063dd1b7a0f14611068578063efef39a1146110bd578063f2d5866d146110d5578063fe1439b414611140578063ff63074814611179575b600080fd5b341561028d57600080fd5b6102c260048080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190919050506111a5565b604051808215151515815260200191505060405180910390f35b34156102e757600080fd5b6102ef6114ed565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561032f578082015181840152602081019050610314565b50505050905090810190601f16801561035c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561037557600080fd5b6103aa600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611526565b005b34156103b757600080fd5b6103bf6115ca565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561040c57600080fd5b6104146115f0565b604051808215151515815260200191505060405180910390f35b341561043957600080fd5b6104416115f9565b6040518082815260200191505060405180910390f35b341561046257600080fd5b61046a611724565b6040518082815260200191505060405180910390f35b341561048b57600080fd5b6104936117d4565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104e057600080fd5b610534600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506117fa565b005b341561054157600080fd5b61056d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611826565b005b341561057a57600080fd5b6105a6600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611902565b005b34156105b357600080fd5b6105bb611a36565b60405180827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561061e57600080fd5b61064f6004808035906020019091908035906020019091908035906020019091908035906020019091905050611a67565b005b341561065c57600080fd5b6106b1600480803560ff1690602001909190803560ff1690602001909190803560ff1690602001909190803560ff1690602001909190803560ff1690602001909190803560ff16906020019091905050611fbf565b005b34156106be57600080fd5b6106c6612175565b005b6106de60048080359060200190919050506123a3565b005b34156106eb57600080fd5b610717600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612487565b005b341561072457600080fd5b61072c61268a565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561077957600080fd5b6107816126b0565b604051808215151515815260200191505060405180910390f35b34156107a657600080fd5b6107ae6126c3565b60405180827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561081157600080fd5b61082760048080359060200190919050506126f3565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561087457600080fd5b61087c6127ec565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156108c957600080fd5b610934600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190803561ffff1690602001909190803560ff1690602001909190803560ff169060200190919080610140019091905050612812565b6040518082815260200191505060405180910390f35b341561095557600080fd5b61095d612b53565b60405180827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34156109c057600080fd5b6109ec600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612b84565b6040518082815260200191505060405180910390f35b3415610a0d57600080fd5b610a39600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612c6d565b005b3415610a4657600080fd5b610a5c6004808035906020019091905050612d8b565b005b3415610a6957600080fd5b610a71612ea1565b604051808260ff1660ff16815260200191505060405180910390f35b3415610a9857600080fd5b610aae6004808035906020019091905050612ea6565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b3415610b1757600080fd5b610b1f612fc9565b60405180827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3415610b8257600080fd5b610bae600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612ffa565b005b3415610bbb57600080fd5b610bc36130d6565b6040518082815260200191505060405180910390f35b3415610be457600080fd5b610bec6130dc565b005b3415610bf957600080fd5b610c01613221565b60405180827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3415610c6457600080fd5b610c7a6004808035906020019091905050613252565b005b3415610c8757600080fd5b610c8f6133d6565b60405180827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3415610cf257600080fd5b610cfa613407565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d3a578082015181840152602081019050610d1f565b50505050905090810190601f168015610d675780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610d8057600080fd5b610d966004808035906020019091905050613440565b005b3415610da357600080fd5b610dab6134dc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610df857600080fd5b610e2d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050613502565b005b3415610e3a57600080fd5b610e42613717565b604051808260ff1660ff16815260200191505060405180910390f35b3415610e6957600080fd5b610e7161371c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610ebe57600080fd5b610ed46004808035906020019091905050613742565b005b3415610ee157600080fd5b610ee9613845565b60405180827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b3415610f4c57600080fd5b610f626004808035906020019091905050613876565b6040518082815260200191505060405180910390f35b3415610f8357600080fd5b610f9960048080359060200190919050506138b3565b604051808215151515815260200191505060405180910390f35b3415610fbe57600080fd5b610fea600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506139e9565b005b3415610ff757600080fd5b611066600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091908035906020019091908035906020019091908035906020019091905050613b4f565b005b341561107357600080fd5b61107b613e95565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b6110d36004808035906020019091905050613ebb565b005b34156110e057600080fd5b6110e8614642565b60405180827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b341561114b57600080fd5b611177600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050614673565b005b341561118457600080fd5b6111a360048080359060200190919080359060200190919050506147a7565b005b600060405180807f737570706f727473496e74657266616365286279746573342900000000000000815250601901905060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806114e6575060405180807f746f6b656e4d657461646174612875696e743235362c737472696e6729000000815250601d019050604051809103902060405180807f746f6b656e734f664f776e6572286164647265737329000000000000000000008152506016019050604051809103902060405180807f74616b654f776e6572736869702875696e7432353629000000000000000000008152506016019050604051809103902060405180807f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81526020017f74323536290000000000000000000000000000000000000000000000000000008152506025019050604051809103902060405180807f7472616e7366657228616464726573732c75696e7432353629000000000000008152506019019050604051809103902060405180807f617070726f766528616464726573732c75696e743235362900000000000000008152506018019050604051809103902060405180807f6f776e65724f662875696e7432353629000000000000000000000000000000008152506010019050604051809103902060405180807f62616c616e63654f6628616464726573732900000000000000000000000000008152506012019050604051809103902060405180807f746f74616c537570706c79282900000000000000000000000000000000000000815250600d019050604051809103902060405180807f73796d626f6c28290000000000000000000000000000000000000000000000008152506008019050604051809103902060405180807f6e616d652829000000000000000000000000000000000000000000000000000081525060060190506040518091039020181818181818181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b6040805190810160405280600a81526020017f45746865726e617574730000000000000000000000000000000000000000000081525081565b600460149054906101000a900460ff1615151561154257600080fd5b61154c33826148c5565b151561155757600080fd5b61156181836149b1565b8173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006001905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806116a45750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806116fc5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561170757600080fd5b3073ffffffffffffffffffffffffffffffffffffffff1631905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166318160ddd6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15156117b457600080fd5b6102c65a03f115156117c557600080fd5b50505060405180519050905090565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900460ff1615151561181657600080fd5b611821838383614a8d565b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561188257600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156118be57600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806119ab5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156119b657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156119f257600080fd5b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600e9054906101000a90047e010000000000000000000000000000000000000000000000000000000000000281565b611a6f6154de565b600460149054906101000a900460ff16151515611a8b57600080fd5b836fffffffffffffffffffffffffffffffff1684141515611aab57600080fd5b826fffffffffffffffffffffffffffffffff1683141515611acb57600080fd5b8167ffffffffffffffff1682141515611ae357600080fd5b611aed33866148c5565b1515611af857600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e23602e866000600c9054906101000a90047e01000000000000000000000000000000000000000000000000000000000000026000604051602001526040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200192505050602060405180830381600087803b1515611c0857600080fd5b6102c65a03f11515611c1957600080fd5b505050604051805190501515611c2e57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639e23602e866000600e9054906101000a90047e01000000000000000000000000000000000000000000000000000000000000026000604051602001526040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200192505050602060405180830381600087803b1515611d3e57600080fd5b6102c65a03f11515611d4f57600080fd5b50505060405180519050151515611d6557600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef816fd98660006002811115611db157fe5b6000604051602001526040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018260ff1660ff16815260200192505050602060405180830381600087803b1515611e1857600080fd5b6102c65a03f11515611e2957600080fd5b505050604051805190501515611e3e57600080fd5b611e47856138b3565b151515611e5357600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663febe490986306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1515611f1757600080fd5b6102c65a03f11515611f2857600080fd5b505050611f36333087614a8d565b60a0604051908101604052803373ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff168152602001846fffffffffffffffffffffffffffffffff1681526020018367ffffffffffffffff1681526020014267ffffffffffffffff168152509050611fb88582614c04565b5050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806120685750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806120c05750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156120cb57600080fd5b85600a60006101000a81548160ff021916908360ff16021790555084600a60016101000a81548160ff021916908360ff16021790555083600a60026101000a81548160ff021916908360ff16021790555082600a60046101000a81548160ff021916908360ff16021790555081600a60056101000a81548160ff021916908360ff16021790555080600a60066101000a81548160ff021916908360ff160217905550505050505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121d157600080fd5b600460149054906101000a900460ff1615156121ec57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561224a57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156122a757600080fd5b60011515600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632da22fc0306000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b151561237057600080fd5b6102c65a03f1151561238157600080fd5b50505060405180519050151514151561239957600080fd5b6123a1614de9565b565b6000600460149054906101000a900460ff161515156123c157600080fd5b6123cb8234614e7d565b90506123d7338361501c565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7d9757783836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b151561246f57600080fd5b6102c65a03f1151561248057600080fd5b5050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806125325750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061258a5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561259557600080fd5b600460149054906101000a900460ff1615156125b057600080fd5b8190508073ffffffffffffffffffffffffffffffffffffffff1663ae61fcda6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b151561261f57600080fd5b6102c65a03f1151561263057600080fd5b50505060405180519050151561264557600080fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900460ff1681565b6000809054906101000a90047e010000000000000000000000000000000000000000000000000000000000000281565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561278e57600080fd5b6102c65a03f1151561279f57600080fd5b505050604051805190509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156127e757600080fd5b919050565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806128be5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806129165750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561292157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff161415151561295d57600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631e8cdd0a8a8a8a8a8a600060028111156129ad57fe5b8b8b6000806000604051602001526040518b63ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808b81526020018a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018981526020018861ffff1661ffff1681526020018760ff1660ff1681526020018660ff1660ff1681526020018560ff1660ff16815260200184600a6020028082843782019150508381526020018267ffffffffffffffff1681526020019a5050505050505050505050602060405180830381600087803b1515612aa457600080fd5b6102c65a03f11515612ab557600080fd5b5050506040518051905090507fbeb1fffdbea52fcb668386f7d55545fac4cb704f66674ba929c648e708f7c0208882888a604051808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018481526020018361ffff1661ffff16815260200182815260200194505050505060405180910390a180915050979650505050505050565b6000600c9054906101000a90047e010000000000000000000000000000000000000000000000000000000000000281565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231836000604051602001526040518263ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001915050602060405180830381600087803b1515612c4b57600080fd5b6102c65a03f11515612c5c57600080fd5b505050604051805190509050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612cc957600080fd5b600460149054906101000a900460ff161515612ce457600080fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa44619930581604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480612e345750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80612e8c5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515612e9757600080fd5b8060088190555050565b600a81565b600080600080600080600960008881526020019081526020016000209050612ecd816150f8565b1515612ed857600080fd5b8060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160009054906101000a90046fffffffffffffffffffffffffffffffff168260010160109054906101000a90046fffffffffffffffffffffffffffffffff168360020160009054906101000a900467ffffffffffffffff168460020160089054906101000a900467ffffffffffffffff16836fffffffffffffffffffffffffffffffff169350826fffffffffffffffffffffffffffffffff1692508167ffffffffffffffff1691508067ffffffffffffffff169050955095509550955095505091939590929450565b600060069054906101000a90047e010000000000000000000000000000000000000000000000000000000000000281565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561305657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561309257600080fd5b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60085481565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806131855750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806131dd5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156131e857600080fd5b600460149054906101000a900460ff1615151561320457600080fd5b6001600460146101000a81548160ff021916908315150217905550565b600060029054906101000a90047e010000000000000000000000000000000000000000000000000000000000000281565b6000600460149054906101000a900460ff16151561326f57600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806133185750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806133705750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561337b57600080fd5b600960008381526020019081526020016000209050613399816150f8565b15156133a457600080fd5b6133d2828260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16615126565b5050565b6000600a9054906101000a90047e010000000000000000000000000000000000000000000000000000000000000281565b6040805190810160405280600481526020017f45544e540000000000000000000000000000000000000000000000000000000081525081565b600080600960008481526020019081526020016000209150613461826150f8565b151561346c57600080fd5b8160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156134cd57600080fd5b6134d78382615126565b505050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600460149054906101000a900460ff1615151561351e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561355a57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561359557600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156135f257600080fd5b6135fc33826148c5565b151561360757600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc83384846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15156136ff57600080fd5b6102c65a03f1151561371057600080fd5b5050505050565b600581565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e836000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156137dd57600080fd5b6102c65a03f115156137ee57600080fd5b505050604051805190509050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561383657600080fd5b613841813384614a8d565b5050565b600060089054906101000a90047e010000000000000000000000000000000000000000000000000000000000000281565b600080600960008481526020019081526020016000209050613897816150f8565b15156138a257600080fd5b6138ab81615174565b915050919050565b6000806000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cf35bdd085600060405161010001526040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018082815260200191505061010060405180830381600087803b151561395357600080fd5b6102c65a03f1151561396457600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519060200180519050909192939495965090919293949550909192939450909192935090919250508093508192505050428211806139e057504367ffffffffffffffff168167ffffffffffffffff16115b92505050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613a925750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80613aea5750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515613af557600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f193505050501515613b4c57600080fd5b50565b613b576154de565b600460149054906101000a900460ff161515613b7257600080fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480613c1b5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80613c735750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515613c7e57600080fd5b836fffffffffffffffffffffffffffffffff1684141515613c9e57600080fd5b826fffffffffffffffffffffffffffffffff1683141515613cbe57600080fd5b8167ffffffffffffffff1682141515613cd657600080fd5b613ce087866148c5565b1515613ceb57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515613d2757600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663febe490986306040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1515613deb57600080fd5b6102c65a03f11515613dfc57600080fd5b505050613e0a873087614a8d565b60a0604051908101604052808773ffffffffffffffffffffffffffffffffffffffff168152602001856fffffffffffffffffffffffffffffffff168152602001846fffffffffffffffffffffffffffffffff1681526020018367ffffffffffffffff1681526020014267ffffffffffffffff168152509050613e8c8582614c04565b50505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600080600080600460149054906101000a900460ff16151515613ee057600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cdde76f7886000600e9054906101000a90047e01000000000000000000000000000000000000000000000000000000000000026000604051602001526040518363ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180838152602001827dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200192505050602060405180830381600087803b1515613ff057600080fd5b6102c65a03f1151561400157600080fd5b50505060405180519050151561401657600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e886000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b15156140af57600080fd5b6102c65a03f115156140c057600080fd5b505050604051805190509550339450600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b9186d7d886000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561416857600080fd5b6102c65a03f1151561417957600080fd5b5050506040518051905093508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156141c057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515156141fc57600080fd5b83341015151561420b57600080fd5b61423161422a85600a60009054906101000a900460ff1660ff16615267565b60646152a2565b925061423d34856152bd565b9150839050600b5484101561428a5761428361426b85600a60049054906101000a900460ff1660ff16615267565b600a60039054906101000a900460ff1660ff166152a2565b905061435d565b600c548410156142fa576142ba6142b385600a60019054906101000a900460ff1660ff16615267565b60646152a2565b92506142f36142db85600a60059054906101000a900460ff1660ff16615267565b600a60039054906101000a900460ff1660ff166152a2565b905061435c565b61432061431985600a60029054906101000a900460ff1660ff16615267565b60646152a2565b925061435961434185600a60069054906101000a900460ff1660ff16615267565b600a60039054906101000a900460ff1660ff166152a2565b90505b5b3073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415156143d3578573ffffffffffffffffffffffffffffffffffffffff166108fc849081150290604051600060405180830381858888f1935050505015156143d257600080fd5b5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc887878a6040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b15156144cb57600080fd5b6102c65a03f115156144dc57600080fd5b505050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f7d9757788836040518363ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018083815260200182815260200192505050600060405180830381600087803b151561457757600080fd5b6102c65a03f1151561458857600080fd5b5050508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16887fff4fa69114c0677f6a88bfc157c0874ccb1d721fa92a870e1d262dc197face508785604051808381526020018281526020019250505060405180910390a43373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050151561463957600080fd5b50505050505050565b600060049054906101000a90047e010000000000000000000000000000000000000000000000000000000000000281565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061471c5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561472757600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561476357600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806148505750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806148a85750600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156148b357600080fd5b81600b8190555080600c819055505050565b60008273ffffffffffffffffffffffffffffffffffffffff16600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636352211e846000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561497757600080fd5b6102c65a03f1151561498857600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663febe490983836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b1515614a7557600080fd5b6102c65a03f11515614a8657600080fd5b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515614ac957600080fd5b614ad383826148c5565b1515614ade57600080fd5b614ae882826152d6565b1515614af357600080fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663beabacc88484846040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050600060405180830381600087803b1515614beb57600080fd5b6102c65a03f11515614bfc57600080fd5b505050505050565b603c816060015167ffffffffffffffff1610151515614c2257600080fd5b806009600084815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060408201518160010160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060608201518160020160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160020160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050507fa9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba78282602001516fffffffffffffffffffffffffffffffff1683604001516fffffffffffffffffffffffffffffffff16846060015167ffffffffffffffff166040518085815260200184815260200183815260200182815260200194505050505060405180910390a15050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515614e4557600080fd5b600460149054906101000a900460ff161515614e6057600080fd5b6000600460146101000a81548160ff021916908315150217905550565b6000806000806000806000600960008a81526020019081526020016000209550614ea6866150f8565b1515614eb157600080fd5b614eba86615174565b9450848810151515614ecb57600080fd5b8560000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169350614efb896153c2565b6000851115614f5557614f0d8561547e565b925082850391508373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515614f5457600080fd5b5b84880390503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515614f9a57600080fd5b7f4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd2898633604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390a184965050505050505092915050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15156150e057600080fd5b6102c65a03f115156150f157600080fd5b5050505050565b6000808260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16119050919050565b61512f826153c2565b615139818361501c565b7f2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df826040518082815260200191505060405180910390a15050565b600080600090508260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff164211156151cd578260020160089054906101000a900467ffffffffffffffff1667ffffffffffffffff16420390505b61525f8360010160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168460010160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168560020160009054906101000a900467ffffffffffffffff1667ffffffffffffffff168461549e565b915050919050565b600080600084141561527c576000915061529b565b828402905082848281151561528d57fe5b0414151561529757fe5b8091505b5092915050565b60008082848115156152b057fe5b0490508091505092915050565b60008282111515156152cb57fe5b818303905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff16600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16632a6dd48f846000604051602001526040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050602060405180830381600087803b151561538857600080fd5b6102c65a03f1151561539957600080fd5b5050506040518051905073ffffffffffffffffffffffffffffffffffffffff1614905092915050565b60096000828152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a8154906fffffffffffffffffffffffffffffffff02191690556001820160106101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160006101000a81549067ffffffffffffffff02191690556002820160086101000a81549067ffffffffffffffff0219169055505050565b600061549761548f83600854615267565b6127106152a2565b9050919050565b60008060008085851015156154b5578693506154d3565b8787039250858584028115156154c757fe5b05915081880190508093505b505050949350505050565b60a060405190810160405280600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff168152602001600067ffffffffffffffff16815250905600a165627a7a72305820193e14df4765aa2c31a9f85cdbbaec3d1b9de9743e7cbd28626f6c92823945770029",
    "constructor_argument": "0000000000000000000000000000000000000000000000000000000000000258",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2018-04-07\r\n*/\r\n\r\npragma solidity ^0.4.19;\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Ethernauts\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    function takeOwnership(uint256 _tokenId) public;\r\n    function implementsERC721() public pure returns (bool);\r\n\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Extend this library for child contracts\r\nlibrary SafeMath {\r\n\r\n    /**\r\n    * @dev Multiplies two numbers, throws on overflow.\r\n    */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Integer division of two numbers, truncating the quotient.\r\n    */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n    */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n    * @dev Adds two numbers, throws on overflow.\r\n    */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n\r\n    /**\r\n    * @dev Compara two numbers, and return the bigger one.\r\n    */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        if (a > b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @dev Compara two numbers, and return the bigger one.\r\n    */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        if (a < b) {\r\n            return a;\r\n        } else {\r\n            return b;\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n/// @title Auction Core\r\n/// @dev Contains models, variables, and internal methods for the auction.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract ClockAuctionBase {\r\n\r\n    // Represents an auction on an NFT\r\n    struct Auction {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) at beginning of auction\r\n        uint128 startingPrice;\r\n        // Price (in wei) at end of auction\r\n        uint128 endingPrice;\r\n        // Duration (in seconds) of auction\r\n        uint64 duration;\r\n        // Time when auction started\r\n        // NOTE: 0 if this auction has been concluded\r\n        uint64 startedAt;\r\n    }\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    // Map from token ID to their corresponding auction.\r\n    mapping (uint256 => Auction) tokenIdToAuction;\r\n\r\n    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);\r\n    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);\r\n    event AuctionCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an auction to the list of open auctions. Also fires the\r\n    ///  AuctionCreated event.\r\n    /// @param _tokenId The ID of the token to be put on auction.\r\n    /// @param _auction Auction to add.\r\n    function _addAuction(uint256 _tokenId, Auction _auction) internal {\r\n        // Require that all auctions have a duration of\r\n        // at least one minute. (Keeps our math from getting hairy!)\r\n        require(_auction.duration >= 1 minutes);\r\n\r\n        tokenIdToAuction[_tokenId] = _auction;\r\n\r\n        AuctionCreated(\r\n            uint256(_tokenId),\r\n            uint256(_auction.startingPrice),\r\n            uint256(_auction.endingPrice),\r\n            uint256(_auction.duration)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels an auction unconditionally.\r\n    function _cancelAuction(uint256 _tokenId, address _seller) internal {\r\n        _removeAuction(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        AuctionCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n    internal\r\n    returns (uint256)\r\n    {\r\n        // Get a reference to the auction struct\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n\r\n        // Explicitly check that this auction is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return an auction object that is all zeros.)\r\n        require(_isOnAuction(auction));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = _currentPrice(auction);\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the auction struct\r\n        // gets deleted.\r\n        address seller = auction.seller;\r\n\r\n        // The bid is good! Remove the auction before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeAuction(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the auctioneer's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 auctioneerCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - auctioneerCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. If the excess\r\n        // is anything worth worrying about, transfer it back to bidder.\r\n        // NOTE: We checked above that the bid amount is greater than or\r\n        // equal to the price so this cannot underflow.\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        // Return the funds. Similar to the previous transfer, this is\r\n        // not susceptible to a re-entry attack because the auction is\r\n        // removed before any transfers occur.\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        // Tell the world!\r\n        AuctionSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes an auction from the list of open auctions.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function _removeAuction(uint256 _tokenId) internal {\r\n        delete tokenIdToAuction[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on auction.\r\n    /// @param _auction - Auction to check.\r\n    function _isOnAuction(Auction storage _auction) internal view returns (bool) {\r\n        return (_auction.startedAt > 0);\r\n    }\r\n\r\n    /// @dev Returns current price of an NFT on auction. Broken into two\r\n    ///  functions (this one, that computes the duration from the auction\r\n    ///  structure, and the other that does the price computation) so we\r\n    ///  can easily test that the price computation works correctly.\r\n    function _currentPrice(Auction storage _auction)\r\n    internal\r\n    view\r\n    returns (uint256)\r\n    {\r\n        uint256 secondsPassed = 0;\r\n\r\n        // A bit of insurance against negative values (or wraparound).\r\n        // Probably not necessary (since Ethereum guarnatees that the\r\n        // now variable doesn't ever go backwards).\r\n        if (now > _auction.startedAt) {\r\n            secondsPassed = now - _auction.startedAt;\r\n        }\r\n\r\n        return _computeCurrentPrice(\r\n            _auction.startingPrice,\r\n            _auction.endingPrice,\r\n            _auction.duration,\r\n            secondsPassed\r\n        );\r\n    }\r\n\r\n    /// @dev Computes the current price of an auction. Factored out\r\n    ///  from _currentPrice so we can run extensive unit tests.\r\n    ///  When testing, make this function public and turn on\r\n    ///  `Current price computation` test suite.\r\n    function _computeCurrentPrice(\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration,\r\n        uint256 _secondsPassed\r\n    )\r\n    internal\r\n    pure\r\n    returns (uint256)\r\n    {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our public functions carefully cap the maximum values for\r\n        //  time (at 64-bits) and currency (at 128-bits). _duration is\r\n        //  also known to be non-zero (see the require() statement in\r\n        //  _addAuction())\r\n        if (_secondsPassed >= _duration) {\r\n            // We've reached the end of the dynamic pricing portion\r\n            // of the auction, just return the end price.\r\n            return _endingPrice;\r\n        } else {\r\n            // Starting price can be higher than ending price (and often is!), so\r\n            // this delta can be negative.\r\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\r\n\r\n            // This multiplication can't overflow, _secondsPassed will easily fit within\r\n            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product\r\n            // will always fit within 256-bits.\r\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\r\n\r\n            // currentPriceChange can be negative, but if so, will have a magnitude\r\n            // less that _startingPrice. Thus, this result will always end up positive.\r\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\r\n\r\n            return uint256(currentPrice);\r\n        }\r\n    }\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the EhternautsMarket constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return SafeMath.div(SafeMath.mul(_price, ownerCut), 10000);\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n/// @dev Base contract for all Ethernauts contracts holding global constants and functions.\r\ncontract EthernautsBase {\r\n\r\n    /*** CONSTANTS USED ACROSS CONTRACTS ***/\r\n\r\n    /// @dev Used by all contracts that interfaces with Ethernauts\r\n    ///      The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('transfer(address,uint256)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('takeOwnership(uint256)')) ^\r\n    bytes4(keccak256('tokensOfOwner(address)')) ^\r\n    bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n    /// @dev due solidity limitation we cannot return dynamic array from methods\r\n    /// so it creates incompability between functions across different contracts\r\n    uint8 public constant STATS_SIZE = 10;\r\n    uint8 public constant SHIP_SLOTS = 5;\r\n\r\n    // Possible state of any asset\r\n    enum AssetState { Available, UpForLease, Used }\r\n\r\n    // Possible state of any asset\r\n    // NotValid is to avoid 0 in places where category must be bigger than zero\r\n    enum AssetCategory { NotValid, Sector, Manufacturer, Ship, Object, Factory, CrewMember }\r\n\r\n    /// @dev Sector stats\r\n    enum ShipStats {Level, Attack, Defense, Speed, Range, Luck}\r\n    /// @notice Possible attributes for each asset\r\n    /// 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\r\n    /// 00000010 - Producible - Product of a factory and/or factory contract.\r\n    /// 00000100 - Explorable- Product of exploration.\r\n    /// 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\r\n    /// 00010000 - Permanent - Cannot be removed, always owned by a user.\r\n    /// 00100000 - Consumable - Destroyed after N exploration expeditions.\r\n    /// 01000000 - Tradable - Buyable and sellable on the market.\r\n    /// 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\r\n    bytes2 public ATTR_SEEDED     = bytes2(2**0);\r\n    bytes2 public ATTR_PRODUCIBLE = bytes2(2**1);\r\n    bytes2 public ATTR_EXPLORABLE = bytes2(2**2);\r\n    bytes2 public ATTR_LEASABLE   = bytes2(2**3);\r\n    bytes2 public ATTR_PERMANENT  = bytes2(2**4);\r\n    bytes2 public ATTR_CONSUMABLE = bytes2(2**5);\r\n    bytes2 public ATTR_TRADABLE   = bytes2(2**6);\r\n    bytes2 public ATTR_GOLDENGOOSE = bytes2(2**7);\r\n}\r\n\r\n/// @notice This contract manages the various addresses and constraints for operations\r\n//          that can be executed only by specific roles. Namely CEO and CTO. it also includes pausable pattern.\r\ncontract EthernautsAccessControl is EthernautsBase {\r\n\r\n    // This facet controls access control for Ethernauts.\r\n    // All roles have same responsibilities and rights, but there is slight differences between them:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and only role that can unpause the smart contract.\r\n    //       It is initially set to the address that created the smart contract.\r\n    //\r\n    //     - The CTO: The CTO can change contract address, oracle address and plan for upgrades.\r\n    //\r\n    //     - The COO: The COO can change contract address and add create assets.\r\n    //\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    /// @param newContract address pointing to new contract\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public ctoAddress;\r\n    address public cooAddress;\r\n    address public oracleAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CTO-only functionality\r\n    modifier onlyCTO() {\r\n        require(msg.sender == ctoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CTO-only functionality\r\n    modifier onlyOracle() {\r\n        require(msg.sender == oracleAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == ctoAddress ||\r\n            msg.sender == cooAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CTO. Only available to the current CTO or CEO.\r\n    /// @param _newCTO The address of the new CTO\r\n    function setCTO(address _newCTO) external {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == ctoAddress\r\n        );\r\n        require(_newCTO != address(0));\r\n\r\n        ctoAddress = _newCTO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current COO or CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external {\r\n        require(\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cooAddress\r\n        );\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as oracle.\r\n    /// @param _newOracle The address of oracle\r\n    function setOracle(address _newOracle) external {\r\n        require(msg.sender == ctoAddress);\r\n        require(_newOracle != address(0));\r\n\r\n        oracleAddress = _newOracle;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CTO account is compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// @title Storage contract for Ethernauts Data. Common structs and constants.\r\n/// @notice This is our main data storage, constants and data types, plus\r\n//          internal functions for managing the assets. It is isolated and only interface with\r\n//          a list of granted contracts defined by CTO\r\n/// @author Ethernauts - Fernando Pauer\r\ncontract EthernautsStorage is EthernautsAccessControl {\r\n\r\n    function EthernautsStorage() public {\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // the creator of the contract is the initial CTO as well\r\n        ctoAddress = msg.sender;\r\n\r\n        // the creator of the contract is the initial CTO as well\r\n        cooAddress = msg.sender;\r\n\r\n        // the creator of the contract is the initial Oracle as well\r\n        oracleAddress = msg.sender;\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here. Hopefully, we can prevent user accidents.\r\n    function() external payable {\r\n        require(msg.sender == address(this));\r\n    }\r\n\r\n    /*** Mapping for Contracts with granted permission ***/\r\n    mapping (address => bool) public contractsGrantedAccess;\r\n\r\n    /// @dev grant access for a contract to interact with this contract.\r\n    /// @param _v2Address The contract address to grant access\r\n    function grantAccess(address _v2Address) public onlyCTO {\r\n        // See README.md for updgrade plan\r\n        contractsGrantedAccess[_v2Address] = true;\r\n    }\r\n\r\n    /// @dev remove access from a contract to interact with this contract.\r\n    /// @param _v2Address The contract address to be removed\r\n    function removeAccess(address _v2Address) public onlyCTO {\r\n        // See README.md for updgrade plan\r\n        delete contractsGrantedAccess[_v2Address];\r\n    }\r\n\r\n    /// @dev Only allow permitted contracts to interact with this contract\r\n    modifier onlyGrantedContracts() {\r\n        require(contractsGrantedAccess[msg.sender] == true);\r\n        _;\r\n    }\r\n\r\n    modifier validAsset(uint256 _tokenId) {\r\n        require(assets[_tokenId].ID > 0);\r\n        _;\r\n    }\r\n    /*** DATA TYPES ***/\r\n\r\n    /// @dev The main Ethernauts asset struct. Every asset in Ethernauts is represented by a copy\r\n    ///  of this structure. Note that the order of the members in this structure\r\n    ///  is important because of the byte-packing rules used by Ethereum.\r\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n    struct Asset {\r\n\r\n        // Asset ID is a identifier for look and feel in frontend\r\n        uint16 ID;\r\n\r\n        // Category = Sectors, Manufacturers, Ships, Objects (Upgrades/Misc), Factories and CrewMembers\r\n        uint8 category;\r\n\r\n        // The State of an asset: Available, On sale, Up for lease, Cooldown, Exploring\r\n        uint8 state;\r\n\r\n        // Attributes\r\n        // byte pos - Definition\r\n        // 00000001 - Seeded - Offered to the economy by us, the developers. Potentially at regular intervals.\r\n        // 00000010 - Producible - Product of a factory and/or factory contract.\r\n        // 00000100 - Explorable- Product of exploration.\r\n        // 00001000 - Leasable - Can be rented to other users and will return to the original owner once the action is complete.\r\n        // 00010000 - Permanent - Cannot be removed, always owned by a user.\r\n        // 00100000 - Consumable - Destroyed after N exploration expeditions.\r\n        // 01000000 - Tradable - Buyable and sellable on the market.\r\n        // 10000000 - Hot Potato - Automatically gets put up for sale after acquiring.\r\n        bytes2 attributes;\r\n\r\n        // The timestamp from the block when this asset was created.\r\n        uint64 createdAt;\r\n\r\n        // The minimum timestamp after which this asset can engage in exploring activities again.\r\n        uint64 cooldownEndBlock;\r\n\r\n        // The Asset's stats can be upgraded or changed based on exploration conditions.\r\n        // It will be defined per child contract, but all stats have a range from 0 to 255\r\n        // Examples\r\n        // 0 = Ship Level\r\n        // 1 = Ship Attack\r\n        uint8[STATS_SIZE] stats;\r\n\r\n        // Set to the cooldown time that represents exploration duration for this asset.\r\n        // Defined by a successful exploration action, regardless of whether this asset is acting as ship or a part.\r\n        uint256 cooldown;\r\n\r\n        // a reference to a super asset that manufactured the asset\r\n        uint256 builtBy;\r\n    }\r\n\r\n    /*** CONSTANTS ***/\r\n\r\n    // @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right storage contract in our EthernautsLogic(address _CStorageAddress) call.\r\n    bool public isEthernautsStorage = true;\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the Asset struct for all assets in existence. The Asset UniqueId\r\n    ///  of each asset is actually an index into this array.\r\n    Asset[] public assets;\r\n\r\n    /// @dev A mapping from Asset UniqueIDs to the price of the token.\r\n    /// stored outside Asset Struct to save gas, because price can change frequently\r\n    mapping (uint256 => uint256) internal assetIndexToPrice;\r\n\r\n    /// @dev A mapping from asset UniqueIDs to the address that owns them. All assets have some valid owner address.\r\n    mapping (uint256 => address) internal assetIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) internal ownershipTokenCount;\r\n\r\n    /// @dev A mapping from AssetUniqueIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Asset can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) internal assetIndexToApproved;\r\n\r\n\r\n    /*** SETTERS ***/\r\n\r\n    /// @dev set new asset price\r\n    /// @param _tokenId  asset UniqueId\r\n    /// @param _price    asset price\r\n    function setPrice(uint256 _tokenId, uint256 _price) public onlyGrantedContracts {\r\n        assetIndexToPrice[_tokenId] = _price;\r\n    }\r\n\r\n    /// @dev Mark transfer as approved\r\n    /// @param _tokenId  asset UniqueId\r\n    /// @param _approved address approved\r\n    function approve(uint256 _tokenId, address _approved) public onlyGrantedContracts {\r\n        assetIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @dev Assigns ownership of a specific Asset to an address.\r\n    /// @param _from    current owner address\r\n    /// @param _to      new owner address\r\n    /// @param _tokenId asset UniqueId\r\n    function transfer(address _from, address _to, uint256 _tokenId) public onlyGrantedContracts {\r\n        // Since the number of assets is capped to 2^32 we can't overflow this\r\n        ownershipTokenCount[_to]++;\r\n        // transfer ownership\r\n        assetIndexToOwner[_tokenId] = _to;\r\n        // When creating new assets _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete assetIndexToApproved[_tokenId];\r\n        }\r\n    }\r\n\r\n    /// @dev A public method that creates a new asset and stores it. This\r\n    ///  method does basic checking and should only be called from other contract when the\r\n    ///  input data is known to be valid. Will NOT generate any event it is delegate to business logic contracts.\r\n    /// @param _creatorTokenID The asset who is father of this asset\r\n    /// @param _owner First owner of this asset\r\n    /// @param _price asset price\r\n    /// @param _ID asset ID\r\n    /// @param _category see Asset Struct description\r\n    /// @param _state see Asset Struct description\r\n    /// @param _attributes see Asset Struct description\r\n    /// @param _stats see Asset Struct description\r\n    function createAsset(\r\n        uint256 _creatorTokenID,\r\n        address _owner,\r\n        uint256 _price,\r\n        uint16 _ID,\r\n        uint8 _category,\r\n        uint8 _state,\r\n        uint8 _attributes,\r\n        uint8[STATS_SIZE] _stats,\r\n        uint256 _cooldown,\r\n        uint64 _cooldownEndBlock\r\n    )\r\n    public onlyGrantedContracts\r\n    returns (uint256)\r\n    {\r\n        // Ensure our data structures are always valid.\r\n        require(_ID > 0);\r\n        require(_category > 0);\r\n        require(_attributes != 0x0);\r\n        require(_stats.length > 0);\r\n\r\n        Asset memory asset = Asset({\r\n            ID: _ID,\r\n            category: _category,\r\n            builtBy: _creatorTokenID,\r\n            attributes: bytes2(_attributes),\r\n            stats: _stats,\r\n            state: _state,\r\n            createdAt: uint64(now),\r\n            cooldownEndBlock: _cooldownEndBlock,\r\n            cooldown: _cooldown\r\n            });\r\n\r\n        uint256 newAssetUniqueId = assets.push(asset) - 1;\r\n\r\n        // Check it reached 4 billion assets but let's just be 100% sure.\r\n        require(newAssetUniqueId == uint256(uint32(newAssetUniqueId)));\r\n\r\n        // store price\r\n        assetIndexToPrice[newAssetUniqueId] = _price;\r\n\r\n        // This will assign ownership\r\n        transfer(address(0), _owner, newAssetUniqueId);\r\n\r\n        return newAssetUniqueId;\r\n    }\r\n\r\n    /// @dev A public method that edit asset in case of any mistake is done during process of creation by the developer. This\r\n    /// This method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid.\r\n    /// @param _tokenId The token ID\r\n    /// @param _creatorTokenID The asset that create that token\r\n    /// @param _price asset price\r\n    /// @param _ID asset ID\r\n    /// @param _category see Asset Struct description\r\n    /// @param _state see Asset Struct description\r\n    /// @param _attributes see Asset Struct description\r\n    /// @param _stats see Asset Struct description\r\n    /// @param _cooldown asset cooldown index\r\n    function editAsset(\r\n        uint256 _tokenId,\r\n        uint256 _creatorTokenID,\r\n        uint256 _price,\r\n        uint16 _ID,\r\n        uint8 _category,\r\n        uint8 _state,\r\n        uint8 _attributes,\r\n        uint8[STATS_SIZE] _stats,\r\n        uint16 _cooldown\r\n    )\r\n    external validAsset(_tokenId) onlyCLevel\r\n    returns (uint256)\r\n    {\r\n        // Ensure our data structures are always valid.\r\n        require(_ID > 0);\r\n        require(_category > 0);\r\n        require(_attributes != 0x0);\r\n        require(_stats.length > 0);\r\n\r\n        // store price\r\n        assetIndexToPrice[_tokenId] = _price;\r\n\r\n        Asset storage asset = assets[_tokenId];\r\n        asset.ID = _ID;\r\n        asset.category = _category;\r\n        asset.builtBy = _creatorTokenID;\r\n        asset.attributes = bytes2(_attributes);\r\n        asset.stats = _stats;\r\n        asset.state = _state;\r\n        asset.cooldown = _cooldown;\r\n    }\r\n\r\n    /// @dev Update only stats\r\n    /// @param _tokenId asset UniqueId\r\n    /// @param _stats asset state, see Asset Struct description\r\n    function updateStats(uint256 _tokenId, uint8[STATS_SIZE] _stats) public validAsset(_tokenId) onlyGrantedContracts {\r\n        assets[_tokenId].stats = _stats;\r\n    }\r\n\r\n    /// @dev Update only asset state\r\n    /// @param _tokenId asset UniqueId\r\n    /// @param _state asset state, see Asset Struct description\r\n    function updateState(uint256 _tokenId, uint8 _state) public validAsset(_tokenId) onlyGrantedContracts {\r\n        assets[_tokenId].state = _state;\r\n    }\r\n\r\n    /// @dev Update Cooldown for a single asset\r\n    /// @param _tokenId asset UniqueId\r\n    /// @param _cooldown asset state, see Asset Struct description\r\n    function setAssetCooldown(uint256 _tokenId, uint256 _cooldown, uint64 _cooldownEndBlock)\r\n    public validAsset(_tokenId) onlyGrantedContracts {\r\n        assets[_tokenId].cooldown = _cooldown;\r\n        assets[_tokenId].cooldownEndBlock = _cooldownEndBlock;\r\n    }\r\n\r\n    /*** GETTERS ***/\r\n\r\n    /// @notice Returns only stats data about a specific asset.\r\n    /// @dev it is necessary due solidity compiler limitations\r\n    ///      when we have large qty of parameters it throws StackTooDeepException\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    function getStats(uint256 _tokenId) public view returns (uint8[STATS_SIZE]) {\r\n        return assets[_tokenId].stats;\r\n    }\r\n\r\n    /// @dev return current price of an asset\r\n    /// @param _tokenId asset UniqueId\r\n    function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n        return assetIndexToPrice[_tokenId];\r\n    }\r\n\r\n    /// @notice Check if asset has all attributes passed by parameter\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    /// @param _attributes see Asset Struct description\r\n    function hasAllAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\r\n        return assets[_tokenId].attributes & _attributes == _attributes;\r\n    }\r\n\r\n    /// @notice Check if asset has any attribute passed by parameter\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    /// @param _attributes see Asset Struct description\r\n    function hasAnyAttrs(uint256 _tokenId, bytes2 _attributes) public view returns (bool) {\r\n        return assets[_tokenId].attributes & _attributes != 0x0;\r\n    }\r\n\r\n    /// @notice Check if asset is in the state passed by parameter\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    /// @param _category see AssetCategory in EthernautsBase for possible states\r\n    function isCategory(uint256 _tokenId, uint8 _category) public view returns (bool) {\r\n        return assets[_tokenId].category == _category;\r\n    }\r\n\r\n    /// @notice Check if asset is in the state passed by parameter\r\n    /// @param _tokenId The UniqueId of the asset of interest.\r\n    /// @param _state see enum AssetState in EthernautsBase for possible states\r\n    function isState(uint256 _tokenId, uint8 _state) public view returns (bool) {\r\n        return assets[_tokenId].state == _state;\r\n    }\r\n\r\n    /// @notice Returns owner of a given Asset(Token).\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @param _tokenId asset UniqueId\r\n    function ownerOf(uint256 _tokenId) public view returns (address owner)\r\n    {\r\n        return assetIndexToOwner[_tokenId];\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance\r\n    /// @notice Returns the number of Assets owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Asset.\r\n    /// @param _tokenId asset UniqueId\r\n    function approvedFor(uint256 _tokenId) public view onlyGrantedContracts returns (address) {\r\n        return assetIndexToApproved[_tokenId];\r\n    }\r\n\r\n    /// @notice Returns the total number of Assets currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256) {\r\n        return assets.length;\r\n    }\r\n\r\n    /// @notice List all existing tokens. It can be filtered by attributes or assets with owner\r\n    /// @param _owner filter all assets by owner\r\n    function getTokenList(address _owner, uint8 _withAttributes, uint256 start, uint256 count) external view returns(\r\n        uint256[6][]\r\n    ) {\r\n        uint256 totalAssets = assets.length;\r\n\r\n        if (totalAssets == 0) {\r\n            // Return an empty array\r\n            return new uint256[6][](0);\r\n        } else {\r\n            uint256[6][] memory result = new uint256[6][](totalAssets > count ? count : totalAssets);\r\n            uint256 resultIndex = 0;\r\n            bytes2 hasAttributes  = bytes2(_withAttributes);\r\n            Asset memory asset;\r\n\r\n            for (uint256 tokenId = start; tokenId < totalAssets && resultIndex < count; tokenId++) {\r\n                asset = assets[tokenId];\r\n                if (\r\n                    (asset.state != uint8(AssetState.Used)) &&\r\n                    (assetIndexToOwner[tokenId] == _owner || _owner == address(0)) &&\r\n                    (asset.attributes & hasAttributes == hasAttributes)\r\n                ) {\r\n                    result[resultIndex][0] = tokenId;\r\n                    result[resultIndex][1] = asset.ID;\r\n                    result[resultIndex][2] = asset.category;\r\n                    result[resultIndex][3] = uint256(asset.attributes);\r\n                    result[resultIndex][4] = asset.cooldown;\r\n                    result[resultIndex][5] = assetIndexToPrice[tokenId];\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title The facet of the Ethernauts contract that manages ownership, ERC-721 compliant.\r\n/// @notice This provides the methods required for basic non-fungible token\r\n//          transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n//          It interfaces with EthernautsStorage provinding basic functions as create and list, also holds\r\n//          reference to logic contracts as Auction, Explore and so on\r\n/// @author Ethernatus - Fernando Pauer\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\ncontract EthernautsOwnership is EthernautsAccessControl, ERC721 {\r\n\r\n    /// @dev Contract holding only data.\r\n    EthernautsStorage public ethernautsStorage;\r\n\r\n    /*** CONSTANTS ***/\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"Ethernauts\";\r\n    string public constant symbol = \"ETNT\";\r\n\r\n    /********* ERC 721 - COMPLIANCE CONSTANTS AND FUNCTIONS ***************/\r\n    /**********************************************************************/\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 = bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    /*** EVENTS ***/\r\n\r\n    // Events as per ERC-721\r\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\r\n    event Approval(address indexed owner, address indexed approved, uint256 tokens);\r\n\r\n    /// @dev When a new asset is create it emits build event\r\n    /// @param owner The address of asset owner\r\n    /// @param tokenId Asset UniqueID\r\n    /// @param assetId ID that defines asset look and feel\r\n    /// @param price asset price\r\n    event Build(address owner, uint256 tokenId, uint16 assetId, uint256 price);\r\n\r\n    function implementsERC721() public pure returns (bool) {\r\n        return true;\r\n    }\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. ERC-165 and ERC-721.\r\n    /// @param _interfaceID interface signature ID\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Asset.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId asset UniqueId, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return ethernautsStorage.ownerOf(_tokenId) == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Asset.\r\n    /// @param _claimant the address we are confirming asset is approved for.\r\n    /// @param _tokenId asset UniqueId, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return ethernautsStorage.approvedFor(_tokenId) == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Assets on auction, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        ethernautsStorage.approve(_tokenId, _approved);\r\n    }\r\n\r\n    /// @notice Returns the number of Assets owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ethernautsStorage.balanceOf(_owner);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @notice Transfers a Asset to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  Ethernauts specifically) or your Asset may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Asset to transfer.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any assets\r\n        // (except very briefly after it is created and before it goes on auction).\r\n        require(_to != address(this));\r\n        // Disallow transfers to the storage contract to prevent accidental\r\n        // misuse. Auction or Upgrade contracts should only take ownership of assets\r\n        // through the allow + transferFrom flow.\r\n        require(_to != address(ethernautsStorage));\r\n\r\n        // You can only send your own asset.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        ethernautsStorage.transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @notice Grant another address the right to transfer a specific Asset via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Asset that can be transferred if this call succeeds.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n\r\n    /// @notice Transfer a Asset owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Asset to be transferred.\r\n    /// @param _to The address that should take ownership of the Asset. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Asset to be transferred.\r\n    function _transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    internal\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any assets (except for used assets).\r\n        require(_owns(_from, _tokenId));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(_to, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        ethernautsStorage.transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @notice Transfer a Asset owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Asset to be transfered.\r\n    /// @param _to The address that should take ownership of the Asset. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Asset to be transferred.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        _transferFrom(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev Required for ERC-721 compliance.\r\n    /// @notice Allow pre-approved user to take ownership of a token\r\n    /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n    function takeOwnership(uint256 _tokenId) public {\r\n        address _from = ethernautsStorage.ownerOf(_tokenId);\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_from != address(0));\r\n        _transferFrom(_from, msg.sender, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Assets currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint256) {\r\n        return ethernautsStorage.totalSupply();\r\n    }\r\n\r\n    /// @notice Returns owner of a given Asset(Token).\r\n    /// @param _tokenId Token ID to get owner.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (address owner)\r\n    {\r\n        owner = ethernautsStorage.ownerOf(_tokenId);\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @dev Creates a new Asset with the given fields. ONly available for C Levels\r\n    /// @param _creatorTokenID The asset who is father of this asset\r\n    /// @param _price asset price\r\n    /// @param _assetID asset ID\r\n    /// @param _category see Asset Struct description\r\n    /// @param _attributes see Asset Struct description\r\n    /// @param _stats see Asset Struct description\r\n    function createNewAsset(\r\n        uint256 _creatorTokenID,\r\n        address _owner,\r\n        uint256 _price,\r\n        uint16 _assetID,\r\n        uint8 _category,\r\n        uint8 _attributes,\r\n        uint8[STATS_SIZE] _stats\r\n    )\r\n    external onlyCLevel\r\n    returns (uint256)\r\n    {\r\n        // owner must be sender\r\n        require(_owner != address(0));\r\n\r\n        uint256 tokenID = ethernautsStorage.createAsset(\r\n            _creatorTokenID,\r\n            _owner,\r\n            _price,\r\n            _assetID,\r\n            _category,\r\n            uint8(AssetState.Available),\r\n            _attributes,\r\n            _stats,\r\n            0,\r\n            0\r\n        );\r\n\r\n        // emit the build event\r\n        Build(\r\n            _owner,\r\n            tokenID,\r\n            _assetID,\r\n            _price\r\n        );\r\n\r\n        return tokenID;\r\n    }\r\n\r\n    /// @notice verify if token is in exploration time\r\n    /// @param _tokenId The Token ID that can be upgraded\r\n    function isExploring(uint256 _tokenId) public view returns (bool) {\r\n        uint256 cooldown;\r\n        uint64 cooldownEndBlock;\r\n        (,,,,,cooldownEndBlock, cooldown,) = ethernautsStorage.assets(_tokenId);\r\n        return (cooldown > now) || (cooldownEndBlock > uint64(block.number));\r\n    }\r\n}\r\n\r\n\r\n/// @title The facet of the Ethernauts Logic contract handle all common code for logic/business contracts\r\n/// @author Ethernatus - Fernando Pauer\r\ncontract EthernautsLogic is EthernautsOwnership {\r\n\r\n    // Set in case the logic contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @dev Constructor\r\n    function EthernautsLogic() public {\r\n        // the creator of the contract is the initial CEO, COO, CTO\r\n        ceoAddress = msg.sender;\r\n        ctoAddress = msg.sender;\r\n        cooAddress = msg.sender;\r\n        oracleAddress = msg.sender;\r\n\r\n        // Starts paused.\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyCTO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @dev set a new reference to the NFT ownership contract\r\n    /// @param _CStorageAddress - address of a deployed contract implementing EthernautsStorage.\r\n    function setEthernautsStorageContract(address _CStorageAddress) public onlyCLevel whenPaused {\r\n        EthernautsStorage candidateContract = EthernautsStorage(_CStorageAddress);\r\n        require(candidateContract.isEthernautsStorage());\r\n        ethernautsStorage = candidateContract;\r\n    }\r\n\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(ethernautsStorage != address(0));\r\n        require(newContractAddress == address(0));\r\n        // require this contract to have access to storage contract\r\n        require(ethernautsStorage.contractsGrantedAccess(address(this)) == true);\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    // @dev Allows the COO to capture the balance available to the contract.\r\n    function withdrawBalances(address _to) public onlyCLevel {\r\n        _to.transfer(this.balance);\r\n    }\r\n\r\n    /// return current contract balance\r\n    function getBalance() public view onlyCLevel returns (uint256) {\r\n        return this.balance;\r\n    }\r\n}\r\n\r\n/// @title Clock auction for non-fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\n///         This provides public methods for auctioning or bidding on assets, purchase (GoldenGoose) and Upgrade ship.\r\n///\r\n///      - Auctions/Bidding: This provides public methods for auctioning or bidding on assets.\r\n///             Auction creation is mostly mediated through this facet of the logic contract.\r\n///\r\n///      - Purchase: This provides public methods for buying GoldenGoose assets.\r\n/// @author Ethernatus - Fernando Pauer\r\ncontract EthernautsMarket is EthernautsLogic, ClockAuctionBase {\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    ///  and Delegate constructor to EthernautsUpgrade contract.\r\n    /// @param _cut - percent cut the owner takes on each auction, must be\r\n    ///  between 0-10,000.\r\n    function EthernautsMarket(uint256 _cut) public\r\n    EthernautsLogic() {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n        nonFungibleContract = this;\r\n    }\r\n\r\n    /*** EVENTS ***/\r\n    /// @dev The Purchase event is fired whenever a token is sold.\r\n    event Purchase(uint256 indexed tokenId, uint256 oldPrice, uint256 newPrice, address indexed prevOwner, address indexed winner);\r\n\r\n    /*** CONSTANTS ***/\r\n    uint8 private percentageFee1Step = 95;\r\n    uint8 private percentageFee2Step = 95;\r\n    uint8 private percentageFeeSteps = 98;\r\n    uint8 private percentageBase = 100;\r\n    uint8 private percentage1Step = 200;\r\n    uint8 private percentage2Step = 125;\r\n    uint8 private percentageSteps = 115;\r\n    uint256 private firstStepLimit =  0.05 ether;\r\n    uint256 private secondStepLimit = 5 ether;\r\n\r\n    // ************************* AUCTION AND BIDDING ****************************\r\n    /// @dev Bids on an open auction, completing the auction and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId)\r\n    external\r\n    payable\r\n    whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        uint256 newPrice = _bid(_tokenId, msg.value);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n        // only set new price after transfer\r\n        ethernautsStorage.setPrice(_tokenId, newPrice);\r\n    }\r\n\r\n    /// @dev Cancels an auction that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on auction\r\n    function cancelAuction(uint256 _tokenId)\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        address seller = auction.seller;\r\n        require(msg.sender == seller);\r\n        _cancelAuction(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels an auction when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on auction to cancel.\r\n    function cancelAuctionWhenPaused(uint256 _tokenId)\r\n    whenPaused\r\n    onlyCLevel\r\n    external\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        _cancelAuction(_tokenId, auction.seller);\r\n    }\r\n\r\n    /// @dev Create an auction when the contract is paused to\r\n    ///  recreate pending bids from last contract.\r\n    ///  This should only be used in emergencies.\r\n    /// @param _contract - previous contract\r\n    /// @param _seller - original seller of previous contract\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    function createAuctionWhenPaused(\r\n        address _contract,\r\n        address _seller,\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n    whenPaused\r\n    onlyCLevel\r\n    external\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        // ensure this contract owns the auction\r\n        require(_owns(_contract, _tokenId));\r\n        require(_seller != address(0));\r\n\r\n        ethernautsStorage.approve(_tokenId, address(this));\r\n\r\n        /// Escrows the NFT, assigning ownership to this contract.\r\n        /// Throws if the escrow fails.\r\n        _transferFrom(_contract, this, _tokenId);\r\n\r\n        Auction memory auction = Auction(\r\n            _seller,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @dev Returns auction info for an NFT on auction.\r\n    /// @param _tokenId - ID of NFT on auction.\r\n    function getAuction(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns\r\n    (\r\n        address seller,\r\n        uint256 startingPrice,\r\n        uint256 endingPrice,\r\n        uint256 duration,\r\n        uint256 startedAt\r\n    ) {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return (\r\n        auction.seller,\r\n        auction.startingPrice,\r\n        auction.endingPrice,\r\n        auction.duration,\r\n        auction.startedAt\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of an auction.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n    external\r\n    view\r\n    returns (uint256)\r\n    {\r\n        Auction storage auction = tokenIdToAuction[_tokenId];\r\n        require(_isOnAuction(auction));\r\n        return _currentPrice(auction);\r\n    }\r\n\r\n    /// @dev Creates and begins a new auction. Does some ownership trickery to create auctions in one tx.\r\n    /// @param _tokenId - ID of token to auction, sender must be owner.\r\n    /// @param _startingPrice - Price of item (in wei) at beginning of auction.\r\n    /// @param _endingPrice - Price of item (in wei) at end of auction.\r\n    /// @param _duration - Length of time to move between starting\r\n    ///  price and ending price (in seconds).\r\n    function createSaleAuction(\r\n        uint256 _tokenId,\r\n        uint256 _startingPrice,\r\n        uint256 _endingPrice,\r\n        uint256 _duration\r\n    )\r\n    external\r\n    whenNotPaused\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_startingPrice == uint256(uint128(_startingPrice)));\r\n        require(_endingPrice == uint256(uint128(_endingPrice)));\r\n        require(_duration == uint256(uint64(_duration)));\r\n\r\n        // Auction contract checks input sizes\r\n        // If asset is already on any auction, this will throw\r\n        // because it will be owned by the auction contract.\r\n        require(_owns(msg.sender, _tokenId));\r\n        // Ensure the asset is Tradeable and not GoldenGoose to prevent the auction\r\n        // contract accidentally receiving ownership of the child.\r\n        require(ethernautsStorage.hasAllAttrs(_tokenId, ATTR_TRADABLE));\r\n        require(!ethernautsStorage.hasAllAttrs(_tokenId, ATTR_GOLDENGOOSE));\r\n\r\n        // Ensure the asset is in available state, otherwise it cannot be sold\r\n        require(ethernautsStorage.isState(_tokenId, uint8(AssetState.Available)));\r\n\r\n        // asset or object could not be in exploration\r\n        require(!isExploring(_tokenId));\r\n\r\n        ethernautsStorage.approve(_tokenId, address(this));\r\n\r\n        /// Escrows the NFT, assigning ownership to this contract.\r\n        /// Throws if the escrow fails.\r\n        _transferFrom(msg.sender, this, _tokenId);\r\n\r\n        Auction memory auction = Auction(\r\n            msg.sender,\r\n            uint128(_startingPrice),\r\n            uint128(_endingPrice),\r\n            uint64(_duration),\r\n            uint64(now)\r\n        );\r\n\r\n        _addAuction(_tokenId, auction);\r\n    }\r\n\r\n    /// @notice Any C-level can change sales cut.\r\n    function setOwnerCut(uint256 _ownerCut) public onlyCLevel {\r\n        ownerCut = _ownerCut;\r\n    }\r\n\r\n\r\n    // ************************* PURCHASE ****************************\r\n\r\n    /// @notice Allows someone buy obtain an GoldenGoose asset token\r\n    /// @param _tokenId The Token ID that can be purchased if Token is a GoldenGoose asset.\r\n    function purchase(uint256 _tokenId) external payable whenNotPaused {\r\n        // Checking if Asset is a GoldenGoose, if not this purchase is not allowed\r\n        require(ethernautsStorage.hasAnyAttrs(_tokenId, ATTR_GOLDENGOOSE));\r\n\r\n        address oldOwner = ethernautsStorage.ownerOf(_tokenId);\r\n        address newOwner = msg.sender;\r\n        uint256 sellingPrice = ethernautsStorage.priceOf(_tokenId);\r\n\r\n        // Making sure token owner is not sending to self\r\n        // it guarantees a fair market\r\n        require(oldOwner != newOwner);\r\n\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(newOwner != address(0));\r\n\r\n        // Making sure sent amount is greater than or equal to the sellingPrice\r\n        require(msg.value >= sellingPrice);\r\n\r\n        uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, percentageFee1Step), 100));\r\n        uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n        uint256 newPrice = sellingPrice;\r\n\r\n        // Update prices\r\n        if (sellingPrice < firstStepLimit) {\r\n            // first stage\r\n            newPrice = SafeMath.div(SafeMath.mul(sellingPrice, percentage1Step), percentageBase);\r\n        } else if (sellingPrice < secondStepLimit) {\r\n            // redefining fees\r\n            payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, percentageFee2Step), 100));\r\n\r\n            // second stage\r\n            newPrice = SafeMath.div(SafeMath.mul(sellingPrice, percentage2Step), percentageBase);\r\n        } else {\r\n            // redefining fees\r\n            payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, percentageFeeSteps), 100));\r\n\r\n            // last stage\r\n            newPrice = SafeMath.div(SafeMath.mul(sellingPrice, percentageSteps), percentageBase);\r\n        }\r\n\r\n        // Pay previous tokenOwner if owner is not contract\r\n        if (oldOwner != address(this)) {\r\n            oldOwner.transfer(payment); //(1-0.06)\r\n        }\r\n\r\n        // only transfer token after confirmed transaction\r\n        ethernautsStorage.transfer(oldOwner, newOwner, _tokenId);\r\n\r\n        // only set new price after confirmed transaction\r\n        ethernautsStorage.setPrice(_tokenId, newPrice);\r\n\r\n        Purchase(_tokenId, sellingPrice, newPrice, oldOwner, newOwner);\r\n\r\n        // send excess back to buyer\r\n        msg.sender.transfer(purchaseExcess);\r\n    }\r\n\r\n    /// @notice Any C-level can change first Step Limit.\r\n    function setStepLimits(\r\n        uint256 _firstStepLimit,\r\n        uint256 _secondStepLimit\r\n    ) public onlyCLevel {\r\n        firstStepLimit = _firstStepLimit;\r\n        secondStepLimit = _secondStepLimit;\r\n    }\r\n\r\n    /// @notice Any C-level can change percentage values\r\n    function setPercentages(\r\n        uint8 _Fee1,\r\n        uint8 _Fee2,\r\n        uint8 _Fees,\r\n        uint8 _1Step,\r\n        uint8 _2Step,\r\n        uint8 _Steps\r\n    ) public onlyCLevel {\r\n        percentageFee1Step = _Fee1;\r\n        percentageFee2Step = _Fee2;\r\n        percentageFeeSteps = _Fees;\r\n        percentage1Step = _1Step;\r\n        percentage2Step = _2Step;\r\n        percentageSteps = _Steps;\r\n    }\r\n\r\n}",
    "data_type": "ERC721",
    "id": "EthernautsMarket_0x3b74618d5c023de31bd90fcdf5875099de46a864",
    "file": "./Contract_source_Code/EthernautsMarket_0x3b74618d5c023de31bd90fcdf5875099de46a864.sol"
}