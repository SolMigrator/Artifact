{
    "name": "CryptoStamps",
    "address": "0xa181b8c9f6b43b8252c6c9826cf5feba362b542e",
    "Compiler Version": "v0.4.18+commit.9cf6e910",
    "Optimization Enabled": "No with 200 runs",
    "Other Settings": "default evmVersion",
    "creation_bytecode": "60606040526711c37937e0800000600055341561001b57600080fd5b33600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600d60146101000a81548160ff021916908315150217905550612c64806100c76000396000f3006060604052600436106101f9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101fe578063095ea7b31461028c5780630a0f8168146102ce5780630b7e9c44146103235780631051db341461035c5780631259c00d1461038957806316da1d50146103c457806318160ddd146104255780631a365f2b1461044e57806323b872dd146104b157806327d7874c146105125780632ba73c151461054b5780634ec8a8ff146105845780636352211e1461059957806370a08231146105fc578063766d2c3b146106495780637cead212146106805780637e15e9ef146106e35780638462151c1461071a57806389d6d69d146107a857806395d89b411461080b5780639fc3e53a14610899578063a3f4df7e146108c7578063a632a2e514610955578063a9059cbb1461098c578063ac3fc432146109ce578063af6337fd146109f7578063b047fb5014610a0c578063b08510a314610a61578063b2e6ceeb14610ada578063b9186d7d14610afd578063d2064e2f14610b34578063d61a452414610ba5578063dde107c214610c1e578063e9bc959814610c55578063ea317f6d14610c7e578063efef39a114610cb5578063f76f8d7814610ccd578063f90b2bfe14610d5b578063fd04a90214610d7e578063ff1e28a414610da7575b600080fd5b341561020957600080fd5b610211610de9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610251578082015181840152602081019050610236565b50505050905090810190601f16801561027e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029757600080fd5b6102cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e2c565b005b34156102d957600080fd5b6102e1610f1e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561032e57600080fd5b61035a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f44565b005b341561036757600080fd5b61036f611004565b604051808215151515815260200191505060405180910390f35b341561039457600080fd5b6103aa600480803590602001909190505061100d565b604051808215151515815260200191505060405180910390f35b34156103cf57600080fd5b610423600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061102d565b005b341561043057600080fd5b6104386110c2565b6040518082815260200191505060405180910390f35b341561045957600080fd5b61046f60048080359060200190919050506110cf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104bc57600080fd5b610510600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611102565b005b341561051d57600080fd5b610549600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611150565b005b341561055657600080fd5b610582600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061122c565b005b341561058f57600080fd5b610597611308565b005b34156105a457600080fd5b6105ba6004808035906020019091905050611381565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561060757600080fd5b610633600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113fa565b6040518082815260200191505060405180910390f35b341561065457600080fd5b61066a6004808035906020019091905050611443565b6040518082815260200191505060405180910390f35b341561068b57600080fd5b6106a160048080359060200190919050506114a2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106ee57600080fd5b61070460048080359060200190919050506114d5565b6040518082815260200191505060405180910390f35b341561072557600080fd5b610751600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611544565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610794578082015181840152602081019050610779565b505050509050019250505060405180910390f35b34156107b357600080fd5b6107c9600480803590602001909190505061167b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561081657600080fd5b61081e6116ae565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561085e578082015181840152602081019050610843565b50505050905090810190601f16801561088b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156108a457600080fd5b6108c5600480803515159060200190919080359060200190919050506116f1565b005b34156108d257600080fd5b6108da61177c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561091a5780820151818401526020810190506108ff565b50505050905090810190601f1680156109475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561096057600080fd5b61097660048080359060200190919050506117b5565b6040518082815260200191505060405180910390f35b341561099757600080fd5b6109cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611824565b005b34156109d957600080fd5b6109e161187e565b6040518082815260200191505060405180910390f35b3415610a0257600080fd5b610a0a611884565b005b3415610a1757600080fd5b610a1f611955565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a6c57600080fd5b610a98600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061197b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610ae557600080fd5b610afb6004808035906020019091905050611a44565b005b3415610b0857600080fd5b610b1e6004808035906020019091905050611adb565b6040518082815260200191505060405180910390f35b3415610b3f57600080fd5b610b556004808035906020019091905050611af8565b604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390f35b3415610bb057600080fd5b610bdc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610c2957600080fd5b610c3f6004808035906020019091905050611c3e565b6040518082815260200191505060405180910390f35b3415610c6057600080fd5b610c68611c56565b6040518082815260200191505060405180910390f35b3415610c8957600080fd5b610c9f6004808035906020019091905050611c5c565b6040518082815260200191505060405180910390f35b610ccb6004808035906020019091905050611ccb565b005b3415610cd857600080fd5b610ce0611ff9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d20578082015181840152602081019050610d05565b50505050905090810190601f168015610d4d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610d6657600080fd5b610d7c6004808035906020019091905050612032565b005b3415610d8957600080fd5b610d9161227e565b6040518082815260200191505060405180910390f35b3415610db257600080fd5b610de7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612284565b005b610df1612ba9565b6040805190810160405280600c81526020017f43727970746f5374616d70730000000000000000000000000000000000000000815250905090565b60001515600d60149054906101000a900460ff161515141515610e4e57600080fd5b610e583382612393565b1515610e6357600080fd5b816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610fed5750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610ff857600080fd5b611001816123ff565b50565b60006001905090565b60096020528060005260406000206000915054906101000a900460ff1681565b6110378382612393565b151561104257600080fd5b61104b8261250d565b151561105657600080fd5b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b257600080fd5b6110bd838383612546565b505050565b6000600b80549050905090565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61110c8382612393565b151561111757600080fd5b611121828261276d565b151561112c57600080fd5b6111358261250d565b151561114057600080fd5b61114b8383836127d9565b505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ac57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111e857600080fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156112c457600080fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561136457600080fd5b6000600d60146101000a81548160ff021916908315150217905550565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156113f557600080fd5b919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600460008481526020019081526020016000205490506000548110156114835761147c6114748260c8612a3d565b600e54612a78565b915061149c565b61149961149182607d612a3d565b600e54612a78565b91505b50919050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561153357600080fd5b81600e81905550600e549050919050565b61154c612bbd565b6000611556612bbd565b6000806000611564876113fa565b9450600085141561159657600060405180591061157e5750595b90808252806020026020018201604052509550611671565b846040518059106115a45750595b908082528060200260200182016040525093506115bf6110c2565b925060009150600090505b828111151561166d578673ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116605780848381518110151561164957fe5b906020019060200201818152505081806001019250505b80806001019150506115ca565b8395505b5050505050919050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116b6612ba9565b6040805190810160405280600281526020017f4353000000000000000000000000000000000000000000000000000000000000815250905090565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561174d57600080fd5b816009600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6040805190810160405280600c81526020017f43727970746f5374616d7073000000000000000000000000000000000000000081525081565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561181357600080fd5b81600f81905550600f549050919050565b61182e3382612393565b151561183957600080fd5b6118428261250d565b151561184d57600080fd5b60001515600d60149054906101000a900460ff16151514151561186f57600080fd5b61187a3383836127d9565b5050565b60085481565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061192d5750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561193857600080fd5b6001600d60146101000a81548160ff021916908315150217905550565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119d957600080fd5b81601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000803391506001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060001515600d60149054906101000a900460ff161515141515611aa257600080fd5b611aab8261250d565b1515611ab657600080fd5b611ac0828461276d565b1515611acb57600080fd5b611ad68183856127d9565b505050565b600060046000838152602001908152602001600020549050919050565b600080600080600b85815481101515611b0d57fe5b9060005260206000209001905080600001549350600460008681526020019081526020016000205492506001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150509193909250565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bd357600080fd5b81601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60056020528060005260406000206000915090505481565b60075481565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cba57600080fd5b816010819055506010549050919050565b60008060008060006001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169450339350600015156009600088815260200190815260200160002060009054906101000a900460ff161515141515611d3f57600080fd5b60001515600d60149054906101000a900460ff161515141515611d6157600080fd5b6004600087815260200190815260200160002054925082600654016006819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515611dbd57600080fd5b611dc68461250d565b1515611dd157600080fd5b823410151515611de057600080fd5b611df6611def84600e54612a3d565b6064612a78565b9150611e023484612a93565b9050600054831015611e4057611e24611e1c8460c8612a3d565b600e54612a78565b6004600088815260200190815260200160002081905550611e6e565b611e56611e4e84607d612a3d565b600e54612a78565b60046000888152602001908152602001600020819055505b611e798585886127d9565b3073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515611eef578473ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515611eee57600080fd5b5b7f366e81d6675b75f581d1b7b428bc717efb1fa8b4bb542c1d26e15a1bc770baad8684600460008a8152602001908152602001600020548888604051808681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611ff157600080fd5b505050505050565b6040805190810160405280600281526020017f435300000000000000000000000000000000000000000000000000000000000081525081565b60008060008060001515600d60149054906101000a900460ff16151514151561205a57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156120c757600080fd5b6010546120d386611adb565b101515156120e057600080fd5b600015156009600087815260200190815260200160002060009054906101000a900460ff16151514151561211357600080fd5b6001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935061215285611adb565b925061216083600f54612a78565b915061218e601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686610e2c565b6121ba601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686611824565b60016009600087815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b600f5481101561220c576121ff8483612aac565b80806001019150506121eb565b7f129a1a37d679d74a7f8d9195e2631d0d7b8d2b66378e886c62e3fff8bbc5fb5c3386604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050505050565b60065481565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122e257600080fd5b60001515600d60149054906101000a900460ff16151514151561230457600080fd5b829050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561236257600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b6000821015151561237257600080fd5b60086000815480929190600101919050555061238e8183612aac565b505050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124b257600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156124ad57600080fd5b61250a565b8073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561250957600080fd5b5b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600115156009600083815260200190815260200160002060009054906101000a900460ff16151514151561257957600080fd5b60001515600d60149054906101000a900460ff16151514151561259b57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555060016005600083815260200190815260200160002054016005600083815260200190815260200160002081905550816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760008154809291906001019190505550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561270357600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f279616fe922aaba6d9d399511c5ab3220a22455d2b3a970dcc395981e97d97c0836040518082815260200191505060405180910390a3505050565b60008273ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b60001515600d60149054906101000a900460ff1615151415156127fb57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555060016005600083815260200190815260200160002054016005600083815260200190815260200160002081905550600760008154809291906001019190505550816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561299957600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000806000841415612a525760009150612a71565b8284029050828482811515612a6357fe5b04141515612a6d57fe5b8091505b5092915050565b6000808284811515612a8657fe5b0490508091505092915050565b6000828211151515612aa157fe5b818303905092915050565b612ab4612bd1565b60006020604051908101604052804281525091506001600b8054806001018281612ade9190612be5565b916000526020600020900160008590919091506000820151816000015550500390508063ffffffff1681141515612b1457600080fd5b7fd3e00f4b0273236b47634ed9ddd3096ae6bb94d572d60c6ee8f7ddbb1493184e8185604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1826004600083815260200190815260200160002081905550612ba3600085836127d9565b50505050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b815481835581811511612c0c57818360005260206000209182019101612c0b9190612c11565b5b505050565b612c3591905b80821115612c315760008082016000905550600101612c17565b5090565b905600a165627a7a7230582019899bfb17e185c389368261f2da51f8b3e2582333ecce2bf0a6e5862baa8a3c0029",
    "abi": [
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ceoAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                }
            ],
            "name": "payout",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "implementsERC721",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "stampIndextodissolved",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferdissolvedFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "total",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "stampIndexToOwner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCEO",
                    "type": "address"
                }
            ],
            "name": "setCEO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCOO",
                    "type": "address"
                }
            ],
            "name": "setCOO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "unpausecontract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "balance",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "nextpriceOf",
            "outputs": [
                {
                    "name": "price",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "dissolvedIndexToApproved",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "cutowner",
                    "type": "uint256"
                }
            ],
            "name": "setcut",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "tokensOfOwner",
            "outputs": [
                {
                    "name": "ownerTokens",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "stampIndexToApproved",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "control",
                    "type": "bool"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "controlstampdissolution",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "NAME",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "number",
                    "type": "uint256"
                }
            ],
            "name": "setnumber",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "stampCreatedCount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "pausecontract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cooAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "dissolvedaddress",
                    "type": "address"
                }
            ],
            "name": "setdissolvedcontract",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "takeOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "priceOf",
            "outputs": [
                {
                    "name": "price",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getStamp",
            "outputs": [
                {
                    "name": "birthtimestamp",
                    "type": "uint256"
                },
                {
                    "name": "sellingPrice",
                    "type": "uint256"
                },
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "dissolveaddress",
                    "type": "address"
                }
            ],
            "name": "setdissolveaddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "stampIndextotransactions",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totaltransactions",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "number",
                    "type": "uint256"
                }
            ],
            "name": "setdissolveprice",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "purchase",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "SYMBOL",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "dissolve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totaletherstransacted",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_price",
                    "type": "uint256"
                }
            ],
            "name": "createStamp",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "stampBirth",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "oldPrice",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "newPrice",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "prevOwner",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "winner",
                    "type": "address"
                }
            ],
            "name": "TokenSold",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "approved",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Dissolved",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "TransferDissolved",
            "type": "event"
        }
    ],
    "deployed_bytecode": "0x6060604052600436106101f9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806306fdde03146101fe578063095ea7b31461028c5780630a0f8168146102ce5780630b7e9c44146103235780631051db341461035c5780631259c00d1461038957806316da1d50146103c457806318160ddd146104255780631a365f2b1461044e57806323b872dd146104b157806327d7874c146105125780632ba73c151461054b5780634ec8a8ff146105845780636352211e1461059957806370a08231146105fc578063766d2c3b146106495780637cead212146106805780637e15e9ef146106e35780638462151c1461071a57806389d6d69d146107a857806395d89b411461080b5780639fc3e53a14610899578063a3f4df7e146108c7578063a632a2e514610955578063a9059cbb1461098c578063ac3fc432146109ce578063af6337fd146109f7578063b047fb5014610a0c578063b08510a314610a61578063b2e6ceeb14610ada578063b9186d7d14610afd578063d2064e2f14610b34578063d61a452414610ba5578063dde107c214610c1e578063e9bc959814610c55578063ea317f6d14610c7e578063efef39a114610cb5578063f76f8d7814610ccd578063f90b2bfe14610d5b578063fd04a90214610d7e578063ff1e28a414610da7575b600080fd5b341561020957600080fd5b610211610de9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610251578082015181840152602081019050610236565b50505050905090810190601f16801561027e5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561029757600080fd5b6102cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050610e2c565b005b34156102d957600080fd5b6102e1610f1e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561032e57600080fd5b61035a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050610f44565b005b341561036757600080fd5b61036f611004565b604051808215151515815260200191505060405180910390f35b341561039457600080fd5b6103aa600480803590602001909190505061100d565b604051808215151515815260200191505060405180910390f35b34156103cf57600080fd5b610423600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803590602001909190505061102d565b005b341561043057600080fd5b6104386110c2565b6040518082815260200191505060405180910390f35b341561045957600080fd5b61046f60048080359060200190919050506110cf565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156104bc57600080fd5b610510600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611102565b005b341561051d57600080fd5b610549600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611150565b005b341561055657600080fd5b610582600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061122c565b005b341561058f57600080fd5b610597611308565b005b34156105a457600080fd5b6105ba6004808035906020019091905050611381565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561060757600080fd5b610633600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506113fa565b6040518082815260200191505060405180910390f35b341561065457600080fd5b61066a6004808035906020019091905050611443565b6040518082815260200191505060405180910390f35b341561068b57600080fd5b6106a160048080359060200190919050506114a2565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156106ee57600080fd5b61070460048080359060200190919050506114d5565b6040518082815260200191505060405180910390f35b341561072557600080fd5b610751600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611544565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610794578082015181840152602081019050610779565b505050509050019250505060405180910390f35b34156107b357600080fd5b6107c9600480803590602001909190505061167b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561081657600080fd5b61081e6116ae565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561085e578082015181840152602081019050610843565b50505050905090810190601f16801561088b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156108a457600080fd5b6108c5600480803515159060200190919080359060200190919050506116f1565b005b34156108d257600080fd5b6108da61177c565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561091a5780820151818401526020810190506108ff565b50505050905090810190601f1680156109475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561096057600080fd5b61097660048080359060200190919050506117b5565b6040518082815260200191505060405180910390f35b341561099757600080fd5b6109cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050611824565b005b34156109d957600080fd5b6109e161187e565b6040518082815260200191505060405180910390f35b3415610a0257600080fd5b610a0a611884565b005b3415610a1757600080fd5b610a1f611955565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610a6c57600080fd5b610a98600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061197b565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610ae557600080fd5b610afb6004808035906020019091905050611a44565b005b3415610b0857600080fd5b610b1e6004808035906020019091905050611adb565b6040518082815260200191505060405180910390f35b3415610b3f57600080fd5b610b556004808035906020019091905050611af8565b604051808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001935050505060405180910390f35b3415610bb057600080fd5b610bdc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611b75565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610c2957600080fd5b610c3f6004808035906020019091905050611c3e565b6040518082815260200191505060405180910390f35b3415610c6057600080fd5b610c68611c56565b6040518082815260200191505060405180910390f35b3415610c8957600080fd5b610c9f6004808035906020019091905050611c5c565b6040518082815260200191505060405180910390f35b610ccb6004808035906020019091905050611ccb565b005b3415610cd857600080fd5b610ce0611ff9565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610d20578082015181840152602081019050610d05565b50505050905090810190601f168015610d4d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610d6657600080fd5b610d7c6004808035906020019091905050612032565b005b3415610d8957600080fd5b610d9161227e565b6040518082815260200191505060405180910390f35b3415610db257600080fd5b610de7600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612284565b005b610df1612ba9565b6040805190810160405280600c81526020017f43727970746f5374616d70730000000000000000000000000000000000000000815250905090565b60001515600d60149054906101000a900460ff161515141515610e4e57600080fd5b610e583382612393565b1515610e6357600080fd5b816003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610fed5750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515610ff857600080fd5b611001816123ff565b50565b60006001905090565b60096020528060005260406000206000915054906101000a900460ff1681565b6110378382612393565b151561104257600080fd5b61104b8261250d565b151561105657600080fd5b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156110b257600080fd5b6110bd838383612546565b505050565b6000600b80549050905090565b60016020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61110c8382612393565b151561111757600080fd5b611121828261276d565b151561112c57600080fd5b6111358261250d565b151561114057600080fd5b61114b8383836127d9565b505050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156111ac57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156111e857600080fd5b80600c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561128857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156112c457600080fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561136457600080fd5b6000600d60146101000a81548160ff021916908315150217905550565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156113f557600080fd5b919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600080600460008481526020019081526020016000205490506000548110156114835761147c6114748260c8612a3d565b600e54612a78565b915061149c565b61149961149182607d612a3d565b600e54612a78565b91505b50919050565b600a6020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561153357600080fd5b81600e81905550600e549050919050565b61154c612bbd565b6000611556612bbd565b6000806000611564876113fa565b9450600085141561159657600060405180591061157e5750595b90808252806020026020018201604052509550611671565b846040518059106115a45750595b908082528060200260200182016040525093506115bf6110c2565b925060009150600090505b828111151561166d578673ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156116605780848381518110151561164957fe5b906020019060200201818152505081806001019250505b80806001019150506115ca565b8395505b5050505050919050565b60036020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6116b6612ba9565b6040805190810160405280600281526020017f4353000000000000000000000000000000000000000000000000000000000000815250905090565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561174d57600080fd5b816009600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b6040805190810160405280600c81526020017f43727970746f5374616d7073000000000000000000000000000000000000000081525081565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561181357600080fd5b81600f81905550600f549050919050565b61182e3382612393565b151561183957600080fd5b6118428261250d565b151561184d57600080fd5b60001515600d60149054906101000a900460ff16151514151561186f57600080fd5b61187a3383836127d9565b5050565b60085481565b600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061192d5750600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561193857600080fd5b6001600d60146101000a81548160ff021916908315150217905550565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119d957600080fd5b81601260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000803391506001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060001515600d60149054906101000a900460ff161515141515611aa257600080fd5b611aab8261250d565b1515611ab657600080fd5b611ac0828461276d565b1515611acb57600080fd5b611ad68183856127d9565b505050565b600060046000838152602001908152602001600020549050919050565b600080600080600b85815481101515611b0d57fe5b9060005260206000209001905080600001549350600460008681526020019081526020016000205492506001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150509193909250565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611bd357600080fd5b81601160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60056020528060005260406000206000915090505481565b60075481565b6000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611cba57600080fd5b816010819055506010549050919050565b60008060008060006001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169450339350600015156009600088815260200190815260200160002060009054906101000a900460ff161515141515611d3f57600080fd5b60001515600d60149054906101000a900460ff161515141515611d6157600080fd5b6004600087815260200190815260200160002054925082600654016006819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515611dbd57600080fd5b611dc68461250d565b1515611dd157600080fd5b823410151515611de057600080fd5b611df6611def84600e54612a3d565b6064612a78565b9150611e023484612a93565b9050600054831015611e4057611e24611e1c8460c8612a3d565b600e54612a78565b6004600088815260200190815260200160002081905550611e6e565b611e56611e4e84607d612a3d565b600e54612a78565b60046000888152602001908152602001600020819055505b611e798585886127d9565b3073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515611eef578473ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f193505050501515611eee57600080fd5b5b7f366e81d6675b75f581d1b7b428bc717efb1fa8b4bb542c1d26e15a1bc770baad8684600460008a8152602001908152602001600020548888604051808681526020018581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019550505050505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501515611ff157600080fd5b505050505050565b6040805190810160405280600281526020017f435300000000000000000000000000000000000000000000000000000000000081525081565b60008060008060001515600d60149054906101000a900460ff16151514151561205a57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166001600087815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156120c757600080fd5b6010546120d386611adb565b101515156120e057600080fd5b600015156009600087815260200190815260200160002060009054906101000a900460ff16151514151561211357600080fd5b6001600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16935061215285611adb565b925061216083600f54612a78565b915061218e601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686610e2c565b6121ba601160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1686611824565b60016009600087815260200190815260200160002060006101000a81548160ff021916908315150217905550600090505b600f5481101561220c576121ff8483612aac565b80806001019150506121eb565b7f129a1a37d679d74a7f8d9195e2631d0d7b8d2b66378e886c62e3fff8bbc5fb5c3386604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a15050505050565b60065481565b6000600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156122e257600080fd5b60001515600d60149054906101000a900460ff16151514151561230457600080fd5b829050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561236257600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b6000821015151561237257600080fd5b60086000815480929190600101919050555061238e8183612aac565b505050565b60006001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156124b257600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f1935050505015156124ad57600080fd5b61250a565b8073ffffffffffffffffffffffffffffffffffffffff166108fc3073ffffffffffffffffffffffffffffffffffffffff16319081150290604051600060405180830381858888f19350505050151561250957600080fd5b5b50565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614159050919050565b600115156009600083815260200190815260200160002060009054906101000a900460ff16151514151561257957600080fd5b60001515600d60149054906101000a900460ff16151514151561259b57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555060016005600083815260200190815260200160002054016005600083815260200190815260200160002081905550816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600760008154809291906001019190505550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561270357600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f279616fe922aaba6d9d399511c5ab3220a22455d2b3a970dcc395981e97d97c0836040518082815260200191505060405180910390a3505050565b60008273ffffffffffffffffffffffffffffffffffffffff166003600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b60001515600d60149054906101000a900460ff1615151415156127fb57600080fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190600101919050555060016005600083815260200190815260200160002054016005600083815260200190815260200160002081905550600760008154809291906001019190505550816001600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561299957600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506003600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b6000806000841415612a525760009150612a71565b8284029050828482811515612a6357fe5b04141515612a6d57fe5b8091505b5092915050565b6000808284811515612a8657fe5b0490508091505092915050565b6000828211151515612aa157fe5b818303905092915050565b612ab4612bd1565b60006020604051908101604052804281525091506001600b8054806001018281612ade9190612be5565b916000526020600020900160008590919091506000820151816000015550500390508063ffffffff1681141515612b1457600080fd5b7fd3e00f4b0273236b47634ed9ddd3096ae6bb94d572d60c6ee8f7ddbb1493184e8185604051808381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405180910390a1826004600083815260200190815260200160002081905550612ba3600085836127d9565b50505050565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b602060405190810160405280600081525090565b815481835581811511612c0c57818360005260206000209182019101612c0b9190612c11565b5b505050565b612c3591905b80821115612c315760008082016000905550600101612c17565b5090565b905600a165627a7a7230582019899bfb17e185c389368261f2da51f8b3e2582333ecce2bf0a6e5862baa8a3c0029",
    "constructor_argument": "",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2018-02-20\r\n*/\r\n\r\npragma solidity ^0.4.18; // solhint-disable-line\r\n\r\n\r\n\r\n\r\ncontract ERC721 {\r\n  // Required methods\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function balanceOf(address _owner) public view returns (uint256 balance);\r\n  function implementsERC721() public pure returns (bool);\r\n  function ownerOf(uint256 _tokenId) public view returns (address addr);\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function totalSupply() public view returns (uint256 total);\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 tokenId);\r\n  event Approval(address indexed owner, address indexed approved, uint256 tokenId);\r\n  event Dissolved(address  owner, uint256 tokenId);\r\n  event TransferDissolved(address indexed from, address indexed to, uint256 tokenId);\r\n  \r\n}\r\n\r\n\r\ncontract CryptoStamps is ERC721 {\r\n\r\n  \r\n  /*** EVENTS ***/\r\n\r\n  \r\n  /// @dev The Birth event is fired whenever a new stamp is created.\r\n  event stampBirth(uint256 tokenId,  address owner);\r\n\r\n  /// @dev The TokenSold event is fired whenever a stamp is sold.\r\n  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner);\r\n\r\n  /// @dev Transfer event as defined in current draft of ERC721. \r\n  ///  ownership is assigned, including births.\r\n  event Transfer(address from, address to, uint256 tokenId);\r\n\r\n\r\n\r\n  \r\n  /*** CONSTANTS ***/\r\n\r\n\r\n  /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n  string public constant NAME = \"CryptoStamps\"; // \r\n  string public constant SYMBOL = \"CS\"; // \r\n  \r\n  // @dev firstStepLimit for the change in rate of price increase\r\n  uint256 private firstStepLimit =  1.28 ether;\r\n  \r\n\r\n\r\n  \r\n  \r\n  /*** STORAGE ***/\r\n\r\n\r\n\r\n  /// @dev A mapping from stamp IDs to the address that owns them. All stamps have\r\n  ///  some valid owner address.\r\n  mapping (uint256 => address) public stampIndexToOwner;\r\n  \r\n\r\n  // @dev A mapping from owner address to count of stamps that address owns.\r\n  //  Used internally inside balanceOf() to resolve ownership count.\r\n  mapping (address => uint256) private ownershipTokenCount;\r\n\r\n  /// @dev A mapping from stamp IDs to an address that has been approved to call\r\n  ///  transferFrom(). Each stamp can only have one approved address for transfer\r\n  ///  at any time. A zero value means no approval is outstanding.\r\n  mapping (uint256 => address) public stampIndexToApproved;\r\n\r\n  // @dev A mapping from stamp IDs to the price of the token.\r\n  mapping (uint256 => uint256) private stampIndexToPrice;\r\n  \r\n  \r\n  \r\n  //@dev A mapping from stamp IDs to the number of transactions that the stamp has gone through. \r\n  mapping(uint256 => uint256) public stampIndextotransactions;\r\n  \r\n  //@dev To calculate the total ethers transacted in the game.\r\n  uint256 public totaletherstransacted;\r\n\r\n  //@dev To calculate the total transactions in the game.\r\n  uint256 public totaltransactions;\r\n  \r\n  //@dev To calculate the total stamps created.\r\n  uint256 public stampCreatedCount;\r\n  \r\n  \r\n  \r\n\r\n /*** STORAGE FOR DISSOLVED ***/\r\n \r\n \r\n //@dev A mapping from stamp IDs to their dissolved status.\r\n  //Initially all values are set to false by default\r\n  mapping (uint256 => bool) public stampIndextodissolved;\r\n \r\n \r\n //@dev A mapping from dissolved stamp IDs to their approval status.\r\n  //Initially all values are set to false by default\r\n mapping (uint256 => address) public dissolvedIndexToApproved;\r\n \r\n  \r\n  \r\n  \r\n  /*** DATATYPES ***/\r\n  \r\n  struct Stamp {\r\n    uint256 birthtime;\r\n  }\r\n  \r\n  \r\n\r\n  Stamp[] private stamps;\r\n\r\n \r\n \r\n \r\n \r\n  \r\n  \r\n  \r\n  /*** ACCESS MODIFIERS ***/\r\n  \r\n  /// @dev Access modifier for CEO-only functionality\r\n  \r\n  \r\n  // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n  address public ceoAddress;\r\n  address public cooAddress;\r\n  bool private paused;\r\n  \r\n  modifier onlyCEO() {\r\n    require(msg.sender == ceoAddress);\r\n    _;\r\n  }\r\n\r\n  /// @dev Access modifier for COO-only functionality\r\n  modifier onlyCOO() {\r\n    require(msg.sender == cooAddress);\r\n    _;\r\n  }\r\n\r\n  /// Access modifier for contract owner only functionality\r\n  modifier onlyCLevel() {\r\n    require(\r\n      msg.sender == ceoAddress ||\r\n      msg.sender == cooAddress\r\n    );\r\n    _;\r\n  }\r\n\r\n  \r\n  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n  /// @param _newCEO The address of the new CEO\r\n  \r\n  function setCEO(address _newCEO) public onlyCEO {\r\n    require(_newCEO != address(0));\r\n\r\n    ceoAddress = _newCEO;\r\n  }\r\n\r\n \r\n \r\n  /// @dev Assigns a new address to act as the COO. Only available to the current COO.\r\n  /// @param _newCOO The address of the new COO\r\n  \r\n  function setCOO(address _newCOO) public onlyCEO {\r\n    require(_newCOO != address(0));\r\n\r\n    cooAddress = _newCOO;\r\n  }\r\n  \r\n  \r\n  \r\n  /*** CONSTRUCTOR ***/\r\n  function CryptoStamps() public {\r\n    ceoAddress = msg.sender;\r\n    cooAddress = msg.sender;\r\n    paused = false;\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  \r\n  /*** PUBLIC FUNCTIONS ***/\r\n  /// @notice Grant another address the right to transfer stamp via takeOwnership() and transferFrom().\r\n  \r\n  ///  clear all approvals.\r\n  \r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  //@dev to pause and unpause the contract in emergency situations\r\n  function pausecontract() public onlyCLevel\r\n  {\r\n      paused = true;\r\n  }\r\n  \r\n  \r\n  \r\n  function unpausecontract() public onlyCEO\r\n  {\r\n      paused = false;\r\n      \r\n  }\r\n  \r\n  \r\n  \r\n  function approve(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    // Caller must own token.\r\n    require(paused == false);\r\n    require(_owns(msg.sender, _tokenId));\r\n\r\n    stampIndexToApproved[_tokenId] = _to;\r\n\r\n    Approval(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  \r\n  \r\n  /// For querying balance of a particular account\r\n  /// @param _owner The address for balance query\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  \r\n  function balanceOf(address _owner) public view returns (uint256 balance) {\r\n    return ownershipTokenCount[_owner];\r\n  }\r\n\r\n  \r\n  \r\n  //@dev To create a stamp.\r\n  function createStamp(address _owner,  uint256 _price) public onlyCOO {\r\n    \r\n    require(paused == false);\r\n    address stampOwner = _owner;\r\n    if (stampOwner == address(0)) {\r\n      stampOwner = cooAddress;\r\n    }\r\n\r\n    require(_price >= 0);\r\n\r\n    stampCreatedCount++;\r\n    _createStamp( stampOwner, _price);\r\n  }\r\n\r\n  \r\n \r\n  //@dev To get stamp information\r\n  \r\n  function getStamp(uint256 _tokenId) public view returns (\r\n    uint256 birthtimestamp,\r\n    uint256 sellingPrice,\r\n    address owner\r\n  ) {\r\n    Stamp storage stamp = stamps[_tokenId];\r\n    birthtimestamp = stamp.birthtime;\r\n    sellingPrice = stampIndexToPrice[_tokenId];\r\n    owner = stampIndexToOwner[_tokenId];\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  function implementsERC721() public pure returns (bool) {\r\n    return true;\r\n  }\r\n\r\n  \r\n  \r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  \r\n  function name() public pure returns (string) {\r\n    return NAME;\r\n  }\r\n\r\n  \r\n  \r\n  /// For querying owner of stamp\r\n  /// @param _tokenId The tokenID for owner inquiry\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  function ownerOf(uint256 _tokenId)\r\n    public\r\n    view\r\n    returns (address owner)\r\n  {\r\n    owner = stampIndexToOwner[_tokenId];\r\n    require(owner != address(0));\r\n  }\r\n\r\n  \r\n  \r\n  //@dev To payout to an address\r\n  \r\n  function payout(address _to) public onlyCLevel {\r\n    _payout(_to);\r\n  }\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  \r\n  //@ To set the cut received by smart contract\r\n  uint256 private cut;\r\n  \r\n  \r\n  \r\n  \r\n  function setcut(uint256 cutowner) onlyCEO public returns(uint256)\r\n  { \r\n      cut = cutowner;\r\n      return(cut);\r\n      \r\n  }\r\n\r\n  \r\n  \r\n  \r\n  \r\n  // Allows someone to send ether and obtain the token\r\n  \r\n  function purchase(uint256 _tokenId) public payable {\r\n    address oldOwner = stampIndexToOwner[_tokenId];\r\n    address newOwner = msg.sender;\r\n    require(stampIndextodissolved[_tokenId] == false);\r\n    require(paused == false);\r\n    uint256 sellingPrice = stampIndexToPrice[_tokenId];\r\n    totaletherstransacted = totaletherstransacted + sellingPrice;\r\n\r\n    // Making sure token owner is not sending to self\r\n    require(oldOwner != newOwner);\r\n\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure sent amount is greater than or equal to the sellingPrice\r\n    require(msg.value >= sellingPrice);\r\n\r\n    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, cut), 100));\r\n    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);\r\n\r\n    // Update prices\r\n    if (sellingPrice < firstStepLimit) {\r\n      // first stage\r\n      stampIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), cut);\r\n    } \r\n    else {\r\n      \r\n      stampIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 125), cut);\r\n    }\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n\r\n    // Pay previous tokenOwner if owner is not contract\r\n    if (oldOwner != address(this)) {\r\n      oldOwner.transfer(payment); //(1-0.06)\r\n    }\r\n\r\n    TokenSold(_tokenId, sellingPrice, stampIndexToPrice[_tokenId], oldOwner, newOwner);\r\n\r\n    msg.sender.transfer(purchaseExcess);\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  //@dev To get price of a stamp\r\n  function priceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    return stampIndexToPrice[_tokenId];\r\n  }\r\n\r\n  \r\n  \r\n  //@dev To get the next price of a stamp\r\n  function nextpriceOf(uint256 _tokenId) public view returns (uint256 price) {\r\n    uint256 currentsellingPrice = stampIndexToPrice[_tokenId];\r\n    \r\n    if (currentsellingPrice < firstStepLimit) {\r\n      // first stage\r\n      return SafeMath.div(SafeMath.mul(currentsellingPrice, 200), cut);\r\n    } \r\n    else {\r\n      \r\n      return SafeMath.div(SafeMath.mul(currentsellingPrice, 125), cut);\r\n    }\r\n    \r\n  }\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  function symbol() public pure returns (string) {\r\n    return SYMBOL;\r\n  }\r\n\r\n  \r\n  /// @notice Allow pre-approved user to take ownership of a token\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  function takeOwnership(uint256 _tokenId) public {\r\n    address newOwner = msg.sender;\r\n    address oldOwner = stampIndexToOwner[_tokenId];\r\n    require(paused == false);\r\n    // Safety check to prevent against an unexpected 0x0 default.\r\n    require(_addressNotNull(newOwner));\r\n\r\n    // Making sure transfer is approved\r\n    require(_approved(newOwner, _tokenId));\r\n\r\n    _transfer(oldOwner, newOwner, _tokenId);\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  /// @param _owner The owner of the stamp\r\n  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n  ///  expensive (it walks the entire Stamps array looking for stamps belonging to owner),\r\n  ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n  ///  not contract-to-contract calls.\r\n  \r\n  \r\n  \r\n  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {\r\n    uint256 tokenCount = balanceOf(_owner);\r\n    if (tokenCount == 0) {\r\n        // Return an empty array\r\n      return new uint256[](0);\r\n    } else {\r\n      uint256[] memory result = new uint256[](tokenCount);\r\n      uint256 totalStamps = totalSupply();\r\n      uint256 resultIndex = 0;\r\n\r\n      uint256 stampId;\r\n      for (stampId = 0; stampId <= totalStamps; stampId++) {\r\n        if (stampIndexToOwner[stampId] == _owner) {\r\n          result[resultIndex] = stampId;\r\n          resultIndex++;\r\n        }\r\n      }\r\n      return result;\r\n    }\r\n  }\r\n\r\n  \r\n  \r\n  /// For querying totalSupply of token\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  function totalSupply() public view returns (uint256 total) {\r\n    return stamps.length;\r\n  }\r\n\r\n  /// Owner initates the transfer of the token to another account\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  function transfer(\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(msg.sender, _tokenId));\r\n    require(_addressNotNull(_to));\r\n    require(paused == false);\r\n\r\n    _transfer(msg.sender, _to, _tokenId);\r\n  }\r\n\r\n  /// Third-party initiates transfer of token from address _from to address _to\r\n  /// @param _from The address for the token to be transferred from.\r\n  /// @param _to The address for the token to be transferred to.\r\n  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.\r\n  /// @dev Required for ERC-721 compliance.\r\n  \r\n  \r\n  \r\n  function transferFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_approved(_to, _tokenId));\r\n    require(_addressNotNull(_to));\r\n\r\n    _transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n  \r\n  //@dev To set the number in which the stamp gets dissolved into.\r\n  uint256 private num;\r\n  \r\n  \r\n  \r\n  function setnumber(uint256 number) onlyCEO public returns(uint256)\r\n  {\r\n      num = number;\r\n      return num;\r\n  }\r\n  \r\n  \r\n  //@dev To set the price at which dissolution starts.\r\n   uint256 private priceatdissolution;\r\n  \r\n  \r\n  \r\n  function setdissolveprice(uint256 number) onlyCEO public returns(uint256)\r\n  {\r\n      priceatdissolution = number;\r\n      return priceatdissolution;\r\n  }\r\n  \r\n  \r\n  //@ To set the address to which dissolved stamp is sent.\r\n  address private addressatdissolution;\r\n  \r\n  \r\n  \r\n  function setdissolveaddress(address dissolveaddress) onlyCEO public returns(address)\r\n  {\r\n      addressatdissolution = dissolveaddress;\r\n      return addressatdissolution;\r\n  }\r\n  \r\n  \r\n  //@dev for emergency purposes\r\n  function controlstampdissolution(bool control,uint256 _tokenId) onlyCEO public\r\n  {\r\n      stampIndextodissolved[_tokenId] = control;\r\n      \r\n  }\r\n  \r\n  \r\n  //@dev Dissolve function which mines new stamps.\r\n  function dissolve(uint256 _tokenId) public\r\n  {   require(paused == false);\r\n      require(stampIndexToOwner[_tokenId] == msg.sender);\r\n      require(priceOf(_tokenId)>= priceatdissolution );\r\n      require(stampIndextodissolved[_tokenId] == false);\r\n      address reciever = stampIndexToOwner[_tokenId];\r\n      \r\n      uint256 price = priceOf(_tokenId);\r\n      uint256 newprice = SafeMath.div(price,num);\r\n      \r\n      approve(addressatdissolution, _tokenId);\r\n      transfer(addressatdissolution,_tokenId);\r\n      stampIndextodissolved[_tokenId] = true;\r\n      \r\n      uint256 i;\r\n      for(i = 0; i<num; i++)\r\n      {\r\n      _createStamp( reciever, newprice);\r\n          \r\n      }\r\n      Dissolved(msg.sender,_tokenId);\r\n    \r\n  }\r\n  \r\n //@dev The contract which is used to interact with dissolved stamps.\r\n address private dissolvedcontract; \r\n \r\n \r\n \r\n \r\n /*** PUBLIC FUNCTIONS FOR DISSOLVED STAMPS ***/\r\n \r\n \r\n function setdissolvedcontract(address dissolvedaddress) onlyCEO public returns(address)\r\n {\r\n     \r\n     dissolvedcontract = dissolvedaddress;\r\n     return dissolvedcontract;\r\n }\r\n \r\n //@dev To transfer dissolved stamp. Requires the contract assigned for dissolution management to send message.\r\n function transferdissolvedFrom(\r\n    address _from,\r\n    address _to,\r\n    uint256 _tokenId\r\n  ) public {\r\n    require(_owns(_from, _tokenId));\r\n    require(_addressNotNull(_to));\r\n    require(msg.sender == dissolvedcontract);\r\n\r\n    _transferdissolved(_from, _to, _tokenId);\r\n  }\r\n  \r\n  \r\n\r\n\r\n  \r\n  \r\n  \r\n  \r\n  \r\n  /*** PRIVATE FUNCTIONS ***/\r\n  /// Safety check on _to address to prevent against an unexpected 0x0 default.\r\n  function _addressNotNull(address _to) private pure returns (bool) {\r\n    return _to != address(0);\r\n  }\r\n\r\n  \r\n  \r\n  /// For checking approval of transfer for address _to\r\n  \r\n  \r\n  \r\n  function _approved(address _to, uint256 _tokenId) private view returns (bool) {\r\n    return stampIndexToApproved[_tokenId] == _to;\r\n  }\r\n\r\n  \r\n  /// For creating Stamp\r\n  \r\n  \r\n  function _createStamp(address _owner, uint256 _price) private {\r\n    Stamp memory _stamp = Stamp({\r\n      birthtime: now\r\n    });\r\n    uint256 newStampId = stamps.push(_stamp) - 1;\r\n\r\n    // It's probably never going to happen, 4 billion tokens are A LOT, but\r\n    // let's just be 100% sure we never let this happen.\r\n    require(newStampId == uint256(uint32(newStampId)));\r\n\r\n    stampBirth(newStampId, _owner);\r\n\r\n    stampIndexToPrice[newStampId] = _price;\r\n\r\n    // This will assign ownership, and also emit the Transfer event as\r\n    // per ERC721 draft\r\n    _transfer(address(0), _owner, newStampId);\r\n  }\r\n\r\n  \r\n  \r\n  /// Check for token ownership\r\n  \r\n  \r\n  \r\n  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {\r\n    return claimant == stampIndexToOwner[_tokenId];\r\n  }\r\n\r\n  \r\n  \r\n  /// For paying out balance on contract\r\n  \r\n  \r\n  \r\n  function _payout(address _to) private {\r\n    if (_to == address(0)) {\r\n      ceoAddress.transfer(this.balance);\r\n    } else {\r\n      _to.transfer(this.balance);\r\n    }\r\n  }\r\n\r\n  \r\n  \r\n  \r\n  /// @dev Assigns ownership of a specific Stamp to an address.\r\n  \r\n  \r\n  \r\n  function _transfer(address _from, address _to, uint256 _tokenId) private {\r\n   \r\n    require(paused == false);\r\n    ownershipTokenCount[_to]++;\r\n    stampIndextotransactions[_tokenId] = stampIndextotransactions[_tokenId] + 1;\r\n    totaltransactions++;\r\n    //transfer ownership\r\n    stampIndexToOwner[_tokenId] = _to;\r\n    \r\n\r\n    // When creating new stamps _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      delete stampIndexToApproved[_tokenId];\r\n    }\r\n\r\n    // Emit the transfer event.\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n  \r\n  \r\n  \r\n/*** PRIVATE FUNCTIONS FOR DISSOLVED STAMPS***/  \r\n  \r\n  \r\n  \r\n  //@ To transfer a dissolved stamp.\r\n  function _transferdissolved(address _from, address _to, uint256 _tokenId) private {\r\n    \r\n    require(stampIndextodissolved[_tokenId] == true);\r\n    require(paused == false);\r\n    ownershipTokenCount[_to]++;\r\n    stampIndextotransactions[_tokenId] = stampIndextotransactions[_tokenId] + 1;\r\n    //transfer ownership\r\n    stampIndexToOwner[_tokenId] = _to;\r\n    totaltransactions++;\r\n    \r\n\r\n    // When creating new stamp _from is 0x0, but we can't account that address.\r\n    if (_from != address(0)) {\r\n      ownershipTokenCount[_from]--;\r\n      // clear any previously approved ownership exchange\r\n      \r\n    }\r\n\r\n    // Emit the transfer event.\r\n    TransferDissolved(_from, _to, _tokenId);\r\n  }\r\n  \r\n  \r\n  \r\n}\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}",
    "data_type": "ERC721",
    "id": "CryptoStamps_0xa181b8c9f6b43b8252c6c9826cf5feba362b542e",
    "file": "./Contract_source_Code/CryptoStamps_0xa181b8c9f6b43b8252c6c9826cf5feba362b542e.sol"
}