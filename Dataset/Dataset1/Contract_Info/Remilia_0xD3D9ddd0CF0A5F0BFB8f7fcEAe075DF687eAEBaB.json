{
    "name": "Remilia",
    "address": "0xD3D9ddd0CF0A5F0BFB8f7fcEAe075DF687eAEBaB",
    "Compiler Version": "v0.8.16+commit.07a7930e",
    "Optimization Enabled": "No with 200 runs",
    "Other Settings": "default evmVersion, None license",
    "creation_bytecode": "60806040523480156200001157600080fd5b506040518060400160405280600881526020017f54455354204e46540000000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f544553540000000000000000000000000000000000000000000000000000000081525081600290816200008f919062000596565b508060039081620000a1919062000596565b50620000b26200024560201b60201c565b6000819055505050620000da620000ce6200024e60201b60201c565b6200025660201b60201c565b6040518060200160405280600081525060106001019081620000fd919062000596565b50731f285dd528cf4cde3081c6d48d9df7a4f8fa9383601060020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612710601060020160146101000a81548163ffffffff021916908363ffffffff1602179055506103e8601060020160186101000a81548163ffffffff021916908363ffffffff1602179055506105dc6010600201601c6101000a81548163ffffffff021916908363ffffffff1602179055506101f4601060030160006101000a81548163ffffffff021916908363ffffffff1602179055506000600c60006101000a81548160ff0219169083151502179055506001600c60016101000a81548160ff0219169083151502179055506001600e60006101000a81548160ff0219169083151502179055506200067d565b60006001905090565b600033905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200039e57607f821691505b602082108103620003b457620003b362000356565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200041e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620003df565b6200042a8683620003df565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000477620004716200046b8462000442565b6200044c565b62000442565b9050919050565b6000819050919050565b620004938362000456565b620004ab620004a2826200047e565b848454620003ec565b825550505050565b600090565b620004c2620004b3565b620004cf81848462000488565b505050565b5b81811015620004f757620004eb600082620004b8565b600181019050620004d5565b5050565b601f82111562000546576200051081620003ba565b6200051b84620003cf565b810160208510156200052b578190505b620005436200053a85620003cf565b830182620004d4565b50505b505050565b600082821c905092915050565b60006200056b600019846008026200054b565b1980831691505092915050565b600062000586838362000558565b9150826002028217905092915050565b620005a1826200031c565b67ffffffffffffffff811115620005bd57620005bc62000327565b5b620005c9825462000385565b620005d6828285620004fb565b600060209050601f8311600181146200060e5760008415620005f9578287015190505b62000605858262000578565b86555062000675565b601f1984166200061e86620003ba565b60005b82811015620006485784890151825560018201915060208501945060208101905062000621565b8683101562000668578489015162000664601f89168262000558565b8355505b6001600288020188555050505b505050505050565b6157cc806200068d6000396000f3fe60806040526004361061020f5760003560e01c8063715018a611610118578063b88d4fde116100a0578063e072e16d1161006f578063e072e16d14610783578063e4963dd5146107ae578063e985e9c5146107d7578063f2fde38b14610814578063fe2c7fee1461083d5761020f565b8063b88d4fde146106c8578063bedcf003146106f1578063c87b56dd1461071d578063de6cd0db1461075a5761020f565b8063978a4509116100e7578063978a4509146105e3578063a15947c414610620578063a22cb46514610649578063a475b5dd14610672578063a5aa4aa4146106895761020f565b8063715018a61461054557806379502c551461055c5780638da5cb5b1461058d57806395d89b41146105b85761020f565b80633ccfd60b1161019b57806355f804b31161016a57806355f804b31461043c5780636352211e14610465578063690ed4d3146104a25780636f5ba15a146104df57806370a08231146105085761020f565b80633ccfd60b146103b557806342842e0e146103cc5780634a21a2df146103f557806351830227146104115761020f565b80630f7309e8116101e25780630f7309e8146102e2578063109695231461030d57806318160ddd1461033657806323b872dd146103615780632cb020e51461038a5761020f565b806301ffc9a71461021457806306fdde0314610251578063081812fc1461027c578063095ea7b3146102b9575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190613d14565b610866565b6040516102489190613d5c565b60405180910390f35b34801561025d57600080fd5b506102666108f8565b6040516102739190613e07565b60405180910390f35b34801561028857600080fd5b506102a3600480360381019061029e9190613e5f565b61098a565b6040516102b09190613ecd565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190613f14565b610a09565b005b3480156102ee57600080fd5b506102f7610b4d565b6040516103049190613e07565b60405180910390f35b34801561031957600080fd5b50610334600480360381019061032f9190614089565b610bdb565b005b34801561034257600080fd5b5061034b610cb0565b60405161035891906140e1565b60405180910390f35b34801561036d57600080fd5b50610388600480360381019061038391906140fc565b610cc7565b005b34801561039657600080fd5b5061039f610fe9565b6040516103ac9190613d5c565b60405180910390f35b3480156103c157600080fd5b506103ca610ffc565b005b3480156103d857600080fd5b506103f360048036038101906103ee91906140fc565b611527565b005b61040f600480360381019061040a91906141d3565b611547565b005b34801561041d57600080fd5b50610426611e9d565b6040516104339190613d5c565b60405180910390f35b34801561044857600080fd5b50610463600480360381019061045e9190614089565b611eb0565b005b34801561047157600080fd5b5061048c60048036038101906104879190613e5f565b611f88565b6040516104999190613ecd565b60405180910390f35b3480156104ae57600080fd5b506104c960048036038101906104c491906142bf565b611f9a565b6040516104d691906140e1565b60405180910390f35b3480156104eb57600080fd5b5061050660048036038101906105019190614355565b61206e565b005b34801561051457600080fd5b5061052f600480360381019061052a91906143a2565b61218d565b60405161053c91906140e1565b60405180910390f35b34801561055157600080fd5b5061055a612245565b005b34801561056857600080fd5b506105716122cd565b60405161058497969594939291906143ee565b60405180910390f35b34801561059957600080fd5b506105a261246d565b6040516105af9190613ecd565b60405180910390f35b3480156105c457600080fd5b506105cd612497565b6040516105da9190613e07565b60405180910390f35b3480156105ef57600080fd5b5061060a600480360381019061060591906143a2565b612529565b604051610617919061447a565b60405180910390f35b34801561062c57600080fd5b5061064760048036038101906106429190614089565b612558565b005b34801561065557600080fd5b50610670600480360381019061066b91906144c1565b612675565b005b34801561067e57600080fd5b506106876127ec565b005b34801561069557600080fd5b506106b060048036038101906106ab9190614537565b612885565b6040516106bf93929190614587565b60405180910390f35b3480156106d457600080fd5b506106ef60048036038101906106ea919061465f565b6128f3565b005b3480156106fd57600080fd5b50610706612966565b6040516107149291906146e2565b60405180910390f35b34801561072957600080fd5b50610744600480360381019061073f9190613e5f565b6129b0565b6040516107519190613e07565b60405180910390f35b34801561076657600080fd5b50610781600480360381019061077c9190614089565b612aa6565b005b34801561078f57600080fd5b50610798612bc3565b6040516107a59190613d5c565b60405180910390f35b3480156107ba57600080fd5b506107d560048036038101906107d0919061472a565b612bd6565b005b3480156107e357600080fd5b506107fe60048036038101906107f9919061477d565b612ca8565b60405161080b9190613d5c565b60405180910390f35b34801561082057600080fd5b5061083b600480360381019061083691906143a2565b612d3c565b005b34801561084957600080fd5b50610864600480360381019061085f9190614089565b612e33565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108c157506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108f15750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606060028054610907906147ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610933906147ec565b80156109805780601f1061095557610100808354040283529160200191610980565b820191906000526020600020905b81548152906001019060200180831161096357829003601f168201915b5050505050905090565b600061099582612ec5565b6109cb576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a1482611f88565b90508073ffffffffffffffffffffffffffffffffffffffff16610a35612f24565b73ffffffffffffffffffffffffffffffffffffffff1614610a9857610a6181610a5c612f24565b612ca8565b610a97576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600d8054610b5a906147ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610b86906147ec565b8015610bd35780601f10610ba857610100808354040283529160200191610bd3565b820191906000526020600020905b815481529060010190602001808311610bb657829003601f168201915b505050505081565b610be3612f2c565b73ffffffffffffffffffffffffffffffffffffffff16610c0161246d565b73ffffffffffffffffffffffffffffffffffffffff1614610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e90614869565b60405180910390fd5b600e60009054906101000a900460ff16610c9d576040517f249fab5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600d9081610cac9190614a35565b5050565b6000610cba612f34565b6001546000540303905090565b6000610cd282612f3d565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d39576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610d4584613009565b91509150610d5b8187610d56612f24565b613030565b610da757610d7086610d6b612f24565b612ca8565b610da6576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610e0d576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e1a8686866001613074565b8015610e2557600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610ef385610ecf88888761307a565b7c0200000000000000000000000000000000000000000000000000000000176130a2565b600460008681526020019081526020016000208190555060007c0200000000000000000000000000000000000000000000000000000000841603610f795760006001850190506000600460008381526020019081526020016000205403610f77576000548114610f76578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610fe186868660016130cd565b505050505050565b600e60009054906101000a900460ff1681565b600061100661246d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061107e57507386b82972282dd22348374bc63fd21620f7ed847b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156112fe576000600f6040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050905061113061246d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361122f5780600001519150604051806040016040528060006fffffffffffffffffffffffffffffffff16815260200182602001516fffffffffffffffffffffffffffffffff16815250600f60008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050506112f8565b80602001519150604051806040016040528082600001516fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815250600f60008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050505b506113d4565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046fffffffffffffffffffffffffffffffff1690506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6000816fffffffffffffffffffffffffffffffff1603611420576040517f8735c8fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1660405161145890614b38565b60006040518083038185875af1925050503d8060008114611495576040519150601f19603f3d011682016040523d82523d6000602084013e61149a565b606091505b50509050806114d5576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f8bb044d1bb6a7b421504ef7f7045b22152b504f683e8c1bcbc8222af46cb68b38360405161151b919061447a565b60405180910390a25050565b611542838383604051806020016040528060008152506128f3565b505050565b600060096000876000013581526020019081526020016000206040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146117b1577386b82972282dd22348374bc63fd21620f7ed847b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116cf57506116a061246d565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b8061170557503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561173c576040517f233067ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117b08484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050601060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166130d3565b5b6000816040015167ffffffffffffffff16036117f9576040517feb56075600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61180a86611805612f2c565b613180565b611840576040517fd838648f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015167ffffffffffffffff16421015611888576040517f1d23a74200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601060020160149054906101000a900463ffffffff1663ffffffff16816040015167ffffffffffffffff16101561196e57600085600a60006118c8612f2c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089600001358152602001908152602001600020546119229190614b7c565b9050816040015167ffffffffffffffff1681111561196c576040517f15fcbc9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b601060020160189054906101000a900463ffffffff1663ffffffff168511156119c3576040517f7a7e96df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601060020160149054906101000a900463ffffffff1663ffffffff16856119e8613292565b6119f29190614b7c565b1115611a2a576040517f8a164f6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611a3a826000015187611f9a565b905080341015611a76576040517ff244866f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80341115611ab0576040517f6c9089c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611aba33876132a5565b601060020160149054906101000a900463ffffffff1663ffffffff16826040015167ffffffffffffffff161015611b5e5785600a6000611af8612f2c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896000013581526020019081526020016000206000828254611b569190614b7c565b925050819055505b600034905060008073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611cbd576127106010600201601c9054906101000a900463ffffffff1663ffffffff1683611bc29190614bb0565b611bcc9190614c29565b905080600b60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282829054906101000a90046fffffffffffffffffffffffffffffffff16611c389190614c5a565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508673ffffffffffffffffffffffffffffffffffffffff167f5e627b23e8981317689f5541931b5e9805545e7601aa2c86e84217555368dc0382604051611cb4919061447a565b60405180910390a25b6000600f6040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090506000612710601060030160009054906101000a900463ffffffff1663ffffffff1685611d8e9190614bb0565b611d989190614c29565b90506000818486611da99190614c9e565b611db39190614c9e565b90506040518060400160405280828560000151611dd09190614c5a565b6fffffffffffffffffffffffffffffffff168152602001838560200151611df79190614c5a565b6fffffffffffffffffffffffffffffffff16815250600f60008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050505050505050505050505050565b600c60009054906101000a900460ff1681565b611eb8612f2c565b73ffffffffffffffffffffffffffffffffffffffff16611ed661246d565b73ffffffffffffffffffffffffffffffffffffffff1614611f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2390614869565b60405180910390fd5b600c60019054906101000a900460ff16611f72576040517f249fab5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060106001019081611f849190614a35565b5050565b6000611f9382612f3d565b9050919050565b60008082846fffffffffffffffffffffffffffffffff16611fbb9190614ce2565b905060648310611fe657600a600882611fd49190614ce2565b611fde9190614d3c565b915050612068565b601e8310612011576127106121db82611fff9190614ce2565b6120099190614d3c565b915050612068565b600a831061203a57600a6009826120289190614ce2565b6120329190614d3c565b915050612068565b600583106120635760646060826120519190614ce2565b61205b9190614d3c565b915050612068565b809150505b92915050565b612076612f2c565b73ffffffffffffffffffffffffffffffffffffffff1661209461246d565b73ffffffffffffffffffffffffffffffffffffffff16146120ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e190614869565b60405180910390fd5b60005b82829050811015612188573683838381811061210c5761210b614d6d565b5b905060a002019050806040016009600083600001358152602001908152602001600020818161213b9190614fdc565b905050806020013581600001357fe9a0c17645ed78ccc9996259f00297ffc75e6b9d22cd605ccc9992cc8ca3f4c160405160405180910390a350808061218090614fea565b9150506120ed565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121f4576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b61224d612f2c565b73ffffffffffffffffffffffffffffffffffffffff1661226b61246d565b73ffffffffffffffffffffffffffffffffffffffff16146122c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b890614869565b60405180910390fd5b6122cb60006132c3565b565b60108060000180546122de906147ec565b80601f016020809104026020016040519081016040528092919081815260200182805461230a906147ec565b80156123575780601f1061232c57610100808354040283529160200191612357565b820191906000526020600020905b81548152906001019060200180831161233a57829003601f168201915b50505050509080600101805461236c906147ec565b80601f0160208091040260200160405190810160405280929190818152602001828054612398906147ec565b80156123e55780601f106123ba576101008083540402835291602001916123e5565b820191906000526020600020905b8154815290600101906020018083116123c857829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900463ffffffff16908060030160009054906101000a900463ffffffff16905087565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600380546124a6906147ec565b80601f01602080910402602001604051908101604052809291908181526020018280546124d2906147ec565b801561251f5780601f106124f45761010080835404028352916020019161251f565b820191906000526020600020905b81548152906001019060200180831161250257829003601f168201915b5050505050905090565b600b6020528060005260406000206000915054906101000a90046fffffffffffffffffffffffffffffffff1681565b612560612f2c565b73ffffffffffffffffffffffffffffffffffffffff1661257e61246d565b73ffffffffffffffffffffffffffffffffffffffff16146125d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125cb90614869565b60405180910390fd5b6040516020016125e390615089565b604051602081830303815290604052805190602001208160405160200161260a91906150cf565b6040516020818303038152906040528051906020012014612657576040517f5ee88f9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60006101000a81548160ff02191690831515021790555050565b61267d612f24565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036126e1576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600760006126ee612f24565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661279b612f24565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516127e09190613d5c565b60405180910390a35050565b6127f4612f2c565b73ffffffffffffffffffffffffffffffffffffffff1661281261246d565b73ffffffffffffffffffffffffffffffffffffffff1614612868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285f90614869565b60405180910390fd5b6001600c60006101000a81548160ff021916908315150217905550565b60096020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a900467ffffffffffffffff16908060000160189054906101000a900467ffffffffffffffff16905083565b6128fe848484610cc7565b60008373ffffffffffffffffffffffffffffffffffffffff163b146129605761292984848484613389565b61295f576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b600f8060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60606129bb82612ec5565b6129f1576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60001515600c60009054906101000a900460ff16151503612a41576010600001612a1a836134d9565b604051602001612a2b929190615169565b6040516020818303038152906040529050612aa1565b600060106001018054612a53906147ec565b905003612a6f5760405180602001604052806000815250612a9e565b6010600101612a7d836134d9565b604051602001612a8e929190615169565b6040516020818303038152906040525b90505b919050565b612aae612f2c565b73ffffffffffffffffffffffffffffffffffffffff16612acc61246d565b73ffffffffffffffffffffffffffffffffffffffff1614612b22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1990614869565b60405180910390fd5b604051602001612b3190615089565b6040516020818303038152906040528051906020012081604051602001612b5891906150cf565b6040516020818303038152906040528051906020012014612ba5576040517f5ee88f9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c60016101000a81548160ff02191690831515021790555050565b600c60019054906101000a900460ff1681565b612bde612f2c565b73ffffffffffffffffffffffffffffffffffffffff16612bfc61246d565b73ffffffffffffffffffffffffffffffffffffffff1614612c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4990614869565b60405180910390fd5b80600960008581526020019081526020016000208181612c729190614fdc565b90505081837fe9a0c17645ed78ccc9996259f00297ffc75e6b9d22cd605ccc9992cc8ca3f4c160405160405180910390a3505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612d44612f2c565b73ffffffffffffffffffffffffffffffffffffffff16612d6261246d565b73ffffffffffffffffffffffffffffffffffffffff1614612db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612daf90614869565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1e906151ff565b60405180910390fd5b612e30816132c3565b50565b612e3b612f2c565b73ffffffffffffffffffffffffffffffffffffffff16612e5961246d565b73ffffffffffffffffffffffffffffffffffffffff1614612eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea690614869565b60405180910390fd5b8060106000019081612ec19190614a35565b5050565b600081612ed0612f34565b11158015612edf575060005482105b8015612f1d575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b600033905090565b60006001905090565b60008082905080612f4c612f34565b11612fd257600054811015612fd15760006004600083815260200190815260200160002054905060007c0100000000000000000000000000000000000000000000000000000000821603612fcf575b60008103612fc5576004600083600190039350838152602001908152602001600020549050612f9b565b8092505050613004565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8613091868684613639565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b6000613104846040516020016130e99190615267565b60405160208183030381529060405280519060200120613642565b905060006131128285613672565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614613179576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b600080836000013503613196576001905061328c565b6000826040516020016131a99190615267565b60405160208183030381529060405280519060200120905060005b8480602001906131d49190615291565b90508110156132805760008580602001906131ef9190615291565b83818110613200576131ff614d6d565b5b905060200201359050808311613240578281604051602001613223929190615315565b60405160208183030381529060405280519060200120925061326c565b8083604051602001613253929190615315565b6040516020818303038152906040528051906020012092505b50808061327890614fea565b9150506131c4565b50836000013581149150505b92915050565b600061329c612f34565b60005403905090565b6132bf828260405180602001604052806000815250613699565b5050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a026133af612f24565b8786866040518563ffffffff1660e01b81526004016133d19493929190615396565b6020604051808303816000875af192505050801561340d57506040513d601f19601f8201168201806040525081019061340a91906153f7565b60015b613486573d806000811461343d576040519150601f19603f3d011682016040523d82523d6000602084013e613442565b606091505b50600081510361347e576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060008203613520576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613634565b600082905060005b6000821461355257808061353b90614fea565b915050600a8261354b9190614d3c565b9150613528565b60008167ffffffffffffffff81111561356e5761356d613f5e565b5b6040519080825280601f01601f1916602001820160405280156135a05781602001600182028036833780820191505090505b5090505b6000851461362d576001826135b99190615424565b9150600a856135c89190615458565b60306135d49190614b7c565b60f81b8183815181106135ea576135e9614d6d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856136269190614d3c565b94506135a4565b8093505050505b919050565b60009392505050565b60008160405160200161365591906154d5565b604051602081830303815290604052805190602001209050919050565b60008060006136818585613736565b9150915061368e816137b7565b819250505092915050565b6136a38383613983565b60008373ffffffffffffffffffffffffffffffffffffffff163b1461373157600080549050600083820390505b6136e36000868380600101945086613389565b613719576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181106136d057816000541461372e57600080fd5b50505b505050565b60008060418351036137775760008060006020860151925060408601519150606086015160001a905061376b87828585613b3e565b945094505050506137b0565b60408351036137a757600080602085015191506040850151905061379c868383613c4a565b9350935050506137b0565b60006002915091505b9250929050565b600060048111156137cb576137ca6154fb565b5b8160048111156137de576137dd6154fb565b5b031561398057600160048111156137f8576137f76154fb565b5b81600481111561380b5761380a6154fb565b5b0361384b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161384290615576565b60405180910390fd5b6002600481111561385f5761385e6154fb565b5b816004811115613872576138716154fb565b5b036138b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138a9906155e2565b60405180910390fd5b600360048111156138c6576138c56154fb565b5b8160048111156138d9576138d86154fb565b5b03613919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161391090615674565b60405180910390fd5b60048081111561392c5761392b6154fb565b5b81600481111561393f5761393e6154fb565b5b0361397f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161397690615706565b60405180910390fd5b5b50565b600080549050600082036139c3576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6139d06000848385613074565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550613a4783613a38600086600061307a565b613a4185613c98565b176130a2565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b818114613ae857808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600181019050613aad565b5060008203613b23576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000819055505050613b3960008483856130cd565b505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613b79576000600391509150613c41565b601b8560ff1614158015613b915750601c8560ff1614155b15613ba3576000600491509150613c41565b600060018787878760405160008152602001604052604051613bc89493929190615751565b6020604051602081039080840390855afa158015613bea573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613c3857600060019250925050613c41565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050613c8a87828885613b3e565b935093505050935093915050565b60006001821460e11b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613cf181613cbc565b8114613cfc57600080fd5b50565b600081359050613d0e81613ce8565b92915050565b600060208284031215613d2a57613d29613cb2565b5b6000613d3884828501613cff565b91505092915050565b60008115159050919050565b613d5681613d41565b82525050565b6000602082019050613d716000830184613d4d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613db1578082015181840152602081019050613d96565b60008484015250505050565b6000601f19601f8301169050919050565b6000613dd982613d77565b613de38185613d82565b9350613df3818560208601613d93565b613dfc81613dbd565b840191505092915050565b60006020820190508181036000830152613e218184613dce565b905092915050565b6000819050919050565b613e3c81613e29565b8114613e4757600080fd5b50565b600081359050613e5981613e33565b92915050565b600060208284031215613e7557613e74613cb2565b5b6000613e8384828501613e4a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613eb782613e8c565b9050919050565b613ec781613eac565b82525050565b6000602082019050613ee26000830184613ebe565b92915050565b613ef181613eac565b8114613efc57600080fd5b50565b600081359050613f0e81613ee8565b92915050565b60008060408385031215613f2b57613f2a613cb2565b5b6000613f3985828601613eff565b9250506020613f4a85828601613e4a565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f9682613dbd565b810181811067ffffffffffffffff82111715613fb557613fb4613f5e565b5b80604052505050565b6000613fc8613ca8565b9050613fd48282613f8d565b919050565b600067ffffffffffffffff821115613ff457613ff3613f5e565b5b613ffd82613dbd565b9050602081019050919050565b82818337600083830152505050565b600061402c61402784613fd9565b613fbe565b90508281526020810184848401111561404857614047613f59565b5b61405384828561400a565b509392505050565b600082601f8301126140705761406f613f54565b5b8135614080848260208601614019565b91505092915050565b60006020828403121561409f5761409e613cb2565b5b600082013567ffffffffffffffff8111156140bd576140bc613cb7565b5b6140c98482850161405b565b91505092915050565b6140db81613e29565b82525050565b60006020820190506140f660008301846140d2565b92915050565b60008060006060848603121561411557614114613cb2565b5b600061412386828701613eff565b935050602061413486828701613eff565b925050604061414586828701613e4a565b9150509250925092565b600080fd5b60006040828403121561416a5761416961414f565b5b81905092915050565b600080fd5b600080fd5b60008083601f84011261419357614192613f54565b5b8235905067ffffffffffffffff8111156141b0576141af614173565b5b6020830191508360018202830111156141cc576141cb614178565b5b9250929050565b6000806000806000608086880312156141ef576141ee613cb2565b5b600086013567ffffffffffffffff81111561420d5761420c613cb7565b5b61421988828901614154565b955050602061422a88828901613e4a565b945050604061423b88828901613eff565b935050606086013567ffffffffffffffff81111561425c5761425b613cb7565b5b6142688882890161417d565b92509250509295509295909350565b60006fffffffffffffffffffffffffffffffff82169050919050565b61429c81614277565b81146142a757600080fd5b50565b6000813590506142b981614293565b92915050565b600080604083850312156142d6576142d5613cb2565b5b60006142e4858286016142aa565b92505060206142f585828601613e4a565b9150509250929050565b60008083601f84011261431557614314613f54565b5b8235905067ffffffffffffffff81111561433257614331614173565b5b6020830191508360a082028301111561434e5761434d614178565b5b9250929050565b6000806020838503121561436c5761436b613cb2565b5b600083013567ffffffffffffffff81111561438a57614389613cb7565b5b614396858286016142ff565b92509250509250929050565b6000602082840312156143b8576143b7613cb2565b5b60006143c684828501613eff565b91505092915050565b600063ffffffff82169050919050565b6143e8816143cf565b82525050565b600060e0820190508181036000830152614408818a613dce565b9050818103602083015261441c8189613dce565b905061442b6040830188613ebe565b61443860608301876143df565b61444560808301866143df565b61445260a08301856143df565b61445f60c08301846143df565b98975050505050505050565b61447481614277565b82525050565b600060208201905061448f600083018461446b565b92915050565b61449e81613d41565b81146144a957600080fd5b50565b6000813590506144bb81614495565b92915050565b600080604083850312156144d8576144d7613cb2565b5b60006144e685828601613eff565b92505060206144f7858286016144ac565b9150509250929050565b6000819050919050565b61451481614501565b811461451f57600080fd5b50565b6000813590506145318161450b565b92915050565b60006020828403121561454d5761454c613cb2565b5b600061455b84828501614522565b91505092915050565b600067ffffffffffffffff82169050919050565b61458181614564565b82525050565b600060608201905061459c600083018661446b565b6145a96020830185614578565b6145b66040830184614578565b949350505050565b600067ffffffffffffffff8211156145d9576145d8613f5e565b5b6145e282613dbd565b9050602081019050919050565b60006146026145fd846145be565b613fbe565b90508281526020810184848401111561461e5761461d613f59565b5b61462984828561400a565b509392505050565b600082601f83011261464657614645613f54565b5b81356146568482602086016145ef565b91505092915050565b6000806000806080858703121561467957614678613cb2565b5b600061468787828801613eff565b945050602061469887828801613eff565b93505060406146a987828801613e4a565b925050606085013567ffffffffffffffff8111156146ca576146c9613cb7565b5b6146d687828801614631565b91505092959194509250565b60006040820190506146f7600083018561446b565b614704602083018461446b565b9392505050565b6000606082840312156147215761472061414f565b5b81905092915050565b600080600060a0848603121561474357614742613cb2565b5b600061475186828701614522565b935050602061476286828701614522565b92505060406147738682870161470b565b9150509250925092565b6000806040838503121561479457614793613cb2565b5b60006147a285828601613eff565b92505060206147b385828601613eff565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061480457607f821691505b602082108103614817576148166147bd565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614853602083613d82565b915061485e8261481d565b602082019050919050565b6000602082019050818103600083015261488281614846565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026148eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826148ae565b6148f586836148ae565b95508019841693508086168417925050509392505050565b6000819050919050565b600061493261492d61492884613e29565b61490d565b613e29565b9050919050565b6000819050919050565b61494c83614917565b61496061495882614939565b8484546148bb565b825550505050565b600090565b614975614968565b614980818484614943565b505050565b5b818110156149a45761499960008261496d565b600181019050614986565b5050565b601f8211156149e9576149ba81614889565b6149c38461489e565b810160208510156149d2578190505b6149e66149de8561489e565b830182614985565b50505b505050565b600082821c905092915050565b6000614a0c600019846008026149ee565b1980831691505092915050565b6000614a2583836149fb565b9150826002028217905092915050565b614a3e82613d77565b67ffffffffffffffff811115614a5757614a56613f5e565b5b614a6182546147ec565b614a6c8282856149a8565b600060209050601f831160018114614a9f5760008415614a8d578287015190505b614a978582614a19565b865550614aff565b601f198416614aad86614889565b60005b82811015614ad557848901518255600182019150602085019450602081019050614ab0565b86831015614af25784890151614aee601f8916826149fb565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b50565b6000614b22600083614b07565b9150614b2d82614b12565b600082019050919050565b6000614b4382614b15565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b8782613e29565b9150614b9283613e29565b9250828201905080821115614baa57614ba9614b4d565b5b92915050565b6000614bbb82614277565b9150614bc683614277565b9250816fffffffffffffffffffffffffffffffff0483118215151615614bef57614bee614b4d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614c3482614277565b9150614c3f83614277565b925082614c4f57614c4e614bfa565b5b828204905092915050565b6000614c6582614277565b9150614c7083614277565b925082820190506fffffffffffffffffffffffffffffffff811115614c9857614c97614b4d565b5b92915050565b6000614ca982614277565b9150614cb483614277565b925082820390506fffffffffffffffffffffffffffffffff811115614cdc57614cdb614b4d565b5b92915050565b6000614ced82613e29565b9150614cf883613e29565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d3157614d30614b4d565b5b828202905092915050565b6000614d4782613e29565b9150614d5283613e29565b925082614d6257614d61614bfa565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008135614da981614293565b80915050919050565b60008160001b9050919050565b60006fffffffffffffffffffffffffffffffff614ddb84614db2565b9350801983169250808416831791505092915050565b6000614e0c614e07614e0284614277565b61490d565b614277565b9050919050565b6000819050919050565b614e2682614df1565b614e39614e3282614e13565b8354614dbf565b8255505050565b614e4981614564565b8114614e5457600080fd5b50565b60008135614e6481614e40565b80915050919050565b60008160801b9050919050565b600077ffffffffffffffff00000000000000000000000000000000614e9e84614e6d565b9350801983169250808416831791505092915050565b6000614ecf614eca614ec584614564565b61490d565b614564565b9050919050565b6000819050919050565b614ee982614eb4565b614efc614ef582614ed6565b8354614e7a565b8255505050565b60008160c01b9050919050565b60007fffffffffffffffff000000000000000000000000000000000000000000000000614f3c84614f03565b9350801983169250808416831791505092915050565b614f5b82614eb4565b614f6e614f6782614ed6565b8354614f10565b8255505050565b600081016000830180614f8781614d9c565b9050614f938184614e1d565b505050600081016020830180614fa881614e57565b9050614fb48184614ee0565b505050600081016040830180614fc981614e57565b9050614fd58184614f52565b5050505050565b614fe68282614f75565b5050565b6000614ff582613e29565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361502757615026614b4d565b5b600182019050919050565b600081905092915050565b7f666f726576657200000000000000000000000000000000000000000000000000600082015250565b6000615073600783615032565b915061507e8261503d565b600782019050919050565b600061509482615066565b9150819050919050565b60006150a982613d77565b6150b38185615032565b93506150c3818560208601613d93565b80840191505092915050565b60006150db828461509e565b915081905092915050565b600081546150f3816147ec565b6150fd8186615032565b94506001821660008114615118576001811461512d57615160565b60ff1983168652811515820286019350615160565b61513685614889565b60005b8381101561515857815481890152600182019150602081019050615139565b838801955050505b50505092915050565b600061517582856150e6565b9150615181828461509e565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006151e9602683613d82565b91506151f48261518d565b604082019050919050565b60006020820190508181036000830152615218816151dc565b9050919050565b60008160601b9050919050565b60006152378261521f565b9050919050565b60006152498261522c565b9050919050565b61526161525c82613eac565b61523e565b82525050565b60006152738284615250565b60148201915081905092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126152ae576152ad615282565b5b80840192508235915067ffffffffffffffff8211156152d0576152cf615287565b5b6020830192506020820236038313156152ec576152eb61528c565b5b509250929050565b6000819050919050565b61530f61530a82614501565b6152f4565b82525050565b600061532182856152fe565b60208201915061533182846152fe565b6020820191508190509392505050565b600081519050919050565b600082825260208201905092915050565b600061536882615341565b615372818561534c565b9350615382818560208601613d93565b61538b81613dbd565b840191505092915050565b60006080820190506153ab6000830187613ebe565b6153b86020830186613ebe565b6153c560408301856140d2565b81810360608301526153d7818461535d565b905095945050505050565b6000815190506153f181613ce8565b92915050565b60006020828403121561540d5761540c613cb2565b5b600061541b848285016153e2565b91505092915050565b600061542f82613e29565b915061543a83613e29565b925082820390508181111561545257615451614b4d565b5b92915050565b600061546382613e29565b915061546e83613e29565b92508261547e5761547d614bfa565b5b828206905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006154bf601c83615032565b91506154ca82615489565b601c82019050919050565b60006154e0826154b2565b91506154ec82846152fe565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000615560601883613d82565b915061556b8261552a565b602082019050919050565b6000602082019050818103600083015261558f81615553565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006155cc601f83613d82565b91506155d782615596565b602082019050919050565b600060208201905081810360008301526155fb816155bf565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061565e602283613d82565b915061566982615602565b604082019050919050565b6000602082019050818103600083015261568d81615651565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006156f0602283613d82565b91506156fb82615694565b604082019050919050565b6000602082019050818103600083015261571f816156e3565b9050919050565b61572f81614501565b82525050565b600060ff82169050919050565b61574b81615735565b82525050565b60006080820190506157666000830187615726565b6157736020830186615742565b6157806040830185615726565b61578d6060830184615726565b9594505050505056fea2646970667358221220e753ac089c532b933887ae2fda619562ce370b1eb6a5616feb586b4b059a927264736f6c63430008100033",
    "abi": [
        {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "ApprovalCallerNotOwnerNorApproved",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ApprovalQueryForNonexistentToken",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ApproveToCaller",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "BalanceEmpty",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "BalanceQueryForZeroAddress",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "ExcessiveEthSent",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InsufficientEthSent",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidReferral",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "InvalidSignature",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "LockedForever",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MaxBatchSizeExceeded",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MaxSupplyExceeded",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MintERC2309QuantityExceedsLimit",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MintNotYetStarted",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MintToZeroAddress",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MintZeroQuantity",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MintingPaused",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "NumberOfMintsExceeded",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "OwnerQueryForNonexistentToken",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "OwnershipNotInitializedForExtraData",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TransferCallerNotOwnerNorApproved",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TransferFailed",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TransferFromIncorrectOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TransferToNonERC721ReceiverImplementer",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "TransferToZeroAddress",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "URIQueryForNonexistentToken",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "WalletUnauthorizedToMint",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "WrongPassword",
            "type": "error"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "approved",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "bool",
                    "name": "approved",
                    "type": "bool"
                }
            ],
            "name": "ApprovalForAll",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "fromTokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "toTokenId",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                }
            ],
            "name": "ConsecutiveTransfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "key",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "cid",
                    "type": "bytes32"
                }
            ],
            "name": "Invited",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "affiliate",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint128",
                    "name": "wad",
                    "type": "uint128"
                }
            ],
            "name": "Referral",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "src",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint128",
                    "name": "wad",
                    "type": "uint128"
                }
            ],
            "name": "Withdrawal",
            "type": "event"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "name": "affiliateBalance",
            "outputs": [
                {
                    "internalType": "uint128",
                    "name": "",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint128",
                    "name": "price",
                    "type": "uint128"
                },
                {
                    "internalType": "uint256",
                    "name": "numTokens",
                    "type": "uint256"
                }
            ],
            "name": "computePrice",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "config",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "unrevealedUri",
                    "type": "string"
                },
                {
                    "internalType": "string",
                    "name": "baseUri",
                    "type": "string"
                },
                {
                    "internalType": "address",
                    "name": "affiliateSigner",
                    "type": "address"
                },
                {
                    "internalType": "uint32",
                    "name": "maxSupply",
                    "type": "uint32"
                },
                {
                    "internalType": "uint32",
                    "name": "maxBatchSize",
                    "type": "uint32"
                },
                {
                    "internalType": "uint32",
                    "name": "affiliateFee",
                    "type": "uint32"
                },
                {
                    "internalType": "uint32",
                    "name": "platformFee",
                    "type": "uint32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getApproved",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "name": "invites",
            "outputs": [
                {
                    "internalType": "uint128",
                    "name": "price",
                    "type": "uint128"
                },
                {
                    "internalType": "uint64",
                    "name": "start",
                    "type": "uint64"
                },
                {
                    "internalType": "uint64",
                    "name": "limit",
                    "type": "uint64"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "owner",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                }
            ],
            "name": "isApprovedForAll",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "password",
                    "type": "string"
                }
            ],
            "name": "lockProvenanceHash",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "password",
                    "type": "string"
                }
            ],
            "name": "lockURI",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "bytes32",
                            "name": "key",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "bytes32[]",
                            "name": "proof",
                            "type": "bytes32[]"
                        }
                    ],
                    "internalType": "struct Remilia.Auth",
                    "name": "auth",
                    "type": "tuple"
                },
                {
                    "internalType": "uint256",
                    "name": "quantity",
                    "type": "uint256"
                },
                {
                    "internalType": "address",
                    "name": "affiliate",
                    "type": "address"
                },
                {
                    "internalType": "bytes",
                    "name": "signature",
                    "type": "bytes"
                }
            ],
            "name": "mint",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "ownerBalance",
            "outputs": [
                {
                    "internalType": "uint128",
                    "name": "owner",
                    "type": "uint128"
                },
                {
                    "internalType": "uint128",
                    "name": "platform",
                    "type": "uint128"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "provenance",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "provenanceHashUnlocked",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "reveal",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "revealed",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "internalType": "bytes",
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                },
                {
                    "internalType": "bool",
                    "name": "approved",
                    "type": "bool"
                }
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "baseUri_",
                    "type": "string"
                }
            ],
            "name": "setBaseURI",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "_key",
                    "type": "bytes32"
                },
                {
                    "internalType": "bytes32",
                    "name": "_cid",
                    "type": "bytes32"
                },
                {
                    "components": [
                        {
                            "internalType": "uint128",
                            "name": "price",
                            "type": "uint128"
                        },
                        {
                            "internalType": "uint64",
                            "name": "start",
                            "type": "uint64"
                        },
                        {
                            "internalType": "uint64",
                            "name": "limit",
                            "type": "uint64"
                        }
                    ],
                    "internalType": "struct Remilia.Invite",
                    "name": "_invite",
                    "type": "tuple"
                }
            ],
            "name": "setInvite",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "components": [
                        {
                            "internalType": "bytes32",
                            "name": "key",
                            "type": "bytes32"
                        },
                        {
                            "internalType": "bytes32",
                            "name": "cid",
                            "type": "bytes32"
                        },
                        {
                            "components": [
                                {
                                    "internalType": "uint128",
                                    "name": "price",
                                    "type": "uint128"
                                },
                                {
                                    "internalType": "uint64",
                                    "name": "start",
                                    "type": "uint64"
                                },
                                {
                                    "internalType": "uint64",
                                    "name": "limit",
                                    "type": "uint64"
                                }
                            ],
                            "internalType": "struct Remilia.Invite",
                            "name": "invite",
                            "type": "tuple"
                        }
                    ],
                    "internalType": "struct Remilia.Invitelist[]",
                    "name": "invitelist",
                    "type": "tuple[]"
                }
            ],
            "name": "setInvites",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "provenanceHash",
                    "type": "string"
                }
            ],
            "name": "setProvenanceHash",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "string",
                    "name": "_unrevealedURI",
                    "type": "string"
                }
            ],
            "name": "setUnrevealedURI",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes4",
                    "name": "interfaceId",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "tokenURI",
            "outputs": [
                {
                    "internalType": "string",
                    "name": "",
                    "type": "string"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "to",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "uriUnlocked",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "deployed_bytecode": "0x60806040526004361061020f5760003560e01c8063715018a611610118578063b88d4fde116100a0578063e072e16d1161006f578063e072e16d14610783578063e4963dd5146107ae578063e985e9c5146107d7578063f2fde38b14610814578063fe2c7fee1461083d5761020f565b8063b88d4fde146106c8578063bedcf003146106f1578063c87b56dd1461071d578063de6cd0db1461075a5761020f565b8063978a4509116100e7578063978a4509146105e3578063a15947c414610620578063a22cb46514610649578063a475b5dd14610672578063a5aa4aa4146106895761020f565b8063715018a61461054557806379502c551461055c5780638da5cb5b1461058d57806395d89b41146105b85761020f565b80633ccfd60b1161019b57806355f804b31161016a57806355f804b31461043c5780636352211e14610465578063690ed4d3146104a25780636f5ba15a146104df57806370a08231146105085761020f565b80633ccfd60b146103b557806342842e0e146103cc5780634a21a2df146103f557806351830227146104115761020f565b80630f7309e8116101e25780630f7309e8146102e2578063109695231461030d57806318160ddd1461033657806323b872dd146103615780632cb020e51461038a5761020f565b806301ffc9a71461021457806306fdde0314610251578063081812fc1461027c578063095ea7b3146102b9575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190613d14565b610866565b6040516102489190613d5c565b60405180910390f35b34801561025d57600080fd5b506102666108f8565b6040516102739190613e07565b60405180910390f35b34801561028857600080fd5b506102a3600480360381019061029e9190613e5f565b61098a565b6040516102b09190613ecd565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db9190613f14565b610a09565b005b3480156102ee57600080fd5b506102f7610b4d565b6040516103049190613e07565b60405180910390f35b34801561031957600080fd5b50610334600480360381019061032f9190614089565b610bdb565b005b34801561034257600080fd5b5061034b610cb0565b60405161035891906140e1565b60405180910390f35b34801561036d57600080fd5b50610388600480360381019061038391906140fc565b610cc7565b005b34801561039657600080fd5b5061039f610fe9565b6040516103ac9190613d5c565b60405180910390f35b3480156103c157600080fd5b506103ca610ffc565b005b3480156103d857600080fd5b506103f360048036038101906103ee91906140fc565b611527565b005b61040f600480360381019061040a91906141d3565b611547565b005b34801561041d57600080fd5b50610426611e9d565b6040516104339190613d5c565b60405180910390f35b34801561044857600080fd5b50610463600480360381019061045e9190614089565b611eb0565b005b34801561047157600080fd5b5061048c60048036038101906104879190613e5f565b611f88565b6040516104999190613ecd565b60405180910390f35b3480156104ae57600080fd5b506104c960048036038101906104c491906142bf565b611f9a565b6040516104d691906140e1565b60405180910390f35b3480156104eb57600080fd5b5061050660048036038101906105019190614355565b61206e565b005b34801561051457600080fd5b5061052f600480360381019061052a91906143a2565b61218d565b60405161053c91906140e1565b60405180910390f35b34801561055157600080fd5b5061055a612245565b005b34801561056857600080fd5b506105716122cd565b60405161058497969594939291906143ee565b60405180910390f35b34801561059957600080fd5b506105a261246d565b6040516105af9190613ecd565b60405180910390f35b3480156105c457600080fd5b506105cd612497565b6040516105da9190613e07565b60405180910390f35b3480156105ef57600080fd5b5061060a600480360381019061060591906143a2565b612529565b604051610617919061447a565b60405180910390f35b34801561062c57600080fd5b5061064760048036038101906106429190614089565b612558565b005b34801561065557600080fd5b50610670600480360381019061066b91906144c1565b612675565b005b34801561067e57600080fd5b506106876127ec565b005b34801561069557600080fd5b506106b060048036038101906106ab9190614537565b612885565b6040516106bf93929190614587565b60405180910390f35b3480156106d457600080fd5b506106ef60048036038101906106ea919061465f565b6128f3565b005b3480156106fd57600080fd5b50610706612966565b6040516107149291906146e2565b60405180910390f35b34801561072957600080fd5b50610744600480360381019061073f9190613e5f565b6129b0565b6040516107519190613e07565b60405180910390f35b34801561076657600080fd5b50610781600480360381019061077c9190614089565b612aa6565b005b34801561078f57600080fd5b50610798612bc3565b6040516107a59190613d5c565b60405180910390f35b3480156107ba57600080fd5b506107d560048036038101906107d0919061472a565b612bd6565b005b3480156107e357600080fd5b506107fe60048036038101906107f9919061477d565b612ca8565b60405161080b9190613d5c565b60405180910390f35b34801561082057600080fd5b5061083b600480360381019061083691906143a2565b612d3c565b005b34801561084957600080fd5b50610864600480360381019061085f9190614089565b612e33565b005b60006301ffc9a760e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108c157506380ac58cd60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806108f15750635b5e139f60e01b827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b606060028054610907906147ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610933906147ec565b80156109805780601f1061095557610100808354040283529160200191610980565b820191906000526020600020905b81548152906001019060200180831161096357829003601f168201915b5050505050905090565b600061099582612ec5565b6109cb576040517fcf4700e400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a1482611f88565b90508073ffffffffffffffffffffffffffffffffffffffff16610a35612f24565b73ffffffffffffffffffffffffffffffffffffffff1614610a9857610a6181610a5c612f24565b612ca8565b610a97576040517fcfb3b94200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b826006600084815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050565b600d8054610b5a906147ec565b80601f0160208091040260200160405190810160405280929190818152602001828054610b86906147ec565b8015610bd35780601f10610ba857610100808354040283529160200191610bd3565b820191906000526020600020905b815481529060010190602001808311610bb657829003601f168201915b505050505081565b610be3612f2c565b73ffffffffffffffffffffffffffffffffffffffff16610c0161246d565b73ffffffffffffffffffffffffffffffffffffffff1614610c57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4e90614869565b60405180910390fd5b600e60009054906101000a900460ff16610c9d576040517f249fab5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600d9081610cac9190614a35565b5050565b6000610cba612f34565b6001546000540303905090565b6000610cd282612f3d565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d39576040517fa114810000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600080610d4584613009565b91509150610d5b8187610d56612f24565b613030565b610da757610d7086610d6b612f24565b612ca8565b610da6576040517f59c896be00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603610e0d576040517fea553b3400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e1a8686866001613074565b8015610e2557600082555b600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081546001900391905081905550600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815460010191905081905550610ef385610ecf88888761307a565b7c0200000000000000000000000000000000000000000000000000000000176130a2565b600460008681526020019081526020016000208190555060007c0200000000000000000000000000000000000000000000000000000000841603610f795760006001850190506000600460008381526020019081526020016000205403610f77576000548114610f76578360046000838152602001908152602001600020819055505b5b505b838573ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610fe186868660016130cd565b505050505050565b600e60009054906101000a900460ff1681565b600061100661246d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061107e57507386b82972282dd22348374bc63fd21620f7ed847b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b156112fe576000600f6040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681525050905061113061246d565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff160361122f5780600001519150604051806040016040528060006fffffffffffffffffffffffffffffffff16815260200182602001516fffffffffffffffffffffffffffffffff16815250600f60008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050506112f8565b80602001519150604051806040016040528082600001516fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815250600f60008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055509050505b506113d4565b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a90046fffffffffffffffffffffffffffffffff1690506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055505b6000816fffffffffffffffffffffffffffffffff1603611420576040517f8735c8fc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff16826fffffffffffffffffffffffffffffffff1660405161145890614b38565b60006040518083038185875af1925050503d8060008114611495576040519150601f19603f3d011682016040523d82523d6000602084013e61149a565b606091505b50509050806114d5576040517f90b8ec1800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff167f8bb044d1bb6a7b421504ef7f7045b22152b504f683e8c1bcbc8222af46cb68b38360405161151b919061447a565b60405180910390a25050565b611542838383604051806020016040528060008152506128f3565b505050565b600060096000876000013581526020019081526020016000206040518060600160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681526020016000820160189054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146117b1577386b82972282dd22348374bc63fd21620f7ed847b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806116cf57506116a061246d565b73ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b8061170557503373ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16145b1561173c576040517f233067ae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6117b08484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050601060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166130d3565b5b6000816040015167ffffffffffffffff16036117f9576040517feb56075600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61180a86611805612f2c565b613180565b611840576040517fd838648f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806020015167ffffffffffffffff16421015611888576040517f1d23a74200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601060020160149054906101000a900463ffffffff1663ffffffff16816040015167ffffffffffffffff16101561196e57600085600a60006118c8612f2c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600089600001358152602001908152602001600020546119229190614b7c565b9050816040015167ffffffffffffffff1681111561196c576040517f15fcbc9d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505b601060020160189054906101000a900463ffffffff1663ffffffff168511156119c3576040517f7a7e96df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b601060020160149054906101000a900463ffffffff1663ffffffff16856119e8613292565b6119f29190614b7c565b1115611a2a576040517f8a164f6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611a3a826000015187611f9a565b905080341015611a76576040517ff244866f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80341115611ab0576040517f6c9089c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611aba33876132a5565b601060020160149054906101000a900463ffffffff1663ffffffff16826040015167ffffffffffffffff161015611b5e5785600a6000611af8612f2c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000896000013581526020019081526020016000206000828254611b569190614b7c565b925050819055505b600034905060008073ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614611cbd576127106010600201601c9054906101000a900463ffffffff1663ffffffff1683611bc29190614bb0565b611bcc9190614c29565b905080600b60008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282829054906101000a90046fffffffffffffffffffffffffffffffff16611c389190614c5a565b92506101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff1602179055508673ffffffffffffffffffffffffffffffffffffffff167f5e627b23e8981317689f5541931b5e9805545e7601aa2c86e84217555368dc0382604051611cb4919061447a565b60405180910390a25b6000600f6040518060400160405290816000820160009054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016000820160109054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff168152505090506000612710601060030160009054906101000a900463ffffffff1663ffffffff1685611d8e9190614bb0565b611d989190614c29565b90506000818486611da99190614c9e565b611db39190614c9e565b90506040518060400160405280828560000151611dd09190614c5a565b6fffffffffffffffffffffffffffffffff168152602001838560200151611df79190614c5a565b6fffffffffffffffffffffffffffffffff16815250600f60008201518160000160006101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060208201518160000160106101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff160217905550905050505050505050505050505050565b600c60009054906101000a900460ff1681565b611eb8612f2c565b73ffffffffffffffffffffffffffffffffffffffff16611ed661246d565b73ffffffffffffffffffffffffffffffffffffffff1614611f2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f2390614869565b60405180910390fd5b600c60019054906101000a900460ff16611f72576040517f249fab5d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8060106001019081611f849190614a35565b5050565b6000611f9382612f3d565b9050919050565b60008082846fffffffffffffffffffffffffffffffff16611fbb9190614ce2565b905060648310611fe657600a600882611fd49190614ce2565b611fde9190614d3c565b915050612068565b601e8310612011576127106121db82611fff9190614ce2565b6120099190614d3c565b915050612068565b600a831061203a57600a6009826120289190614ce2565b6120329190614d3c565b915050612068565b600583106120635760646060826120519190614ce2565b61205b9190614d3c565b915050612068565b809150505b92915050565b612076612f2c565b73ffffffffffffffffffffffffffffffffffffffff1661209461246d565b73ffffffffffffffffffffffffffffffffffffffff16146120ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120e190614869565b60405180910390fd5b60005b82829050811015612188573683838381811061210c5761210b614d6d565b5b905060a002019050806040016009600083600001358152602001908152602001600020818161213b9190614fdc565b905050806020013581600001357fe9a0c17645ed78ccc9996259f00297ffc75e6b9d22cd605ccc9992cc8ca3f4c160405160405180910390a350808061218090614fea565b9150506120ed565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036121f4576040517f8f4eb60400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054169050919050565b61224d612f2c565b73ffffffffffffffffffffffffffffffffffffffff1661226b61246d565b73ffffffffffffffffffffffffffffffffffffffff16146122c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b890614869565b60405180910390fd5b6122cb60006132c3565b565b60108060000180546122de906147ec565b80601f016020809104026020016040519081016040528092919081815260200182805461230a906147ec565b80156123575780601f1061232c57610100808354040283529160200191612357565b820191906000526020600020905b81548152906001019060200180831161233a57829003601f168201915b50505050509080600101805461236c906147ec565b80601f0160208091040260200160405190810160405280929190818152602001828054612398906147ec565b80156123e55780601f106123ba576101008083540402835291602001916123e5565b820191906000526020600020905b8154815290600101906020018083116123c857829003601f168201915b5050505050908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160149054906101000a900463ffffffff16908060020160189054906101000a900463ffffffff169080600201601c9054906101000a900463ffffffff16908060030160009054906101000a900463ffffffff16905087565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600380546124a6906147ec565b80601f01602080910402602001604051908101604052809291908181526020018280546124d2906147ec565b801561251f5780601f106124f45761010080835404028352916020019161251f565b820191906000526020600020905b81548152906001019060200180831161250257829003601f168201915b5050505050905090565b600b6020528060005260406000206000915054906101000a90046fffffffffffffffffffffffffffffffff1681565b612560612f2c565b73ffffffffffffffffffffffffffffffffffffffff1661257e61246d565b73ffffffffffffffffffffffffffffffffffffffff16146125d4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125cb90614869565b60405180910390fd5b6040516020016125e390615089565b604051602081830303815290604052805190602001208160405160200161260a91906150cf565b6040516020818303038152906040528051906020012014612657576040517f5ee88f9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600e60006101000a81548160ff02191690831515021790555050565b61267d612f24565b73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036126e1576040517fb06307db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600760006126ee612f24565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff1661279b612f24565b73ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516127e09190613d5c565b60405180910390a35050565b6127f4612f2c565b73ffffffffffffffffffffffffffffffffffffffff1661281261246d565b73ffffffffffffffffffffffffffffffffffffffff1614612868576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161285f90614869565b60405180910390fd5b6001600c60006101000a81548160ff021916908315150217905550565b60096020528060005260406000206000915090508060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a900467ffffffffffffffff16908060000160189054906101000a900467ffffffffffffffff16905083565b6128fe848484610cc7565b60008373ffffffffffffffffffffffffffffffffffffffff163b146129605761292984848484613389565b61295f576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5b50505050565b600f8060000160009054906101000a90046fffffffffffffffffffffffffffffffff16908060000160109054906101000a90046fffffffffffffffffffffffffffffffff16905082565b60606129bb82612ec5565b6129f1576040517fa14c4b5000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60001515600c60009054906101000a900460ff16151503612a41576010600001612a1a836134d9565b604051602001612a2b929190615169565b6040516020818303038152906040529050612aa1565b600060106001018054612a53906147ec565b905003612a6f5760405180602001604052806000815250612a9e565b6010600101612a7d836134d9565b604051602001612a8e929190615169565b6040516020818303038152906040525b90505b919050565b612aae612f2c565b73ffffffffffffffffffffffffffffffffffffffff16612acc61246d565b73ffffffffffffffffffffffffffffffffffffffff1614612b22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b1990614869565b60405180910390fd5b604051602001612b3190615089565b6040516020818303038152906040528051906020012081604051602001612b5891906150cf565b6040516020818303038152906040528051906020012014612ba5576040517f5ee88f9700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c60016101000a81548160ff02191690831515021790555050565b600c60019054906101000a900460ff1681565b612bde612f2c565b73ffffffffffffffffffffffffffffffffffffffff16612bfc61246d565b73ffffffffffffffffffffffffffffffffffffffff1614612c52576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c4990614869565b60405180910390fd5b80600960008581526020019081526020016000208181612c729190614fdc565b90505081837fe9a0c17645ed78ccc9996259f00297ffc75e6b9d22cd605ccc9992cc8ca3f4c160405160405180910390a3505050565b6000600760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b612d44612f2c565b73ffffffffffffffffffffffffffffffffffffffff16612d6261246d565b73ffffffffffffffffffffffffffffffffffffffff1614612db8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612daf90614869565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603612e27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e1e906151ff565b60405180910390fd5b612e30816132c3565b50565b612e3b612f2c565b73ffffffffffffffffffffffffffffffffffffffff16612e5961246d565b73ffffffffffffffffffffffffffffffffffffffff1614612eaf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea690614869565b60405180910390fd5b8060106000019081612ec19190614a35565b5050565b600081612ed0612f34565b11158015612edf575060005482105b8015612f1d575060007c0100000000000000000000000000000000000000000000000000000000600460008581526020019081526020016000205416145b9050919050565b600033905090565b600033905090565b60006001905090565b60008082905080612f4c612f34565b11612fd257600054811015612fd15760006004600083815260200190815260200160002054905060007c0100000000000000000000000000000000000000000000000000000000821603612fcf575b60008103612fc5576004600083600190039350838152602001908152602001600020549050612f9b565b8092505050613004565b505b5b6040517fdf2d9b4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b60008060006006600085815260200190815260200160002090508092508254915050915091565b600073ffffffffffffffffffffffffffffffffffffffff8316925073ffffffffffffffffffffffffffffffffffffffff821691508382148383141790509392505050565b50505050565b60008060e883901c905060e8613091868684613639565b62ffffff16901b9150509392505050565b600073ffffffffffffffffffffffffffffffffffffffff83169250814260a01b178317905092915050565b50505050565b6000613104846040516020016130e99190615267565b60405160208183030381529060405280519060200120613642565b905060006131128285613672565b90508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614613179576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050505050565b600080836000013503613196576001905061328c565b6000826040516020016131a99190615267565b60405160208183030381529060405280519060200120905060005b8480602001906131d49190615291565b90508110156132805760008580602001906131ef9190615291565b83818110613200576131ff614d6d565b5b905060200201359050808311613240578281604051602001613223929190615315565b60405160208183030381529060405280519060200120925061326c565b8083604051602001613253929190615315565b6040516020818303038152906040528051906020012092505b50808061327890614fea565b9150506131c4565b50836000013581149150505b92915050565b600061329c612f34565b60005403905090565b6132bf828260405180602001604052806000815250613699565b5050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008373ffffffffffffffffffffffffffffffffffffffff1663150b7a026133af612f24565b8786866040518563ffffffff1660e01b81526004016133d19493929190615396565b6020604051808303816000875af192505050801561340d57506040513d601f19601f8201168201806040525081019061340a91906153f7565b60015b613486573d806000811461343d576040519150601f19603f3d011682016040523d82523d6000602084013e613442565b606091505b50600081510361347e576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050949350505050565b606060008203613520576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050613634565b600082905060005b6000821461355257808061353b90614fea565b915050600a8261354b9190614d3c565b9150613528565b60008167ffffffffffffffff81111561356e5761356d613f5e565b5b6040519080825280601f01601f1916602001820160405280156135a05781602001600182028036833780820191505090505b5090505b6000851461362d576001826135b99190615424565b9150600a856135c89190615458565b60306135d49190614b7c565b60f81b8183815181106135ea576135e9614d6d565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856136269190614d3c565b94506135a4565b8093505050505b919050565b60009392505050565b60008160405160200161365591906154d5565b604051602081830303815290604052805190602001209050919050565b60008060006136818585613736565b9150915061368e816137b7565b819250505092915050565b6136a38383613983565b60008373ffffffffffffffffffffffffffffffffffffffff163b1461373157600080549050600083820390505b6136e36000868380600101945086613389565b613719576040517fd1a57ed600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8181106136d057816000541461372e57600080fd5b50505b505050565b60008060418351036137775760008060006020860151925060408601519150606086015160001a905061376b87828585613b3e565b945094505050506137b0565b60408351036137a757600080602085015191506040850151905061379c868383613c4a565b9350935050506137b0565b60006002915091505b9250929050565b600060048111156137cb576137ca6154fb565b5b8160048111156137de576137dd6154fb565b5b031561398057600160048111156137f8576137f76154fb565b5b81600481111561380b5761380a6154fb565b5b0361384b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161384290615576565b60405180910390fd5b6002600481111561385f5761385e6154fb565b5b816004811115613872576138716154fb565b5b036138b2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016138a9906155e2565b60405180910390fd5b600360048111156138c6576138c56154fb565b5b8160048111156138d9576138d86154fb565b5b03613919576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161391090615674565b60405180910390fd5b60048081111561392c5761392b6154fb565b5b81600481111561393f5761393e6154fb565b5b0361397f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161397690615706565b60405180910390fd5b5b50565b600080549050600082036139c3576040517fb562e8dd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6139d06000848385613074565b600160406001901b178202600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550613a4783613a38600086600061307a565b613a4185613c98565b176130a2565b6004600083815260200190815260200160002081905550600080838301905073ffffffffffffffffffffffffffffffffffffffff85169150828260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600183015b818114613ae857808360007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef600080a4600181019050613aad565b5060008203613b23576040517f2e07630000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000819055505050613b3960008483856130cd565b505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115613b79576000600391509150613c41565b601b8560ff1614158015613b915750601c8560ff1614155b15613ba3576000600491509150613c41565b600060018787878760405160008152602001604052604051613bc89493929190615751565b6020604051602081039080840390855afa158015613bea573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603613c3857600060019250925050613c41565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050613c8a87828885613b3e565b935093505050935093915050565b60006001821460e11b9050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b613cf181613cbc565b8114613cfc57600080fd5b50565b600081359050613d0e81613ce8565b92915050565b600060208284031215613d2a57613d29613cb2565b5b6000613d3884828501613cff565b91505092915050565b60008115159050919050565b613d5681613d41565b82525050565b6000602082019050613d716000830184613d4d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015613db1578082015181840152602081019050613d96565b60008484015250505050565b6000601f19601f8301169050919050565b6000613dd982613d77565b613de38185613d82565b9350613df3818560208601613d93565b613dfc81613dbd565b840191505092915050565b60006020820190508181036000830152613e218184613dce565b905092915050565b6000819050919050565b613e3c81613e29565b8114613e4757600080fd5b50565b600081359050613e5981613e33565b92915050565b600060208284031215613e7557613e74613cb2565b5b6000613e8384828501613e4a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613eb782613e8c565b9050919050565b613ec781613eac565b82525050565b6000602082019050613ee26000830184613ebe565b92915050565b613ef181613eac565b8114613efc57600080fd5b50565b600081359050613f0e81613ee8565b92915050565b60008060408385031215613f2b57613f2a613cb2565b5b6000613f3985828601613eff565b9250506020613f4a85828601613e4a565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f9682613dbd565b810181811067ffffffffffffffff82111715613fb557613fb4613f5e565b5b80604052505050565b6000613fc8613ca8565b9050613fd48282613f8d565b919050565b600067ffffffffffffffff821115613ff457613ff3613f5e565b5b613ffd82613dbd565b9050602081019050919050565b82818337600083830152505050565b600061402c61402784613fd9565b613fbe565b90508281526020810184848401111561404857614047613f59565b5b61405384828561400a565b509392505050565b600082601f8301126140705761406f613f54565b5b8135614080848260208601614019565b91505092915050565b60006020828403121561409f5761409e613cb2565b5b600082013567ffffffffffffffff8111156140bd576140bc613cb7565b5b6140c98482850161405b565b91505092915050565b6140db81613e29565b82525050565b60006020820190506140f660008301846140d2565b92915050565b60008060006060848603121561411557614114613cb2565b5b600061412386828701613eff565b935050602061413486828701613eff565b925050604061414586828701613e4a565b9150509250925092565b600080fd5b60006040828403121561416a5761416961414f565b5b81905092915050565b600080fd5b600080fd5b60008083601f84011261419357614192613f54565b5b8235905067ffffffffffffffff8111156141b0576141af614173565b5b6020830191508360018202830111156141cc576141cb614178565b5b9250929050565b6000806000806000608086880312156141ef576141ee613cb2565b5b600086013567ffffffffffffffff81111561420d5761420c613cb7565b5b61421988828901614154565b955050602061422a88828901613e4a565b945050604061423b88828901613eff565b935050606086013567ffffffffffffffff81111561425c5761425b613cb7565b5b6142688882890161417d565b92509250509295509295909350565b60006fffffffffffffffffffffffffffffffff82169050919050565b61429c81614277565b81146142a757600080fd5b50565b6000813590506142b981614293565b92915050565b600080604083850312156142d6576142d5613cb2565b5b60006142e4858286016142aa565b92505060206142f585828601613e4a565b9150509250929050565b60008083601f84011261431557614314613f54565b5b8235905067ffffffffffffffff81111561433257614331614173565b5b6020830191508360a082028301111561434e5761434d614178565b5b9250929050565b6000806020838503121561436c5761436b613cb2565b5b600083013567ffffffffffffffff81111561438a57614389613cb7565b5b614396858286016142ff565b92509250509250929050565b6000602082840312156143b8576143b7613cb2565b5b60006143c684828501613eff565b91505092915050565b600063ffffffff82169050919050565b6143e8816143cf565b82525050565b600060e0820190508181036000830152614408818a613dce565b9050818103602083015261441c8189613dce565b905061442b6040830188613ebe565b61443860608301876143df565b61444560808301866143df565b61445260a08301856143df565b61445f60c08301846143df565b98975050505050505050565b61447481614277565b82525050565b600060208201905061448f600083018461446b565b92915050565b61449e81613d41565b81146144a957600080fd5b50565b6000813590506144bb81614495565b92915050565b600080604083850312156144d8576144d7613cb2565b5b60006144e685828601613eff565b92505060206144f7858286016144ac565b9150509250929050565b6000819050919050565b61451481614501565b811461451f57600080fd5b50565b6000813590506145318161450b565b92915050565b60006020828403121561454d5761454c613cb2565b5b600061455b84828501614522565b91505092915050565b600067ffffffffffffffff82169050919050565b61458181614564565b82525050565b600060608201905061459c600083018661446b565b6145a96020830185614578565b6145b66040830184614578565b949350505050565b600067ffffffffffffffff8211156145d9576145d8613f5e565b5b6145e282613dbd565b9050602081019050919050565b60006146026145fd846145be565b613fbe565b90508281526020810184848401111561461e5761461d613f59565b5b61462984828561400a565b509392505050565b600082601f83011261464657614645613f54565b5b81356146568482602086016145ef565b91505092915050565b6000806000806080858703121561467957614678613cb2565b5b600061468787828801613eff565b945050602061469887828801613eff565b93505060406146a987828801613e4a565b925050606085013567ffffffffffffffff8111156146ca576146c9613cb7565b5b6146d687828801614631565b91505092959194509250565b60006040820190506146f7600083018561446b565b614704602083018461446b565b9392505050565b6000606082840312156147215761472061414f565b5b81905092915050565b600080600060a0848603121561474357614742613cb2565b5b600061475186828701614522565b935050602061476286828701614522565b92505060406147738682870161470b565b9150509250925092565b6000806040838503121561479457614793613cb2565b5b60006147a285828601613eff565b92505060206147b385828601613eff565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061480457607f821691505b602082108103614817576148166147bd565b5b50919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000614853602083613d82565b915061485e8261481d565b602082019050919050565b6000602082019050818103600083015261488281614846565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026148eb7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826148ae565b6148f586836148ae565b95508019841693508086168417925050509392505050565b6000819050919050565b600061493261492d61492884613e29565b61490d565b613e29565b9050919050565b6000819050919050565b61494c83614917565b61496061495882614939565b8484546148bb565b825550505050565b600090565b614975614968565b614980818484614943565b505050565b5b818110156149a45761499960008261496d565b600181019050614986565b5050565b601f8211156149e9576149ba81614889565b6149c38461489e565b810160208510156149d2578190505b6149e66149de8561489e565b830182614985565b50505b505050565b600082821c905092915050565b6000614a0c600019846008026149ee565b1980831691505092915050565b6000614a2583836149fb565b9150826002028217905092915050565b614a3e82613d77565b67ffffffffffffffff811115614a5757614a56613f5e565b5b614a6182546147ec565b614a6c8282856149a8565b600060209050601f831160018114614a9f5760008415614a8d578287015190505b614a978582614a19565b865550614aff565b601f198416614aad86614889565b60005b82811015614ad557848901518255600182019150602085019450602081019050614ab0565b86831015614af25784890151614aee601f8916826149fb565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b50565b6000614b22600083614b07565b9150614b2d82614b12565b600082019050919050565b6000614b4382614b15565b9150819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000614b8782613e29565b9150614b9283613e29565b9250828201905080821115614baa57614ba9614b4d565b5b92915050565b6000614bbb82614277565b9150614bc683614277565b9250816fffffffffffffffffffffffffffffffff0483118215151615614bef57614bee614b4d565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000614c3482614277565b9150614c3f83614277565b925082614c4f57614c4e614bfa565b5b828204905092915050565b6000614c6582614277565b9150614c7083614277565b925082820190506fffffffffffffffffffffffffffffffff811115614c9857614c97614b4d565b5b92915050565b6000614ca982614277565b9150614cb483614277565b925082820390506fffffffffffffffffffffffffffffffff811115614cdc57614cdb614b4d565b5b92915050565b6000614ced82613e29565b9150614cf883613e29565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615614d3157614d30614b4d565b5b828202905092915050565b6000614d4782613e29565b9150614d5283613e29565b925082614d6257614d61614bfa565b5b828204905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008135614da981614293565b80915050919050565b60008160001b9050919050565b60006fffffffffffffffffffffffffffffffff614ddb84614db2565b9350801983169250808416831791505092915050565b6000614e0c614e07614e0284614277565b61490d565b614277565b9050919050565b6000819050919050565b614e2682614df1565b614e39614e3282614e13565b8354614dbf565b8255505050565b614e4981614564565b8114614e5457600080fd5b50565b60008135614e6481614e40565b80915050919050565b60008160801b9050919050565b600077ffffffffffffffff00000000000000000000000000000000614e9e84614e6d565b9350801983169250808416831791505092915050565b6000614ecf614eca614ec584614564565b61490d565b614564565b9050919050565b6000819050919050565b614ee982614eb4565b614efc614ef582614ed6565b8354614e7a565b8255505050565b60008160c01b9050919050565b60007fffffffffffffffff000000000000000000000000000000000000000000000000614f3c84614f03565b9350801983169250808416831791505092915050565b614f5b82614eb4565b614f6e614f6782614ed6565b8354614f10565b8255505050565b600081016000830180614f8781614d9c565b9050614f938184614e1d565b505050600081016020830180614fa881614e57565b9050614fb48184614ee0565b505050600081016040830180614fc981614e57565b9050614fd58184614f52565b5050505050565b614fe68282614f75565b5050565b6000614ff582613e29565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361502757615026614b4d565b5b600182019050919050565b600081905092915050565b7f666f726576657200000000000000000000000000000000000000000000000000600082015250565b6000615073600783615032565b915061507e8261503d565b600782019050919050565b600061509482615066565b9150819050919050565b60006150a982613d77565b6150b38185615032565b93506150c3818560208601613d93565b80840191505092915050565b60006150db828461509e565b915081905092915050565b600081546150f3816147ec565b6150fd8186615032565b94506001821660008114615118576001811461512d57615160565b60ff1983168652811515820286019350615160565b61513685614889565b60005b8381101561515857815481890152600182019150602081019050615139565b838801955050505b50505092915050565b600061517582856150e6565b9150615181828461509e565b91508190509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006151e9602683613d82565b91506151f48261518d565b604082019050919050565b60006020820190508181036000830152615218816151dc565b9050919050565b60008160601b9050919050565b60006152378261521f565b9050919050565b60006152498261522c565b9050919050565b61526161525c82613eac565b61523e565b82525050565b60006152738284615250565b60148201915081905092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126152ae576152ad615282565b5b80840192508235915067ffffffffffffffff8211156152d0576152cf615287565b5b6020830192506020820236038313156152ec576152eb61528c565b5b509250929050565b6000819050919050565b61530f61530a82614501565b6152f4565b82525050565b600061532182856152fe565b60208201915061533182846152fe565b6020820191508190509392505050565b600081519050919050565b600082825260208201905092915050565b600061536882615341565b615372818561534c565b9350615382818560208601613d93565b61538b81613dbd565b840191505092915050565b60006080820190506153ab6000830187613ebe565b6153b86020830186613ebe565b6153c560408301856140d2565b81810360608301526153d7818461535d565b905095945050505050565b6000815190506153f181613ce8565b92915050565b60006020828403121561540d5761540c613cb2565b5b600061541b848285016153e2565b91505092915050565b600061542f82613e29565b915061543a83613e29565b925082820390508181111561545257615451614b4d565b5b92915050565b600061546382613e29565b915061546e83613e29565b92508261547e5761547d614bfa565b5b828206905092915050565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b60006154bf601c83615032565b91506154ca82615489565b601c82019050919050565b60006154e0826154b2565b91506154ec82846152fe565b60208201915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b6000615560601883613d82565b915061556b8261552a565b602082019050919050565b6000602082019050818103600083015261558f81615553565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b60006155cc601f83613d82565b91506155d782615596565b602082019050919050565b600060208201905081810360008301526155fb816155bf565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061565e602283613d82565b915061566982615602565b604082019050919050565b6000602082019050818103600083015261568d81615651565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b60006156f0602283613d82565b91506156fb82615694565b604082019050919050565b6000602082019050818103600083015261571f816156e3565b9050919050565b61572f81614501565b82525050565b600060ff82169050919050565b61574b81615735565b82525050565b60006080820190506157666000830187615726565b6157736020830186615742565b6157806040830185615726565b61578d6060830184615726565b9594505050505056fea2646970667358221220e753ac089c532b933887ae2fda619562ce370b1eb6a5616feb586b4b059a927264736f6c63430008100033",
    "constructor_argument": "",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2022-08-11\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        // Inspired by OraclizeAPI's implementation - MIT licence\r\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\r\n\r\n        if (value == 0) {\r\n            return \"0\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 digits;\r\n        while (temp != 0) {\r\n            digits++;\r\n            temp /= 10;\r\n        }\r\n        bytes memory buffer = new bytes(digits);\r\n        while (value != 0) {\r\n            digits -= 1;\r\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\r\n            value /= 10;\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        if (value == 0) {\r\n            return \"0x00\";\r\n        }\r\n        uint256 temp = value;\r\n        uint256 length = 0;\r\n        while (temp != 0) {\r\n            length++;\r\n            temp >>= 8;\r\n        }\r\n        return toHexString(value, length);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\r\n            value >>= 4;\r\n        }\r\n        require(value == 0, \"Strings: hex length insufficient\");\r\n        return string(buffer);\r\n    }\r\n}\r\n\r\n// Archetype v0.2.0\r\n\r\n\r\n// ERC721A Contracts v4.2.2\r\n// Creator: Chiru Labs\r\n\r\n\r\n\r\n\r\n// ERC721A Contracts v4.2.2\r\n// Creator: Chiru Labs\r\n\r\n\r\n\r\n/**\r\n * @dev Interface of ERC721A.\r\n */\r\ninterface IERC721A {\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error ApprovalCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error ApprovalQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller cannot approve to their own address.\r\n     */\r\n    error ApproveToCaller();\r\n\r\n    /**\r\n     * Cannot query the balance for the zero address.\r\n     */\r\n    error BalanceQueryForZeroAddress();\r\n\r\n    /**\r\n     * Cannot mint to the zero address.\r\n     */\r\n    error MintToZeroAddress();\r\n\r\n    /**\r\n     * The quantity of tokens minted must be more than zero.\r\n     */\r\n    error MintZeroQuantity();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error OwnerQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The caller must own the token or be an approved operator.\r\n     */\r\n    error TransferCallerNotOwnerNorApproved();\r\n\r\n    /**\r\n     * The token must be owned by `from`.\r\n     */\r\n    error TransferFromIncorrectOwner();\r\n\r\n    /**\r\n     * Cannot safely transfer to a contract that does not implement the\r\n     * ERC721Receiver interface.\r\n     */\r\n    error TransferToNonERC721ReceiverImplementer();\r\n\r\n    /**\r\n     * Cannot transfer to the zero address.\r\n     */\r\n    error TransferToZeroAddress();\r\n\r\n    /**\r\n     * The token does not exist.\r\n     */\r\n    error URIQueryForNonexistentToken();\r\n\r\n    /**\r\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\r\n     */\r\n    error MintERC2309QuantityExceedsLimit();\r\n\r\n    /**\r\n     * The `extraData` cannot be set on an unintialized ownership slot.\r\n     */\r\n    error OwnershipNotInitializedForExtraData();\r\n\r\n    // =============================================================\r\n    //                            STRUCTS\r\n    // =============================================================\r\n\r\n    struct TokenOwnership {\r\n        // The address of the owner.\r\n        address addr;\r\n        // Stores the start time of ownership with minimal overhead for tokenomics.\r\n        uint64 startTimestamp;\r\n        // Whether the token has been burned.\r\n        bool burned;\r\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\r\n        uint24 extraData;\r\n    }\r\n\r\n    // =============================================================\r\n    //                         TOKEN COUNTERS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                            IERC721\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables\r\n     * (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\r\n     * checking first that contract recipients are aware of the ERC721 protocol\r\n     * to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be have been allowed to move\r\n     * this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\r\n     * whenever possible.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // =============================================================\r\n    //                           IERC2309\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\r\n     * (inclusive) is transferred from `from` to `to`, as defined in the\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\r\n     *\r\n     * See {_mintERC2309} for more details.\r\n     */\r\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\r\n}\r\n\r\n\r\n/**\r\n * @dev Interface of ERC721 token receiver.\r\n */\r\ninterface ERC721A__IERC721Receiver {\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n\r\n/**\r\n * @title ERC721A\r\n *\r\n * @dev Implementation of the [ERC721](https://eips.ethereum.org/EIPS/eip-721)\r\n * Non-Fungible Token Standard, including the Metadata extension.\r\n * Optimized for lower gas during batch mints.\r\n *\r\n * Token IDs are minted in sequential order (e.g. 0, 1, 2, 3, ...)\r\n * starting from `_startTokenId()`.\r\n *\r\n * Assumptions:\r\n *\r\n * - An owner cannot have more than 2**64 - 1 (max value of uint64) of supply.\r\n * - The maximum token ID cannot exceed 2**256 - 1 (max value of uint256).\r\n */\r\ncontract ERC721A is IERC721A {\r\n    // Reference type for token approval.\r\n    struct TokenApprovalRef {\r\n        address value;\r\n    }\r\n\r\n    // =============================================================\r\n    //                           CONSTANTS\r\n    // =============================================================\r\n\r\n    // Mask of an entry in packed address data.\r\n    uint256 private constant _BITMASK_ADDRESS_DATA_ENTRY = (1 << 64) - 1;\r\n\r\n    // The bit position of `numberMinted` in packed address data.\r\n    uint256 private constant _BITPOS_NUMBER_MINTED = 64;\r\n\r\n    // The bit position of `numberBurned` in packed address data.\r\n    uint256 private constant _BITPOS_NUMBER_BURNED = 128;\r\n\r\n    // The bit position of `aux` in packed address data.\r\n    uint256 private constant _BITPOS_AUX = 192;\r\n\r\n    // Mask of all 256 bits in packed address data except the 64 bits for `aux`.\r\n    uint256 private constant _BITMASK_AUX_COMPLEMENT = (1 << 192) - 1;\r\n\r\n    // The bit position of `startTimestamp` in packed ownership.\r\n    uint256 private constant _BITPOS_START_TIMESTAMP = 160;\r\n\r\n    // The bit mask of the `burned` bit in packed ownership.\r\n    uint256 private constant _BITMASK_BURNED = 1 << 224;\r\n\r\n    // The bit position of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant _BITPOS_NEXT_INITIALIZED = 225;\r\n\r\n    // The bit mask of the `nextInitialized` bit in packed ownership.\r\n    uint256 private constant _BITMASK_NEXT_INITIALIZED = 1 << 225;\r\n\r\n    // The bit position of `extraData` in packed ownership.\r\n    uint256 private constant _BITPOS_EXTRA_DATA = 232;\r\n\r\n    // Mask of all 256 bits in a packed ownership except the 24 bits for `extraData`.\r\n    uint256 private constant _BITMASK_EXTRA_DATA_COMPLEMENT = (1 << 232) - 1;\r\n\r\n    // The mask of the lower 160 bits for addresses.\r\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\r\n\r\n    // The maximum `quantity` that can be minted with {_mintERC2309}.\r\n    // This limit is to prevent overflows on the address data entries.\r\n    // For a limit of 5000, a total of 3.689e15 calls to {_mintERC2309}\r\n    // is required to cause an overflow, which is unrealistic.\r\n    uint256 private constant _MAX_MINT_ERC2309_QUANTITY_LIMIT = 5000;\r\n\r\n    // The `Transfer` event signature is given by:\r\n    // `keccak256(bytes(\"Transfer(address,address,uint256)\"))`.\r\n    bytes32 private constant _TRANSFER_EVENT_SIGNATURE =\r\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\r\n\r\n    // =============================================================\r\n    //                            STORAGE\r\n    // =============================================================\r\n\r\n    // The next token ID to be minted.\r\n    uint256 private _currentIndex;\r\n\r\n    // The number of tokens burned.\r\n    uint256 private _burnCounter;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    // Mapping from token ID to ownership details\r\n    // An empty struct value does not necessarily mean the token is unowned.\r\n    // See {_packedOwnershipOf} implementation for details.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..159]   `addr`\r\n    // - [160..223] `startTimestamp`\r\n    // - [224]      `burned`\r\n    // - [225]      `nextInitialized`\r\n    // - [232..255] `extraData`\r\n    mapping(uint256 => uint256) private _packedOwnerships;\r\n\r\n    // Mapping owner address to address data.\r\n    //\r\n    // Bits Layout:\r\n    // - [0..63]    `balance`\r\n    // - [64..127]  `numberMinted`\r\n    // - [128..191] `numberBurned`\r\n    // - [192..255] `aux`\r\n    mapping(address => uint256) private _packedAddressData;\r\n\r\n    // Mapping from token ID to approved address.\r\n    mapping(uint256 => TokenApprovalRef) private _tokenApprovals;\r\n\r\n    // Mapping from owner to operator approvals\r\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\r\n\r\n    // =============================================================\r\n    //                          CONSTRUCTOR\r\n    // =============================================================\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _currentIndex = _startTokenId();\r\n    }\r\n\r\n    // =============================================================\r\n    //                   TOKEN COUNTING OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the starting token ID.\r\n     * To change the starting token ID, please override this function.\r\n     */\r\n    function _startTokenId() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the next token ID to be minted.\r\n     */\r\n    function _nextTokenId() internal view virtual returns (uint256) {\r\n        return _currentIndex;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens in existence.\r\n     * Burned tokens will reduce the count.\r\n     * To get the total number of tokens minted, please see {_totalMinted}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        // Counter underflow is impossible as _burnCounter cannot be incremented\r\n        // more than `_currentIndex - _startTokenId()` times.\r\n        unchecked {\r\n            return _currentIndex - _burnCounter - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of tokens minted in the contract.\r\n     */\r\n    function _totalMinted() internal view virtual returns (uint256) {\r\n        // Counter underflow is impossible as `_currentIndex` does not decrement,\r\n        // and it is initialized to `_startTokenId()`.\r\n        unchecked {\r\n            return _currentIndex - _startTokenId();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total number of tokens burned.\r\n     */\r\n    function _totalBurned() internal view virtual returns (uint256) {\r\n        return _burnCounter;\r\n    }\r\n\r\n    // =============================================================\r\n    //                    ADDRESS DATA OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in `owner`'s account.\r\n     */\r\n    function balanceOf(address owner) public view virtual override returns (uint256) {\r\n        if (owner == address(0)) revert BalanceQueryForZeroAddress();\r\n        return _packedAddressData[owner] & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens minted by `owner`.\r\n     */\r\n    function _numberMinted(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_MINTED) & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the number of tokens burned by or on behalf of `owner`.\r\n     */\r\n    function _numberBurned(address owner) internal view returns (uint256) {\r\n        return (_packedAddressData[owner] >> _BITPOS_NUMBER_BURNED) & _BITMASK_ADDRESS_DATA_ENTRY;\r\n    }\r\n\r\n    /**\r\n     * Returns the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     */\r\n    function _getAux(address owner) internal view returns (uint64) {\r\n        return uint64(_packedAddressData[owner] >> _BITPOS_AUX);\r\n    }\r\n\r\n    /**\r\n     * Sets the auxiliary data for `owner`. (e.g. number of whitelist mint slots used).\r\n     * If there are multiple variables, please pack them into a uint64.\r\n     */\r\n    function _setAux(address owner, uint64 aux) internal virtual {\r\n        uint256 packed = _packedAddressData[owner];\r\n        uint256 auxCasted;\r\n        // Cast `aux` with assembly to avoid redundant masking.\r\n        assembly {\r\n            auxCasted := aux\r\n        }\r\n        packed = (packed & _BITMASK_AUX_COMPLEMENT) | (auxCasted << _BITPOS_AUX);\r\n        _packedAddressData[owner] = packed;\r\n    }\r\n\r\n    // =============================================================\r\n    //                            IERC165\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n        // The interface IDs are constants representing the first 4 bytes\r\n        // of the XOR of all function selectors in the interface.\r\n        // See: [ERC165](https://eips.ethereum.org/EIPS/eip-165)\r\n        // (e.g. `bytes4(i.functionA.selector ^ i.functionB.selector ^ ...)`)\r\n        return\r\n            interfaceId == 0x01ffc9a7 || // ERC165 interface ID for ERC165.\r\n            interfaceId == 0x80ac58cd || // ERC165 interface ID for ERC721.\r\n            interfaceId == 0x5b5e139f; // ERC165 interface ID for ERC721Metadata.\r\n    }\r\n\r\n    // =============================================================\r\n    //                        IERC721Metadata\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n        if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length != 0 ? string(abi.encodePacked(baseURI, _toString(tokenId))) : '';\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, it can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return '';\r\n    }\r\n\r\n    // =============================================================\r\n    //                     OWNERSHIPS OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\r\n        return address(uint160(_packedOwnershipOf(tokenId)));\r\n    }\r\n\r\n    /**\r\n     * @dev Gas spent here starts off proportional to the maximum mint batch size.\r\n     * It gradually moves to O(1) as tokens get transferred around over time.\r\n     */\r\n    function _ownershipOf(uint256 tokenId) internal view virtual returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnershipOf(tokenId));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the unpacked `TokenOwnership` struct at `index`.\r\n     */\r\n    function _ownershipAt(uint256 index) internal view virtual returns (TokenOwnership memory) {\r\n        return _unpackedOwnership(_packedOwnerships[index]);\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the ownership slot minted at `index` for efficiency purposes.\r\n     */\r\n    function _initializeOwnershipAt(uint256 index) internal virtual {\r\n        if (_packedOwnerships[index] == 0) {\r\n            _packedOwnerships[index] = _packedOwnershipOf(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns the packed ownership data of `tokenId`.\r\n     */\r\n    function _packedOwnershipOf(uint256 tokenId) private view returns (uint256) {\r\n        uint256 curr = tokenId;\r\n\r\n        unchecked {\r\n            if (_startTokenId() <= curr)\r\n                if (curr < _currentIndex) {\r\n                    uint256 packed = _packedOwnerships[curr];\r\n                    // If not burned.\r\n                    if (packed & _BITMASK_BURNED == 0) {\r\n                        // Invariant:\r\n                        // There will always be an initialized ownership slot\r\n                        // (i.e. `ownership.addr != address(0) && ownership.burned == false`)\r\n                        // before an unintialized ownership slot\r\n                        // (i.e. `ownership.addr == address(0) && ownership.burned == false`)\r\n                        // Hence, `curr` will not underflow.\r\n                        //\r\n                        // We can directly compare the packed value.\r\n                        // If the address is zero, packed will be zero.\r\n                        while (packed == 0) {\r\n                            packed = _packedOwnerships[--curr];\r\n                        }\r\n                        return packed;\r\n                    }\r\n                }\r\n        }\r\n        revert OwnerQueryForNonexistentToken();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the unpacked `TokenOwnership` struct from `packed`.\r\n     */\r\n    function _unpackedOwnership(uint256 packed) private pure returns (TokenOwnership memory ownership) {\r\n        ownership.addr = address(uint160(packed));\r\n        ownership.startTimestamp = uint64(packed >> _BITPOS_START_TIMESTAMP);\r\n        ownership.burned = packed & _BITMASK_BURNED != 0;\r\n        ownership.extraData = uint24(packed >> _BITPOS_EXTRA_DATA);\r\n    }\r\n\r\n    /**\r\n     * @dev Packs ownership data into a single uint256.\r\n     */\r\n    function _packOwnershipData(address owner, uint256 flags) private view returns (uint256 result) {\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, _BITMASK_ADDRESS)\r\n            // `owner | (block.timestamp << _BITPOS_START_TIMESTAMP) | flags`.\r\n            result := or(owner, or(shl(_BITPOS_START_TIMESTAMP, timestamp()), flags))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the `nextInitialized` flag set if `quantity` equals 1.\r\n     */\r\n    function _nextInitializedFlag(uint256 quantity) private pure returns (uint256 result) {\r\n        // For branchless setting of the `nextInitialized` flag.\r\n        assembly {\r\n            // `(quantity == 1) << _BITPOS_NEXT_INITIALIZED`.\r\n            result := shl(_BITPOS_NEXT_INITIALIZED, eq(quantity, 1))\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                      APPROVAL OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the\r\n     * zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual override {\r\n        address owner = ownerOf(tokenId);\r\n\r\n        if (_msgSenderERC721A() != owner)\r\n            if (!isApprovedForAll(owner, _msgSenderERC721A())) {\r\n                revert ApprovalCallerNotOwnerNorApproved();\r\n            }\r\n\r\n        _tokenApprovals[tokenId].value = to;\r\n        emit Approval(owner, to, tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\r\n        if (!_exists(tokenId)) revert ApprovalQueryForNonexistentToken();\r\n\r\n        return _tokenApprovals[tokenId].value;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom}\r\n     * for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual override {\r\n        if (operator == _msgSenderERC721A()) revert ApproveToCaller();\r\n\r\n        _operatorApprovals[_msgSenderERC721A()][operator] = approved;\r\n        emit ApprovalForAll(_msgSenderERC721A(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `tokenId` exists.\r\n     *\r\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\r\n     *\r\n     * Tokens start existing when they are minted. See {_mint}.\r\n     */\r\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\r\n        return\r\n            _startTokenId() <= tokenId &&\r\n            tokenId < _currentIndex && // If within bounds,\r\n            _packedOwnerships[tokenId] & _BITMASK_BURNED == 0; // and not burned.\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `msgSender` is equal to `approvedAddress` or `owner`.\r\n     */\r\n    function _isSenderApprovedOrOwner(\r\n        address approvedAddress,\r\n        address owner,\r\n        address msgSender\r\n    ) private pure returns (bool result) {\r\n        assembly {\r\n            // Mask `owner` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            owner := and(owner, _BITMASK_ADDRESS)\r\n            // Mask `msgSender` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n            msgSender := and(msgSender, _BITMASK_ADDRESS)\r\n            // `msgSender == owner || msgSender == approvedAddress`.\r\n            result := or(eq(msgSender, owner), eq(msgSender, approvedAddress))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the storage slot and value for the approved address of `tokenId`.\r\n     */\r\n    function _getApprovedSlotAndAddress(uint256 tokenId)\r\n        private\r\n        view\r\n        returns (uint256 approvedAddressSlot, address approvedAddress)\r\n    {\r\n        TokenApprovalRef storage tokenApproval = _tokenApprovals[tokenId];\r\n        // The following is equivalent to `approvedAddress = _tokenApprovals[tokenId].value`.\r\n        assembly {\r\n            approvedAddressSlot := tokenApproval.slot\r\n            approvedAddress := sload(approvedAddressSlot)\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                      TRANSFER OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        if (address(uint160(prevOwnershipPacked)) != from) revert TransferFromIncorrectOwner();\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n        // The nested ifs save around 20+ gas over a compound boolean condition.\r\n        if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n            if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n\r\n        if (to == address(0)) revert TransferToZeroAddress();\r\n\r\n        _beforeTokenTransfers(from, to, tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // We can directly increment and decrement the balances.\r\n            --_packedAddressData[from]; // Updates: `balance -= 1`.\r\n            ++_packedAddressData[to]; // Updates: `balance += 1`.\r\n\r\n            // Updates:\r\n            // - `address` to the next owner.\r\n            // - `startTimestamp` to the timestamp of transfering.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                to,\r\n                _BITMASK_NEXT_INITIALIZED | _nextExtraData(from, to, prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, to, tokenId);\r\n        _afterTokenTransfers(from, to, tokenId, 1);\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) public virtual override {\r\n        safeTransferFrom(from, to, tokenId, '');\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token\r\n     * by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) public virtual override {\r\n        transferFrom(from, to, tokenId);\r\n        if (to.code.length != 0)\r\n            if (!_checkContractOnERC721Received(from, to, tokenId, _data)) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before a set of serially-ordered token IDs\r\n     * are about to be transferred. This includes minting.\r\n     * And also called before burning one token.\r\n     *\r\n     * `startTokenId` - the first token ID to be transferred.\r\n     * `quantity` - the amount to be transferred.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _beforeTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after a set of serially-ordered token IDs\r\n     * have been transferred. This includes minting.\r\n     * And also called after one token has been burned.\r\n     *\r\n     * `startTokenId` - the first token ID to be transferred.\r\n     * `quantity` - the amount to be transferred.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` has been\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` has been minted for `to`.\r\n     * - When `to` is zero, `tokenId` has been burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _afterTokenTransfers(\r\n        address from,\r\n        address to,\r\n        uint256 startTokenId,\r\n        uint256 quantity\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target contract.\r\n     *\r\n     * `from` - Previous owner of the given token ID.\r\n     * `to` - Target address that will receive the token.\r\n     * `tokenId` - Token ID to be transferred.\r\n     * `_data` - Optional data to send along with the call.\r\n     *\r\n     * Returns whether the call correctly returned the expected magic value.\r\n     */\r\n    function _checkContractOnERC721Received(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes memory _data\r\n    ) private returns (bool) {\r\n        try ERC721A__IERC721Receiver(to).onERC721Received(_msgSenderERC721A(), from, tokenId, _data) returns (\r\n            bytes4 retval\r\n        ) {\r\n            return retval == ERC721A__IERC721Receiver(to).onERC721Received.selector;\r\n        } catch (bytes memory reason) {\r\n            if (reason.length == 0) {\r\n                revert TransferToNonERC721ReceiverImplementer();\r\n            } else {\r\n                assembly {\r\n                    revert(add(32, reason), mload(reason))\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                        MINT OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _mint(address to, uint256 quantity) internal virtual {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are incredibly unrealistic.\r\n        // `balance` and `numberMinted` have a maximum limit of 2**64.\r\n        // `tokenId` has a maximum limit of 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            uint256 toMasked;\r\n            uint256 end = startTokenId + quantity;\r\n\r\n            // Use assembly to loop and emit the `Transfer` event for gas savings.\r\n            // The duplicated `log4` removes an extra check and reduces stack juggling.\r\n            // The assembly, together with the surrounding Solidity code, have been\r\n            // delicately arranged to nudge the compiler into producing optimized opcodes.\r\n            assembly {\r\n                // Mask `to` to the lower 160 bits, in case the upper bits somehow aren't clean.\r\n                toMasked := and(to, _BITMASK_ADDRESS)\r\n                // Emit the `Transfer` event.\r\n                log4(\r\n                    0, // Start of data (0, since no data).\r\n                    0, // End of data (0, since no data).\r\n                    _TRANSFER_EVENT_SIGNATURE, // Signature.\r\n                    0, // `address(0)`.\r\n                    toMasked, // `to`.\r\n                    startTokenId // `tokenId`.\r\n                )\r\n\r\n                for {\r\n                    let tokenId := add(startTokenId, 1)\r\n                } iszero(eq(tokenId, end)) {\r\n                    tokenId := add(tokenId, 1)\r\n                } {\r\n                    // Emit the `Transfer` event. Similar to above.\r\n                    log4(0, 0, _TRANSFER_EVENT_SIGNATURE, 0, toMasked, tokenId)\r\n                }\r\n            }\r\n            if (toMasked == 0) revert MintToZeroAddress();\r\n\r\n            _currentIndex = end;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * This function is intended for efficient minting only during contract creation.\r\n     *\r\n     * It emits only one {ConsecutiveTransfer} as defined in\r\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309),\r\n     * instead of a sequence of {Transfer} event(s).\r\n     *\r\n     * Calling this function outside of contract creation WILL make your contract\r\n     * non-compliant with the ERC721 standard.\r\n     * For full ERC721 compliance, substituting ERC721 {Transfer} event(s) with the ERC2309\r\n     * {ConsecutiveTransfer} event is only permissible during contract creation.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * Emits a {ConsecutiveTransfer} event.\r\n     */\r\n    function _mintERC2309(address to, uint256 quantity) internal virtual {\r\n        uint256 startTokenId = _currentIndex;\r\n        if (to == address(0)) revert MintToZeroAddress();\r\n        if (quantity == 0) revert MintZeroQuantity();\r\n        if (quantity > _MAX_MINT_ERC2309_QUANTITY_LIMIT) revert MintERC2309QuantityExceedsLimit();\r\n\r\n        _beforeTokenTransfers(address(0), to, startTokenId, quantity);\r\n\r\n        // Overflows are unrealistic due to the above check for `quantity` to be below the limit.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance += quantity`.\r\n            // - `numberMinted += quantity`.\r\n            //\r\n            // We can directly add to the `balance` and `numberMinted`.\r\n            _packedAddressData[to] += quantity * ((1 << _BITPOS_NUMBER_MINTED) | 1);\r\n\r\n            // Updates:\r\n            // - `address` to the owner.\r\n            // - `startTimestamp` to the timestamp of minting.\r\n            // - `burned` to `false`.\r\n            // - `nextInitialized` to `quantity == 1`.\r\n            _packedOwnerships[startTokenId] = _packOwnershipData(\r\n                to,\r\n                _nextInitializedFlag(quantity) | _nextExtraData(address(0), to, 0)\r\n            );\r\n\r\n            emit ConsecutiveTransfer(startTokenId, startTokenId + quantity - 1, address(0), to);\r\n\r\n            _currentIndex = startTokenId + quantity;\r\n        }\r\n        _afterTokenTransfers(address(0), to, startTokenId, quantity);\r\n    }\r\n\r\n    /**\r\n     * @dev Safely mints `quantity` tokens and transfers them to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - If `to` refers to a smart contract, it must implement\r\n     * {IERC721Receiver-onERC721Received}, which is called for each safe transfer.\r\n     * - `quantity` must be greater than 0.\r\n     *\r\n     * See {_mint}.\r\n     *\r\n     * Emits a {Transfer} event for each mint.\r\n     */\r\n    function _safeMint(\r\n        address to,\r\n        uint256 quantity,\r\n        bytes memory _data\r\n    ) internal virtual {\r\n        _mint(to, quantity);\r\n\r\n        unchecked {\r\n            if (to.code.length != 0) {\r\n                uint256 end = _currentIndex;\r\n                uint256 index = end - quantity;\r\n                do {\r\n                    if (!_checkContractOnERC721Received(address(0), to, index++, _data)) {\r\n                        revert TransferToNonERC721ReceiverImplementer();\r\n                    }\r\n                } while (index < end);\r\n                // Reentrancy protection.\r\n                if (_currentIndex != end) revert();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Equivalent to `_safeMint(to, quantity, '')`.\r\n     */\r\n    function _safeMint(address to, uint256 quantity) internal virtual {\r\n        _safeMint(to, quantity, '');\r\n    }\r\n\r\n    // =============================================================\r\n    //                        BURN OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Equivalent to `_burn(tokenId, false)`.\r\n     */\r\n    function _burn(uint256 tokenId) internal virtual {\r\n        _burn(tokenId, false);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId, bool approvalCheck) internal virtual {\r\n        uint256 prevOwnershipPacked = _packedOwnershipOf(tokenId);\r\n\r\n        address from = address(uint160(prevOwnershipPacked));\r\n\r\n        (uint256 approvedAddressSlot, address approvedAddress) = _getApprovedSlotAndAddress(tokenId);\r\n\r\n        if (approvalCheck) {\r\n            // The nested ifs save around 20+ gas over a compound boolean condition.\r\n            if (!_isSenderApprovedOrOwner(approvedAddress, from, _msgSenderERC721A()))\r\n                if (!isApprovedForAll(from, _msgSenderERC721A())) revert TransferCallerNotOwnerNorApproved();\r\n        }\r\n\r\n        _beforeTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Clear approvals from the previous owner.\r\n        assembly {\r\n            if approvedAddress {\r\n                // This is equivalent to `delete _tokenApprovals[tokenId]`.\r\n                sstore(approvedAddressSlot, 0)\r\n            }\r\n        }\r\n\r\n        // Underflow of the sender's balance is impossible because we check for\r\n        // ownership above and the recipient's balance can't realistically overflow.\r\n        // Counter overflow is incredibly unrealistic as `tokenId` would have to be 2**256.\r\n        unchecked {\r\n            // Updates:\r\n            // - `balance -= 1`.\r\n            // - `numberBurned += 1`.\r\n            //\r\n            // We can directly decrement the balance, and increment the number burned.\r\n            // This is equivalent to `packed -= 1; packed += 1 << _BITPOS_NUMBER_BURNED;`.\r\n            _packedAddressData[from] += (1 << _BITPOS_NUMBER_BURNED) - 1;\r\n\r\n            // Updates:\r\n            // - `address` to the last owner.\r\n            // - `startTimestamp` to the timestamp of burning.\r\n            // - `burned` to `true`.\r\n            // - `nextInitialized` to `true`.\r\n            _packedOwnerships[tokenId] = _packOwnershipData(\r\n                from,\r\n                (_BITMASK_BURNED | _BITMASK_NEXT_INITIALIZED) | _nextExtraData(from, address(0), prevOwnershipPacked)\r\n            );\r\n\r\n            // If the next slot may not have been initialized (i.e. `nextInitialized == false`) .\r\n            if (prevOwnershipPacked & _BITMASK_NEXT_INITIALIZED == 0) {\r\n                uint256 nextTokenId = tokenId + 1;\r\n                // If the next slot's address is zero and not burned (i.e. packed value is zero).\r\n                if (_packedOwnerships[nextTokenId] == 0) {\r\n                    // If the next slot is within bounds.\r\n                    if (nextTokenId != _currentIndex) {\r\n                        // Initialize the next slot to maintain correctness for `ownerOf(tokenId + 1)`.\r\n                        _packedOwnerships[nextTokenId] = prevOwnershipPacked;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        emit Transfer(from, address(0), tokenId);\r\n        _afterTokenTransfers(from, address(0), tokenId, 1);\r\n\r\n        // Overflow not possible, as _burnCounter cannot be exceed _currentIndex times.\r\n        unchecked {\r\n            _burnCounter++;\r\n        }\r\n    }\r\n\r\n    // =============================================================\r\n    //                     EXTRA DATA OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Directly sets the extra data for the ownership data `index`.\r\n     */\r\n    function _setExtraDataAt(uint256 index, uint24 extraData) internal virtual {\r\n        uint256 packed = _packedOwnerships[index];\r\n        if (packed == 0) revert OwnershipNotInitializedForExtraData();\r\n        uint256 extraDataCasted;\r\n        // Cast `extraData` with assembly to avoid redundant masking.\r\n        assembly {\r\n            extraDataCasted := extraData\r\n        }\r\n        packed = (packed & _BITMASK_EXTRA_DATA_COMPLEMENT) | (extraDataCasted << _BITPOS_EXTRA_DATA);\r\n        _packedOwnerships[index] = packed;\r\n    }\r\n\r\n    /**\r\n     * @dev Called during each token transfer to set the 24bit `extraData` field.\r\n     * Intended to be overridden by the cosumer contract.\r\n     *\r\n     * `previousExtraData` - the value of `extraData` before transfer.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - When `from` and `to` are both non-zero, `from`'s `tokenId` will be\r\n     * transferred to `to`.\r\n     * - When `from` is zero, `tokenId` will be minted for `to`.\r\n     * - When `to` is zero, `tokenId` will be burned by `from`.\r\n     * - `from` and `to` are never both zero.\r\n     */\r\n    function _extraData(\r\n        address from,\r\n        address to,\r\n        uint24 previousExtraData\r\n    ) internal view virtual returns (uint24) {}\r\n\r\n    /**\r\n     * @dev Returns the next extra data for the packed ownership data.\r\n     * The returned result is shifted into position.\r\n     */\r\n    function _nextExtraData(\r\n        address from,\r\n        address to,\r\n        uint256 prevOwnershipPacked\r\n    ) private view returns (uint256) {\r\n        uint24 extraData = uint24(prevOwnershipPacked >> _BITPOS_EXTRA_DATA);\r\n        return uint256(_extraData(from, to, extraData)) << _BITPOS_EXTRA_DATA;\r\n    }\r\n\r\n    // =============================================================\r\n    //                       OTHER OPERATIONS\r\n    // =============================================================\r\n\r\n    /**\r\n     * @dev Returns the message sender (defaults to `msg.sender`).\r\n     *\r\n     * If you are writing GSN compatible contracts, you need to override this function.\r\n     */\r\n    function _msgSenderERC721A() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a uint256 to its ASCII string decimal representation.\r\n     */\r\n    function _toString(uint256 value) internal pure virtual returns (string memory str) {\r\n        assembly {\r\n            // The maximum value of a uint256 contains 78 digits (1 byte per digit),\r\n            // but we allocate 0x80 bytes to keep the free memory pointer 32-byte word aligned.\r\n            // We will need 1 32-byte word to store the length,\r\n            // and 3 32-byte words to store a maximum of 78 digits. Total: 0x20 + 3 * 0x20 = 0x80.\r\n            str := add(mload(0x40), 0x80)\r\n            // Update the free memory pointer to allocate.\r\n            mstore(0x40, str)\r\n\r\n            // Cache the end of the memory to calculate the length later.\r\n            let end := str\r\n\r\n            // We write the string from rightmost digit to leftmost digit.\r\n            // The following is essentially a do-while loop that also handles the zero case.\r\n            // prettier-ignore\r\n            for { let temp := value } 1 {} {\r\n                str := sub(str, 1)\r\n                // Write the character to the pointer.\r\n                // The ASCII index of the '0' character is 48.\r\n                mstore8(str, add(48, mod(temp, 10)))\r\n                // Keep dividing `temp` until zero.\r\n                temp := div(temp, 10)\r\n                // prettier-ignore\r\n                if iszero(temp) { break }\r\n            }\r\n\r\n            let length := sub(end, str)\r\n            // Move the pointer 32 bytes leftwards to make room for the length.\r\n            str := sub(str, 0x20)\r\n            // Store the length.\r\n            mstore(str, length)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\r\n *\r\n * These functions can be used to verify that a message was signed by the holder\r\n * of the private keys of a given address.\r\n */\r\nlibrary ECDSA {\r\n    enum RecoverError {\r\n        NoError,\r\n        InvalidSignature,\r\n        InvalidSignatureLength,\r\n        InvalidSignatureS,\r\n        InvalidSignatureV\r\n    }\r\n\r\n    function _throwError(RecoverError error) private pure {\r\n        if (error == RecoverError.NoError) {\r\n            return; // no error: do nothing\r\n        } else if (error == RecoverError.InvalidSignature) {\r\n            revert(\"ECDSA: invalid signature\");\r\n        } else if (error == RecoverError.InvalidSignatureLength) {\r\n            revert(\"ECDSA: invalid signature length\");\r\n        } else if (error == RecoverError.InvalidSignatureS) {\r\n            revert(\"ECDSA: invalid signature 's' value\");\r\n        } else if (error == RecoverError.InvalidSignatureV) {\r\n            revert(\"ECDSA: invalid signature 'v' value\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature` or error string. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     *\r\n     * Documentation for signature generation:\r\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\r\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\r\n        // Check the signature length\r\n        // - case 65: r,s,v signature (standard)\r\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\r\n        if (signature.length == 65) {\r\n            bytes32 r;\r\n            bytes32 s;\r\n            uint8 v;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                s := mload(add(signature, 0x40))\r\n                v := byte(0, mload(add(signature, 0x60)))\r\n            }\r\n            return tryRecover(hash, v, r, s);\r\n        } else if (signature.length == 64) {\r\n            bytes32 r;\r\n            bytes32 vs;\r\n            // ecrecover takes the signature parameters, and the only way to get them\r\n            // currently is to use assembly.\r\n            assembly {\r\n                r := mload(add(signature, 0x20))\r\n                vs := mload(add(signature, 0x40))\r\n            }\r\n            return tryRecover(hash, r, vs);\r\n        } else {\r\n            return (address(0), RecoverError.InvalidSignatureLength);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address that signed a hashed message (`hash`) with\r\n     * `signature`. This address can then be used for verification purposes.\r\n     *\r\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\r\n     * this function rejects them by requiring the `s` value to be in the lower\r\n     * half order, and the `v` value to be either 27 or 28.\r\n     *\r\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\r\n     * verification to be secure: it is possible to craft signatures that\r\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\r\n     * this is by receiving a hash of the original message (which may otherwise\r\n     * be too long), and then calling {toEthSignedMessageHash} on it.\r\n     */\r\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\r\n     *\r\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address, RecoverError) {\r\n        bytes32 s;\r\n        uint8 v;\r\n        assembly {\r\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\r\n            v := add(shr(255, vs), 27)\r\n        }\r\n        return tryRecover(hash, v, r, s);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\r\n     *\r\n     * _Available since v4.2._\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        bytes32 r,\r\n        bytes32 vs\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function tryRecover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address, RecoverError) {\r\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\r\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\r\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\r\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\r\n        //\r\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\r\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\r\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\r\n        // these malleable signatures as well.\r\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\r\n            return (address(0), RecoverError.InvalidSignatureS);\r\n        }\r\n        if (v != 27 && v != 28) {\r\n            return (address(0), RecoverError.InvalidSignatureV);\r\n        }\r\n\r\n        // If the signature is valid (and not malleable), return the signer address\r\n        address signer = ecrecover(hash, v, r, s);\r\n        if (signer == address(0)) {\r\n            return (address(0), RecoverError.InvalidSignature);\r\n        }\r\n\r\n        return (signer, RecoverError.NoError);\r\n    }\r\n\r\n    /**\r\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\r\n     * `r` and `s` signature fields separately.\r\n     */\r\n    function recover(\r\n        bytes32 hash,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal pure returns (address) {\r\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\r\n        _throwError(error);\r\n        return recovered;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\r\n        // 32 is the length in bytes of hash,\r\n        // enforced by the type signature above\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\r\n     * produces hash corresponding to the one signed with the\r\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\r\n     * JSON-RPC method as part of EIP-191.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns an Ethereum Signed Typed Data, created from a\r\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\r\n     * to the one signed with the\r\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\r\n     * JSON-RPC method as part of EIP-712.\r\n     *\r\n     * See {recover}.\r\n     */\r\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\r\n    }\r\n}\r\n\r\n//import \"hardhat/console.sol\";\r\n\r\nerror InvalidConfig();\r\nerror MintNotYetStarted();\r\nerror WalletUnauthorizedToMint();\r\nerror InsufficientEthSent();\r\nerror ExcessiveEthSent();\r\nerror MaxSupplyExceeded();\r\nerror NumberOfMintsExceeded();\r\nerror MintingPaused();\r\nerror InvalidReferral();\r\nerror InvalidSignature();\r\nerror BalanceEmpty();\r\nerror TransferFailed();\r\nerror MaxBatchSizeExceeded();\r\nerror WrongPassword();\r\nerror LockedForever();\r\n\r\ncontract Remilia is ERC721A, Ownable {\r\n  //\r\n  // EVENTS\r\n  //\r\n  event Invited(bytes32 indexed key, bytes32 indexed cid);\r\n  event Referral(address indexed affiliate, uint128 wad);\r\n  event Withdrawal(address indexed src, uint128 wad);\r\n\r\n  //\r\n  // STRUCTS\r\n  //\r\n  struct Auth {\r\n    bytes32 key;\r\n    bytes32[] proof;\r\n  }\r\n\r\n  struct Config {\r\n    string unrevealedUri;\r\n    string baseUri;\r\n    address affiliateSigner;\r\n    uint32 maxSupply;\r\n    uint32 maxBatchSize;\r\n    uint32 affiliateFee;\r\n    uint32 platformFee;\r\n  }\r\n\r\n  struct Invite {\r\n    uint128 price;\r\n    uint64 start;\r\n    uint64 limit;\r\n  }\r\n\r\n  struct Invitelist {\r\n    bytes32 key;\r\n    bytes32 cid;\r\n    Invite invite;\r\n  }\r\n\r\n  struct OwnerBalance {\r\n    uint128 owner;\r\n    uint128 platform;\r\n  }\r\n\r\n  //\r\n  // VARIABLES\r\n  //\r\n  mapping(bytes32 => Invite) public invites;\r\n  mapping(address => mapping(bytes32 => uint256)) private minted;\r\n  mapping(address => uint128) public affiliateBalance;\r\n  address private constant PLATFORM = 0x86B82972282Dd22348374bC63fd21620F7ED847B;\r\n  // address private constant PLATFORM = 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC; // TEST (account[2])\r\n  bool public revealed;\r\n  bool public uriUnlocked;\r\n  string public provenance;\r\n  bool public provenanceHashUnlocked;\r\n  OwnerBalance public ownerBalance;\r\n  Config public config;\r\n\r\n  //\r\n  // METHODS\r\n  //\r\n  constructor(\r\n\r\n  ) ERC721A(\"TEST NFT\", \"TEST\") {\r\n  \r\n\tconfig.baseUri = \"\";\r\n\tconfig.affiliateSigner = 0x1f285dD528cf4cDE3081C6d48D9df7A4F8FA9383;\r\n\tconfig.maxSupply = 10000;\r\n\tconfig.maxBatchSize = 1000;\r\n\tconfig.affiliateFee = 1500;\r\n\tconfig.platformFee = 500;\r\n\t/*  \r\n    // affiliateFee max is 50%, platformFee min is 5% and max is 50%\r\n    if (config_.affiliateFee > 5000 || config_.platformFee > 5000 || config_.platformFee < 500) {\r\n      revert InvalidConfig();\r\n    }\r\n    config = config_;*/\r\n    revealed = false;\r\n    uriUnlocked = true;\r\n    provenanceHashUnlocked = true;\r\n  }\r\n\r\n  function mint(\r\n    Auth calldata auth,\r\n    uint256 quantity,\r\n    address affiliate,\r\n    bytes calldata signature\r\n  ) external payable {\r\n    Invite memory i = invites[auth.key];\r\n\r\n    if (affiliate != address(0)) {\r\n      if (affiliate == PLATFORM || affiliate == owner() || affiliate == msg.sender) {\r\n        revert InvalidReferral();\r\n      }\r\n      validateAffiliate(affiliate, signature, config.affiliateSigner);\r\n    }\r\n\r\n    if (i.limit == 0) {\r\n      revert MintingPaused();\r\n    }\r\n\r\n    if (!verify(auth, _msgSender())) {\r\n      revert WalletUnauthorizedToMint();\r\n    }\r\n\r\n    if (block.timestamp < i.start) {\r\n      revert MintNotYetStarted();\r\n    }\r\n\r\n    if (i.limit < config.maxSupply) {\r\n      uint256 totalAfterMint = minted[_msgSender()][auth.key] + quantity;\r\n\r\n      if (totalAfterMint > i.limit) {\r\n        revert NumberOfMintsExceeded();\r\n      }\r\n    }\r\n\r\n    if (quantity > config.maxBatchSize) {\r\n      revert MaxBatchSizeExceeded();\r\n    }\r\n\r\n    if ((_totalMinted() + quantity) > config.maxSupply) {\r\n      revert MaxSupplyExceeded();\r\n    }\r\n\r\n    uint256 cost = computePrice(i.price, quantity);\r\n\r\n    if (msg.value < cost) {\r\n      revert InsufficientEthSent();\r\n    }\r\n\r\n    if (msg.value > cost) {\r\n      revert ExcessiveEthSent();\r\n    }\r\n\r\n    _safeMint(msg.sender, quantity);\r\n\r\n    if (i.limit < config.maxSupply) {\r\n      minted[_msgSender()][auth.key] += quantity;\r\n    }\r\n\r\n    uint128 value = uint128(msg.value);\r\n\r\n    uint128 affiliateWad = 0;\r\n    if (affiliate != address(0)) {\r\n      affiliateWad = (value * config.affiliateFee) / 10000;\r\n      affiliateBalance[affiliate] += affiliateWad;\r\n      emit Referral(affiliate, affiliateWad);\r\n    }\r\n\r\n    OwnerBalance memory balance = ownerBalance;\r\n    uint128 platformWad = (value * config.platformFee) / 10000;\r\n    uint128 ownerWad = value - affiliateWad - platformWad;\r\n    ownerBalance = OwnerBalance({\r\n      owner: balance.owner + ownerWad,\r\n      platform: balance.platform + platformWad\r\n    });\r\n  }\r\n\r\n  function computePrice(uint128 price, uint256 numTokens) public pure returns (uint256){\r\n      // 5+ = 4% off\r\n      // 10+ = 10% off\r\n      // 30+ = 13.33% off\r\n      // 100+ = 20% off\r\n      uint256 cost = price * numTokens;\r\n\r\n      if (numTokens >= 100) {\r\n        return cost * 8 / 10;\r\n      } else if (numTokens >= 30) {\r\n        return cost * 8667 / 10000;\r\n      } else if (numTokens >= 10) {\r\n        return cost * 9 / 10;\r\n      } else if (numTokens >= 5) {\r\n        return cost * 96 / 100;\r\n      } else {\r\n        return cost;\r\n      }\r\n  }\r\n\r\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\r\n    if (!_exists(tokenId)) revert URIQueryForNonexistentToken();\r\n\r\n    if (revealed == false) {\r\n      return string(abi.encodePacked(config.unrevealedUri, Strings.toString(tokenId)));\r\n    }\r\n\r\n    return\r\n      bytes(config.baseUri).length != 0\r\n        ? string(abi.encodePacked(config.baseUri, Strings.toString(tokenId)))\r\n        : \"\";\r\n  }\r\n\r\n  function reveal() public onlyOwner {\r\n    revealed = true;\r\n  }\r\n\r\n  function _startTokenId() internal view virtual override returns (uint256) {\r\n    return 1;\r\n  }\r\n\r\n  /// @notice the password is \"forever\"\r\n  function lockURI(string memory password) public onlyOwner {\r\n    if (keccak256(abi.encodePacked(password)) != keccak256(abi.encodePacked(\"forever\"))) {\r\n      revert WrongPassword();\r\n    }\r\n\r\n    uriUnlocked = false;\r\n  }\r\n\r\n  function setUnrevealedURI(string memory _unrevealedURI) public onlyOwner {\r\n    config.unrevealedUri = _unrevealedURI;\r\n  }\r\n\r\n  function setBaseURI(string memory baseUri_) public onlyOwner {\r\n    if (!uriUnlocked) {\r\n      revert LockedForever();\r\n    }\r\n\r\n    config.baseUri = baseUri_;\r\n  }\r\n\r\n  /// @notice Set BAYC-style provenance once it's calculated\r\n  function setProvenanceHash(string memory provenanceHash) public onlyOwner {\r\n    if (!provenanceHashUnlocked) {\r\n      revert LockedForever();\r\n    }\r\n\r\n    provenance = provenanceHash;\r\n  }\r\n\r\n  /// @notice the password is \"forever\"\r\n  function lockProvenanceHash(string memory password) public onlyOwner {\r\n    if (keccak256(abi.encodePacked(password)) != keccak256(abi.encodePacked(\"forever\"))) {\r\n      revert WrongPassword();\r\n    }\r\n\r\n    provenanceHashUnlocked = false;\r\n  }\r\n\r\n  function withdraw() public {\r\n    uint128 wad = 0;\r\n\r\n    if (msg.sender == owner() || msg.sender == PLATFORM) {\r\n      OwnerBalance memory balance = ownerBalance;\r\n      if (msg.sender == owner()) {\r\n        wad = balance.owner;\r\n        ownerBalance = OwnerBalance({ owner: 0, platform: balance.platform });\r\n      } else {\r\n        wad = balance.platform;\r\n        ownerBalance = OwnerBalance({ owner: balance.owner, platform: 0 });\r\n      }\r\n    } else {\r\n      wad = affiliateBalance[msg.sender];\r\n      affiliateBalance[msg.sender] = 0;\r\n    }\r\n\r\n    if (wad == 0) {\r\n      revert BalanceEmpty();\r\n    }\r\n    (bool success, ) = msg.sender.call{ value: wad }(\"\");\r\n    if (!success) {\r\n      revert TransferFailed();\r\n    }\r\n    emit Withdrawal(msg.sender, wad);\r\n  }\r\n\r\n  function setInvites(Invitelist[] calldata invitelist) external onlyOwner {\r\n    for (uint256 i = 0; i < invitelist.length; i++) {\r\n      Invitelist calldata list = invitelist[i];\r\n      invites[list.key] = list.invite;\r\n      emit Invited(list.key, list.cid);\r\n    }\r\n  }\r\n\r\n  function setInvite(\r\n    bytes32 _key,\r\n    bytes32 _cid,\r\n    Invite calldata _invite\r\n  ) external onlyOwner {\r\n    invites[_key] = _invite;\r\n    emit Invited(_key, _cid);\r\n  }\r\n\r\n  // based on: https://github.com/miguelmota/merkletreejs-solidity/blob/master/contracts/MerkleProof.sol\r\n  function verify(Auth calldata auth, address account) internal pure returns (bool) {\r\n    if (auth.key == \"\") return true;\r\n\r\n    bytes32 computedHash = keccak256(abi.encodePacked(account));\r\n    for (uint256 i = 0; i < auth.proof.length; i++) {\r\n      bytes32 proofElement = auth.proof[i];\r\n      if (computedHash <= proofElement) {\r\n        computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\r\n      } else {\r\n        computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\r\n      }\r\n    }\r\n    return computedHash == auth.key;\r\n  }\r\n\r\n  function validateAffiliate(\r\n    address affiliate,\r\n    bytes memory signature,\r\n    address affiliateSigner\r\n  ) internal view {\r\n\r\n    //console.log(\"affiliate\");\r\n    //console.log(affiliate);\r\n\r\n    bytes32 signedMessagehash = ECDSA.toEthSignedMessageHash(\r\n      keccak256(abi.encodePacked(affiliate))\r\n    );\r\n    address signer = ECDSA.recover(signedMessagehash, signature);\r\n\r\n    //console.log(\"affiliateSigner\");\r\n    //console.log(affiliateSigner);\r\n\r\n    //console.log(\"signer\");\r\n    //console.log(signer);\r\n\r\n    if (signer != affiliateSigner) {\r\n      revert InvalidSignature();\r\n    }\r\n  }\r\n}",
    "data_type": "ERC721",
    "id": "Remilia_0xD3D9ddd0CF0A5F0BFB8f7fcEAe075DF687eAEBaB",
    "file": "./Contract_source_Code/Remilia_0xD3D9ddd0CF0A5F0BFB8f7fcEAe075DF687eAEBaB.sol"
}