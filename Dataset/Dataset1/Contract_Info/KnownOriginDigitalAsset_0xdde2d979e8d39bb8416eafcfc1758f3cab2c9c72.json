{
    "name": "KnownOriginDigitalAsset",
    "address": "0xdde2d979e8d39bb8416eafcfc1758f3cab2c9c72",
    "Compiler Version": "v0.4.21+commit.dfe3193c",
    "Optimization Enabled": "Yes with 200 runs",
    "Other Settings": "default evmVersion",
    "creation_bytecode": "",
    "abi": [
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_interfaceID",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getApproved",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_uri",
                    "type": "string"
                }
            ],
            "name": "setTokenURI",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "purchaseWithFiat",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_edition",
                    "type": "bytes16"
                }
            ],
            "name": "getTypeFromEdition",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalPurchaseValueInWei",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "isPurchased",
            "outputs": [
                {
                    "name": "_purchased",
                    "type": "uint8"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "tokenOfOwnerByIndex",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "tokenIdPointer",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalNumberOfPurchases",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "burn",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "editionOf",
            "outputs": [
                {
                    "name": "_edition",
                    "type": "bytes16"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "exists",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "tokenByIndex",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "tokensOf",
            "outputs": [
                {
                    "name": "_tokenIds",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "InterfaceSignature_ERC721Optional",
            "outputs": [
                {
                    "name": "",
                    "type": "bytes4"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "priceInWei",
            "outputs": [
                {
                    "name": "_priceInWei",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_edition",
                    "type": "bytes16"
                },
                {
                    "name": "_artistAccount",
                    "type": "address"
                }
            ],
            "name": "setArtistAccount",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_priceInWei",
                    "type": "uint256"
                }
            ],
            "name": "setPriceInWei",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "reverseFiatPurchase",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newBaseURI",
                    "type": "string"
                }
            ],
            "name": "setTokenBaseURI",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_approved",
                    "type": "bool"
                }
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "assetInfo",
            "outputs": [
                {
                    "name": "_tokId",
                    "type": "uint256"
                },
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_purchaseState",
                    "type": "uint8"
                },
                {
                    "name": "_priceInWei",
                    "type": "uint256"
                },
                {
                    "name": "_purchaseFromTime",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "editionInfo",
            "outputs": [
                {
                    "name": "_tokId",
                    "type": "uint256"
                },
                {
                    "name": "_edition",
                    "type": "bytes16"
                },
                {
                    "name": "_editionNumber",
                    "type": "uint256"
                },
                {
                    "name": "_tokenURI",
                    "type": "string"
                },
                {
                    "name": "_artistAccount",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_type",
                    "type": "string"
                }
            ],
            "name": "getCommissionForType",
            "outputs": [
                {
                    "name": "_curator",
                    "type": "uint8"
                },
                {
                    "name": "_developer",
                    "type": "uint8"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_type",
                    "type": "string"
                },
                {
                    "name": "_curator",
                    "type": "uint8"
                },
                {
                    "name": "_developer",
                    "type": "uint8"
                }
            ],
            "name": "updateCommission",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "tokenURI",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "curatorAccount",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_edition",
                    "type": "bytes16"
                }
            ],
            "name": "numberOf",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenURI",
                    "type": "string"
                },
                {
                    "name": "_edition",
                    "type": "bytes16"
                },
                {
                    "name": "_priceInWei",
                    "type": "uint256"
                },
                {
                    "name": "_auctionStartDate",
                    "type": "uint32"
                },
                {
                    "name": "_artistAccount",
                    "type": "address"
                }
            ],
            "name": "mint",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "purchaseFromTime",
            "outputs": [
                {
                    "name": "_purchaseFromTime",
                    "type": "uint32"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_operator",
                    "type": "address"
                }
            ],
            "name": "isApprovedForAll",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "purchaseWithEther",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "developerAccount",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "name": "_curatorAccount",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": true,
                    "name": "_buyer",
                    "type": "address"
                }
            ],
            "name": "PurchasedWithEther",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "PurchasedWithFiat",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "PurchasedWithFiatReversed",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_approved",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_approved",
                    "type": "bool"
                }
            ],
            "name": "ApprovalForAll",
            "type": "event"
        }
    ],
    "deployed_bytecode": "0x60606040526004361061020e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461021357806306fdde0314610247578063081812fc146102d1578063095ea7b314610303578063162094c41461032757806318160ddd1461034957806318714bc81461036e57806323b872dd146103845780632852ca81146103ac5780632bbd84e8146103cc5780632c9f4f62146103df5780632f745c59146104195780633b3a1a7a1461043b5780634082b4991461044e57806342842e0e1461046157806342966c68146104895780634be185f01461049f5780634f558e79146104d25780634f6ccce7146104e85780635a3f2672146104fe578063624de3d9146105705780636352211e146105a05780636af79112146105b657806370a08231146105cc57806374b04fa7146105eb5780637e298249146106175780637e38b424146106305780638ef79e911461064657806395d89b4114610664578063a22cb46514610677578063a879fcbb1461069b578063a92ca27d14610706578063afe70413146107c3578063b88d4fde14610832578063c3b7572c1461089e578063c87b56dd146108ca578063d4f74bf4146108e0578063d5b0c0d5146108f3578063e6153d1b14610913578063e6db38c714610958578063e985e9c514610987578063f4ce7c1c146109ac578063f6ec91d5146109b7575b600080fd5b341561021e57600080fd5b610233600160e060020a0319600435166109ca565b604051901515815260200160405180910390f35b341561025257600080fd5b61025a610acf565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561029657808201518382015260200161027e565b50505050905090810190601f1680156102c35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156102dc57600080fd5b6102e7600435610b78565b604051600160a060020a03909116815260200160405180910390f35b341561030e57600080fd5b610325600160a060020a0360043516602435610b93565b005b341561033257600080fd5b610325600480359060248035908101910135610c82565b341561035457600080fd5b61035c610d05565b60405190815260200160405180910390f35b341561037957600080fd5b610325600435610d0b565b341561038f57600080fd5b610325600160a060020a0360043581169060243516604435610dff565b34156103b757600080fd5b61025a6001608060020a031960043516610eaa565b34156103d757600080fd5b61035c610ebf565b34156103ea57600080fd5b6103f5600435610ec5565b6040518082600281111561040557fe5b60ff16815260200191505060405180910390f35b341561042457600080fd5b61035c600160a060020a0360043516602435610ef1565b341561044657600080fd5b61035c610f3f565b341561045957600080fd5b61035c610f45565b341561046c57600080fd5b610325600160a060020a0360043581169060243516604435610f4b565b341561049457600080fd5b610325600435610f81565b34156104aa57600080fd5b6104b56004356110ed565b6040516001608060020a0319909116815260200160405180910390f35b34156104dd57600080fd5b610233600435611129565b34156104f357600080fd5b61035c600435611146565b341561050957600080fd5b61051d600160a060020a036004351661117c565b60405160208082528190810183818151815260200191508051906020019060200280838360005b8381101561055c578082015183820152602001610544565b505050509050019250505060405180910390f35b341561057b57600080fd5b6105836111ff565b604051600160e060020a0319909116815260200160405180910390f35b34156105ab57600080fd5b6102e7600435611223565b34156105c157600080fd5b61035c600435611247565b34156105d757600080fd5b61035c600160a060020a0360043516611270565b34156105f657600080fd5b6103256001608060020a031960043516600160a060020a03602435166112a3565b341561062257600080fd5b610325600435602435611328565b341561063b57600080fd5b6103256004356113ae565b341561065157600080fd5b61032560048035602481019101356114a0565b341561066f57600080fd5b61025a6114e2565b341561068257600080fd5b610325600160a060020a03600435166024351515611555565b34156106a657600080fd5b6106b16004356115e6565b604051858152600160a060020a0385166020820152604081018460028111156106d657fe5b60ff1681526020018381526020018263ffffffff1663ffffffff1681526020019550505050505060405180910390f35b341561071157600080fd5b61071c60043561162f565b6040518581526001608060020a03198516602082015260408101849052600160a060020a038216608082015260a06060820181815290820184818151815260200191508051906020019080838360005b8381101561078457808201518382015260200161076c565b50505050905090810190601f1680156107b15780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34156107ce57600080fd5b61081460046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506116b995505050505050565b60405160ff9283168152911660208201526040908101905180910390f35b341561083d57600080fd5b610325600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061173a95505050505050565b34156108a957600080fd5b610325602460048035828101929101359060ff903581169060443516611779565b34156108d557600080fd5b61025a600435611855565b34156108eb57600080fd5b6102e76119ac565b34156108fe57600080fd5b61035c6001608060020a0319600435166119bb565b341561091e57600080fd5b61032560246004803582810192910135906001608060020a031990351660443563ffffffff60643516600160a060020a03608435166119d7565b341561096357600080fd5b61096e600435611aca565b60405163ffffffff909116815260200160405180910390f35b341561099257600080fd5b610233600160a060020a0360043581169060243516611af9565b610325600435611b27565b34156109c257600080fd5b6102e7611cab565b6000600160e060020a031982167f01ffc9a7000000000000000000000000000000000000000000000000000000001480610a2d5750600160e060020a031982167f80ac58cd00000000000000000000000000000000000000000000000000000000145b80610a615750600160e060020a031982167fb0aa718700000000000000000000000000000000000000000000000000000000145b80610a955750600160e060020a031982167f780e9d6300000000000000000000000000000000000000000000000000000000145b80610ac95750600160e060020a031982167f5b5e139f00000000000000000000000000000000000000000000000000000000145b92915050565b610ad7612a3d565b60048054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b6d5780601f10610b4257610100808354040283529160200191610b6d565b820191906000526020600020905b815481529060010190602001808311610b5057829003601f168201915b505050505090505b90565b600090815260016020526040902054600160a060020a031690565b6000610b9e82611223565b9050600160a060020a038381169082161415610bb957600080fd5b80600160a060020a031633600160a060020a03161480610bde5750610bde8133611af9565b1515610be957600080fd5b6000610bf483610b78565b600160a060020a0316141580610c125750600160a060020a03831615155b15610c7d57600082815260016020526040908190208054600160a060020a031916600160a060020a0386811691821790925591908316907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a35b505050565b600c5433600160a060020a0390811691161480610cad5750600d5433600160a060020a039081169116145b1515610cb857600080fd5b610cc183611129565b1515610ccc57600080fd5b610c7d8383838080601f016020809104026020016040519081016040528181529291906020840183838082843750611cba945050505050565b60085490565b600c5433600160a060020a0390811691161480610d365750600d5433600160a060020a039081169116145b1515610d4157600080fd5b806000808281526012602052604090205460ff166002811115610d6057fe5b14610d6a57600080fd5b60008281526015602052604090205482904263ffffffff9091161115610d8f57600080fd5b610d9883611129565b1515610da357600080fd5b6000838152601260205260409020805460ff19166002179055600f54610dca906001611ced565b600f55827f0bdb01638ac3be385d9ab692cf4661a5777d486d2b58eee4bad9b76374954c7260405160405180910390a2505050565b80610e0a3382611d03565b1515610e1557600080fd5b600160a060020a0384161515610e2a57600080fd5b600160a060020a0383161515610e3f57600080fd5b610e498483611d62565b610e538483611e05565b610e5d8383611f33565b82600160a060020a031684600160a060020a03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405190815260200160405180910390a350505050565b610eb2612a3d565b610ac982600d6010611f8d565b600e5481565b6000610ed082611129565b1515610edb57600080fd5b5060009081526012602052604090205460ff1690565b6000610efc83611270565b8210610f0757600080fd5b600160a060020a0383166000908152600660205260409020805483908110610f2b57fe5b906000526020600020900154905092915050565b60105481565b600f5481565b80610f563382611d03565b1515610f6157600080fd5b610f7b84848460206040519081016040526000815261173a565b50505050565b600c5460009033600160a060020a0390811691161480610faf5750600d5433600160a060020a039081169116145b1515610fba57600080fd5b816000808281526012602052604090205460ff166002811115610fd957fe5b14610fe357600080fd5b600c546000848152602081905260409020548491600160a060020a039182169116148061102c5750600d54600082815260208190526040902054600160a060020a039081169116145b151561103757600080fd5b61104084611129565b151561104b57600080fd5b61105d61105785611223565b85612034565b600084815260136020908152604080832080546001608060020a03198082169092556014845282852085905560158452828520805463ffffffff191690557001000000000000000000000000000000000290811684526016909252909120549093506110ca90600161212f565b6001608060020a0319909316600090815260166020526040902092909255505050565b60006110f882611129565b151561110357600080fd5b506000908152601360205260409020547001000000000000000000000000000000000290565b600090815260208190526040902054600160a060020a0316151590565b6000611150610d05565b821061115b57600080fd5b600880548390811061116957fe5b9060005260206000209001549050919050565b611184612a3d565b6006600083600160a060020a0316600160a060020a031681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156111f357602002820191906000526020600020905b8154815260200190600101908083116111df575b50505050509050919050565b7fb0aa71870000000000000000000000000000000000000000000000000000000081565b600081815260208190526040812054600160a060020a0316801515610ac957600080fd5b600061125282611129565b151561125d57600080fd5b5060009081526014602052604090205490565b6000600160a060020a038216151561128757600080fd5b50600160a060020a031660009081526002602052604090205490565b600c5433600160a060020a03908116911614806112ce5750600d5433600160a060020a039081169116145b15156112d957600080fd5b600160a060020a03811615156112ee57600080fd5b6001608060020a03199190911660009081526017602052604090208054600160a060020a031916600160a060020a03909216919091179055565b600c5433600160a060020a03908116911614806113535750600d5433600160a060020a039081169116145b151561135e57600080fd5b816000808281526012602052604090205460ff16600281111561137d57fe5b1461138757600080fd5b61139083611129565b151561139b57600080fd5b5060009182526014602052604090912055565b600c5433600160a060020a03908116911614806113d95750600d5433600160a060020a039081169116145b15156113e457600080fd5b80600260008281526012602052604090205460ff16600281111561140457fe5b1461140e57600080fd5b60008281526015602052604090205482904263ffffffff909116111561143357600080fd5b61143c83611129565b151561144757600080fd5b6000838152601260205260409020805460ff19169055600f5461146b90600161212f565b600f55827fb86b57a33124aa41b48d51668d80c57a403632f755dc2fb969ca0b0d8aded10a60405160405180910390a2505050565b600c5433600160a060020a03908116911614806114cb5750600d5433600160a060020a039081169116145b15156114d657600080fd5b610c7d600b8383612a4f565b6114ea612a3d565b60058054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b6d5780601f10610b4257610100808354040283529160200191610b6d565b33600160a060020a031682600160a060020a03161415151561157657600080fd5b33600160a060020a0390811660008181526003602090815260408083209487168084529490915290819020805460ff19168515151790557f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3190849051901515815260200160405180910390a35050565b6000818152602081815260408083205460128352818420546014845282852054601590945291909320549394600160a060020a039093169360ff9091169263ffffffff90911690565b600080600061163c612a3d565b600085815260136020908152604080832054700100000000000000000000000000000000026001608060020a03198116845260169092528220548790829061168383611855565b6001608060020a031994909416600090815260176020526040902054929a9199509750919550600160a060020a03169350915050565b60008060006011846040518082805190602001908083835b602083106116f05780518252601f1990920191602091820191016116d1565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040519081900390205460ff8082169661010090920416945092505050565b816117453382611d03565b151561175057600080fd5b61175b858585610dff565b61176785858585612141565b151561177257600080fd5b5050505050565b600c5433600160a060020a03908116911614806117a45750600d5433600160a060020a039081169116145b15156117af57600080fd5b600060ff8316116117bf57600080fd5b600060ff8216116117cf57600080fd5b606460ff83830116106117e157600080fd5b60408051908101604052808360ff1681526020018260ff1681525060118585604051808383808284378201915050925050509081526020016040519081900390208151815460ff191660ff919091161781556020820151815460ff919091166101000261ff00199091161790555050505050565b61185d612a3d565b610ac9600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118f65780601f106118cb576101008083540402835291602001916118f6565b820191906000526020600020905b8154815290600101906020018083116118d957829003601f168201915b5050505050600a60008581526020019081526020016000208054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119a25780601f10611977576101008083540402835291602001916119a2565b820191906000526020600020905b81548152906001019060200180831161198557829003601f168201915b505050505061229b565b600c54600160a060020a031681565b6001608060020a03191660009081526016602052604090205490565b600c5460009033600160a060020a0390811691161480611a055750600d5433600160a060020a039081169116145b1515611a1057600080fd5b600160a060020a0382161515611a2557600080fd5b50601054611a3333826122de565b611a6c8188888080601f016020809104026020016040519081016040528181529291906020840183838082843750611cba945050505050565b6001608060020a0319851660009081526017602052604090208054600160a060020a031916600160a060020a038416179055611aaa8186868661231b565b601054611abe90600163ffffffff611ced16565b60105550505050505050565b6000611ad582611129565b1515611ae057600080fd5b5060009081526015602052604090205463ffffffff1690565b600160a060020a03918216600090815260036020908152604080832093909416825291909152205460ff1690565b6000818160008281526012602052604090205460ff166002811115611b4857fe5b14611b5257600080fd5b600c546000848152602081905260409020548491600160a060020a0391821691161480611b9b5750600d54600082815260208190526040902054600160a060020a039081169116145b1515611ba657600080fd5b60008481526015602052604090205484904263ffffffff9091161115611bcb57600080fd5b611bd485611129565b1515611bdf57600080fd5b60008581526014602052604090205493503484901015611bfe57600080fd5b611c0833866123be565b611c1b611c1486611223565b3387610f4b565b6000858152601260205260409020805460ff19166001179055600e54611c419034611ced565b600e55600f54611c5890600163ffffffff611ced16565b600f556000841115611c6d57611c6d8561244a565b33600160a060020a0316857f3817d9a4b057a227bd53f7fa5d4f61f04e716166b150ff09a06fa830f10cb50160405160405180910390a35050505050565b600d54600160a060020a031681565b611cc382611129565b1515611cce57600080fd5b6000828152600a60205260409020818051610c7d929160200190612acd565b600082820183811015611cfc57fe5b9392505050565b600080611d0f83611223565b905080600160a060020a031684600160a060020a03161480611d4a575083600160a060020a0316611d3f84610b78565b600160a060020a0316145b80611d5a5750611d5a8185611af9565b949350505050565b81600160a060020a0316611d7582611223565b600160a060020a031614611d8857600080fd5b600081815260016020526040902054600160a060020a031615611e01576000818152600160205260408082208054600160a060020a0319169055600160a060020a038416907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259084905190815260200160405180910390a35b5050565b6000806000611e148585612602565b600084815260076020908152604080832054600160a060020a0389168452600690925290912054909350611e4f90600163ffffffff61212f16565b600160a060020a038616600090815260066020526040902080549193509083908110611e7757fe5b6000918252602080832090910154600160a060020a0388168352600690915260409091208054919250829185908110611eac57fe5b6000918252602080832090910192909255600160a060020a0387168152600690915260408120805484908110611ede57fe5b6000918252602080832090910192909255600160a060020a0387168152600690915260409020805490611f15906000198301612b3b565b50600093845260076020526040808520859055908452909220555050565b6000611f3f838361268a565b50600160a060020a03821660009081526006602052604090208054908160018101611f6a8382612b3b565b506000918252602080832091909101849055928152600790925260409091205550565b611f95612a3d565b611f9d612a3d565b60008085850360ff16604051805910611fb35750595b818152601f19601f830116810160200160405290509250600091508590505b8460ff168160ff161015612029578660ff821660108110611fef57fe5b1a60f860020a02838360ff168151811061200557fe5b906020010190600160f860020a031916908160001a90535060019182019101611fd2565b509095945050505050565b6000806000612043858561270c565b6000848152600a60205260409020546002600019610100600184161502019091160415612081576000848152600a6020526040812061208191612b5f565b6000848152600960205260409020546008549093506120a790600163ffffffff61212f16565b91506008828154811015156120b857fe5b9060005260206000209001549050806008848154811015156120d657fe5b600091825260208220019190915560088054849081106120f257fe5b6000918252602090912001556008805490612111906000198301612b3b565b50600093845260096020526040808520859055908452909220555050565b60008282111561213b57fe5b50900390565b60008061215685600160a060020a0316612763565b15156121655760019150612292565b84600160a060020a031663f0b9e5ba8786866040518463ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018084600160a060020a0316600160a060020a0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156121fd5780820151838201526020016121e5565b50505050905090810190601f16801561222a5780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b151561224a57600080fd5b5af1151561225757600080fd5b5050506040518051600160e060020a031981167ff0b9e5ba000000000000000000000000000000000000000000000000000000001493509150505b50949350505050565b6122a3612a3d565b611cfc83836020604051908101604052806000815250602060405190810160405280600081525060206040519081016040526000815261276b565b6122e882826129db565b6008805460008381526009602052604090208190556001810161230b8382612b3b565b5060009182526020909120015550565b6000848152601360209081526040808320805470010000000000000000000000000000000088046001608060020a03199182161790915586168352601690915290205461236f90600163ffffffff611ced16565b6001608060020a0319939093166000908152601660209081526040808320959095559481526014855283812092909255601590935220805463ffffffff191663ffffffff909216919091179055565b60006123c982611223565b9050600160a060020a03831615156123e057600080fd5b600082815260016020526040908190208054600160a060020a031916600160a060020a0386811691821790925591908316907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a3505050565b6000612454612a3d565b61245c612ba6565b60008481526013602052604081205470010000000000000000000000000000000002935080808061248c87610eaa565b95506011866040518082805190602001908083835b602083106124c05780518252601f1990920191602091820191016124a1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060408051908101604052905460ff80821683526101009091041660208201529450845160ff16606434600c54919004919091029450600160a060020a031684156108fc0285604051600060405180830381858888f19350505050151561255857600080fd5b846020015160ff16606434600d54919004919091029350600160a060020a031683156108fc0284604051600060405180830381858888f19350505050151561259f57600080fd5b50506001608060020a031985166000908152601760205260409081902054838301340391600160a060020a0390911690819083156108fc0290849051600060405180830381858888f1935050505015156125f857600080fd5b5050505050505050565b81600160a060020a031661261582611223565b600160a060020a03161461262857600080fd5b600160a060020a03821660009081526002602052604090205461265290600163ffffffff61212f16565b600160a060020a0390921660009081526002602090815260408083209490945591815290819052208054600160a060020a0319169055565b600081815260208190526040902054600160a060020a0316156126ac57600080fd5b6000818152602081815260408083208054600160a060020a031916600160a060020a038716908117909155835260029091529020546126ec906001611ced565b600160a060020a0390921660009081526002602052604090209190915550565b6127168282611d62565b6127208282611e05565b6000600160a060020a0383167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b6000903b1190565b612773612a3d565b61277b612a3d565b612783612a3d565b61278b612a3d565b612793612a3d565b61279b612a3d565b6127a3612a3d565b6127ab612a3d565b6000808e98508d97508c96508b95508a94508451865188518a518c51010101016040518059106127d85750595b818152601f19601f83011681016020016040529050935083925060009150600090505b88518110156128545788818151811061281057fe5b016020015160f860020a900460f860020a0283838060010194508151811061283457fe5b906020010190600160f860020a031916908160001a9053506001016127fb565b5060005b87518110156128b15787818151811061286d57fe5b016020015160f860020a900460f860020a0283838060010194508151811061289157fe5b906020010190600160f860020a031916908160001a905350600101612858565b5060005b865181101561290e578681815181106128ca57fe5b016020015160f860020a900460f860020a028383806001019450815181106128ee57fe5b906020010190600160f860020a031916908160001a9053506001016128b5565b5060005b855181101561296b5785818151811061292757fe5b016020015160f860020a900460f860020a0283838060010194508151811061294b57fe5b906020010190600160f860020a031916908160001a905350600101612912565b5060005b84518110156129c85784818151811061298457fe5b016020015160f860020a900460f860020a028383806001019450815181106129a857fe5b906020010190600160f860020a031916908160001a90535060010161296f565b50909d9c50505050505050505050505050565b600160a060020a03821615156129f057600080fd5b6129fa8282611f33565b600160a060020a03821660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612a905782800160ff19823516178555612abd565b82800160010185558215612abd579182015b82811115612abd578235825591602001919060010190612aa2565b50612ac9929150612bbd565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10612b0e57805160ff1916838001178555612abd565b82800160010185558215612abd579182015b82811115612abd578251825591602001919060010190612b20565b815481835581811511610c7d57600083815260209020610c7d918101908301612bbd565b50805460018160011615610100020316600290046000825580601f10612b855750612ba3565b601f016020900490600052602060002090810190612ba39190612bbd565b50565b604080519081016040526000808252602082015290565b610b7591905b80821115612ac95760008155600101612bc35600a165627a7a723058204c1964d9912e723f1aa7123939f8f4cddb97095a442d81d24167dadbf6641ec50029",
    "constructor_argument": "0000000000000000000000005bfff3cb3231cf81487e80358b644f1a670fd98b",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2018-04-04\r\n*/\r\n\r\npragma solidity ^0.4.21;\r\n\r\n// File: contracts/ERC165.sol\r\n\r\ninterface ERC165 {\r\n  /// @notice Query if a contract implements an interface\r\n  /// @param interfaceID The interface identifier, as specified in ERC-165\r\n  /// @dev Interface identification is specified in ERC-165. This function\r\n  ///  uses less than 30,000 gas.\r\n  /// @return `true` if the contract implements `interfaceID` and\r\n  ///  `interfaceID` is not 0xffffffff, `false` otherwise\r\n  function supportsInterface(bytes4 interfaceID) external pure returns (bool);\r\n}\r\n\r\n// File: contracts/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n\r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n\r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\r\n}\r\n\r\n// File: contracts/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: contracts/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address\r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether there is code in the target address\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address address to check\r\n   * @return whether there is code in the target address\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n\r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;\r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n  * @param _tokenId uint256 ID of the token to validate\r\n  */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns whether the specified token exists\r\n  * @param _tokenId uint256 ID of the token to query the existance of\r\n  * @return whether the token exists\r\n  */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to transfer the given token ID\r\n  * @dev The zero address indicates there is no approved address.\r\n  * @dev There can only be one approved address per token at a given time.\r\n  * @dev Can only be called by the token owner or an approved operator.\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Sets or unsets the approval of a given operator\r\n  * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n  * @param _to operator address to set the approval\r\n  * @param _approved representing the status of the approval to be set\r\n  */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n\r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes data to send along with a safe transfer check\r\n  */\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @dev Reverts if the given address is not indeed the owner of the token\r\n  * @param _owner owner of the token\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to invoke `onERC721Received` on a target address\r\n  * @dev The call is not executed if the target address is not a contract\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _to target address that will receive the tokens\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes optional data to send along with the call\r\n  * @return whether the call correctly returned the expected magic value\r\n  */\r\n  function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool) {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs\r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n  * @dev Constructor function\r\n  */\r\n  function ERC721Token(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token name\r\n  * @return string representing the token name\r\n  */\r\n  function name() public view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token symbol\r\n  * @return string representing the token symbol\r\n  */\r\n  function symbol() public view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns an URI for a given token ID\r\n  * @dev Throws if the token ID does not exist. May return an empty string.\r\n  * @param _tokenId uint256 ID of the token to query\r\n  */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to set the token URI for a given token\r\n  * @dev Reverts if the token ID does not exist\r\n  * @param _tokenId uint256 ID of the token to set its URI\r\n  * @param _uri string URI to assign\r\n  */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n  * @param _owner address owning the tokens list to be accessed\r\n  * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n  * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n  */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of all the tokens in this contract\r\n  * @dev Reverts if the index is greater or equal to the total number of tokens\r\n  * @param _index uint256 representing the index to be accessed of the tokens list\r\n  * @return uint256 token ID at the given index of the tokens list\r\n  */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to address the beneficiary that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n\r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _owner owner of the token to burn\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Strings.sol\r\n\r\nlibrary Strings {\r\n  // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\r\n  function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string) {\r\n    bytes memory _ba = bytes(_a);\r\n    bytes memory _bb = bytes(_b);\r\n    bytes memory _bc = bytes(_c);\r\n    bytes memory _bd = bytes(_d);\r\n    bytes memory _be = bytes(_e);\r\n    string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\r\n    bytes memory babcde = bytes(abcde);\r\n    uint k = 0;\r\n    for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\r\n    for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\r\n    for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\r\n    for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\r\n    for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\r\n    return string(babcde);\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {\r\n    return strConcat(_a, _b, _c, _d, \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b, string _c) internal pure returns (string) {\r\n    return strConcat(_a, _b, _c, \"\", \"\");\r\n  }\r\n\r\n  function strConcat(string _a, string _b) internal pure returns (string) {\r\n    return strConcat(_a, _b, \"\", \"\", \"\");\r\n  }\r\n\r\n  function bytes16ToStr(bytes16 _bytes16, uint8 _start, uint8 _end) internal pure returns (string) {\r\n    bytes memory bytesArray = new bytes(_end - _start);\r\n    uint8 pos = 0;\r\n    for (uint8 i = _start; i < _end; i++) {\r\n      bytesArray[pos] = _bytes16[i];\r\n      pos++;\r\n    }\r\n    return string(bytesArray);\r\n  }\r\n}\r\n\r\n// File: contracts/KnownOriginDigitalAsset.sol\r\n\r\n/**\r\n* @title KnownOriginDigitalAsset\r\n*\r\n* http://www.knownorigin.io/\r\n*\r\n* ERC721 compliant digital assets for real-world artwork.\r\n* BE ORIGINAL. BUY ORIGINAL.\r\n*\r\n*/\r\ncontract KnownOriginDigitalAsset is ERC721Token, ERC165 {\r\n  using SafeMath for uint256;\r\n\r\n  bytes4 constant InterfaceSignature_ERC165 = 0x01ffc9a7;\r\n    /*\r\n    bytes4(keccak256('supportsInterface(bytes4)'));\r\n    */\r\n\r\n  bytes4 constant InterfaceSignature_ERC721Enumerable = 0x780e9d63;\r\n    /*\r\n    bytes4(keccak256('totalSupply()')) ^\r\n    bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^\r\n    bytes4(keccak256('tokenByIndex(uint256)'));\r\n    */\r\n\r\n  bytes4 constant InterfaceSignature_ERC721Metadata = 0x5b5e139f;\r\n    /*\r\n    bytes4(keccak256('name()')) ^\r\n    bytes4(keccak256('symbol()')) ^\r\n    bytes4(keccak256('tokenURI(uint256)'));\r\n    */\r\n\r\n  bytes4 constant InterfaceSignature_ERC721 = 0x80ac58cd;\r\n    /*\r\n    bytes4(keccak256('balanceOf(address)')) ^\r\n    bytes4(keccak256('ownerOf(uint256)')) ^\r\n    bytes4(keccak256('approve(address,uint256)')) ^\r\n    bytes4(keccak256('getApproved(uint256)')) ^\r\n    bytes4(keccak256('setApprovalForAll(address,bool)')) ^\r\n    bytes4(keccak256('isApprovedForAll(address,address)')) ^\r\n    bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^\r\n    bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'));\r\n    */\r\n\r\n  bytes4 public constant InterfaceSignature_ERC721Optional =- 0x4f558e79;\r\n    /*\r\n    bytes4(keccak256('exists(uint256)'));\r\n    */\r\n\r\n  /**\r\n   * @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n   * @dev Returns true for any standardized interfaces implemented by this contract.\r\n   * @param _interfaceID bytes4 the interface to check for\r\n   * @return true for any standardized interfaces implemented by this contract.\r\n   */\r\n  function supportsInterface(bytes4 _interfaceID) external pure returns (bool) {\r\n    return ((_interfaceID == InterfaceSignature_ERC165)\r\n    || (_interfaceID == InterfaceSignature_ERC721)\r\n    || (_interfaceID == InterfaceSignature_ERC721Optional)\r\n    || (_interfaceID == InterfaceSignature_ERC721Enumerable)\r\n    || (_interfaceID == InterfaceSignature_ERC721Metadata));\r\n  }\r\n\r\n  struct CommissionStructure {\r\n    uint8 curator;\r\n    uint8 developer;\r\n  }\r\n\r\n  string internal tokenBaseURI = \"https://ipfs.infura.io/ipfs/\";\r\n\r\n  // creates and owns the original assets all primary purchases transferred to this account\r\n  address public curatorAccount;\r\n\r\n  // the person who is responsible for designing and building the contract\r\n  address public developerAccount;\r\n\r\n  // total wei been processed through the contract\r\n  uint256 public totalPurchaseValueInWei;\r\n\r\n  // number of assets sold of any type\r\n  uint256 public totalNumberOfPurchases;\r\n\r\n  // A pointer to the next token to be minted, zero indexed\r\n  uint256 public tokenIdPointer = 0;\r\n\r\n  enum PurchaseState {Unsold, EtherPurchase, FiatPurchase}\r\n\r\n  mapping(string => CommissionStructure) internal editionTypeToCommission;\r\n  mapping(uint256 => PurchaseState) internal tokenIdToPurchased;\r\n\r\n  mapping(uint256 => bytes16) internal tokenIdToEdition;\r\n  mapping(uint256 => uint256) internal tokenIdToPriceInWei;\r\n  mapping(uint256 => uint32) internal tokenIdToPurchaseFromTime;\r\n\r\n  mapping(bytes16 => uint256) internal editionToEditionNumber;\r\n  mapping(bytes16 => address) internal editionToArtistAccount;\r\n\r\n  event PurchasedWithEther(uint256 indexed _tokenId, address indexed _buyer);\r\n\r\n  event PurchasedWithFiat(uint256 indexed _tokenId);\r\n\r\n  event PurchasedWithFiatReversed(uint256 indexed _tokenId);\r\n\r\n  modifier onlyCurator() {\r\n    require(msg.sender == curatorAccount);\r\n    _;\r\n  }\r\n\r\n  modifier onlyUnsold(uint256 _tokenId) {\r\n    require(tokenIdToPurchased[_tokenId] == PurchaseState.Unsold);\r\n    _;\r\n  }\r\n\r\n  modifier onlyFiatPurchased(uint256 _tokenId) {\r\n    require(tokenIdToPurchased[_tokenId] == PurchaseState.FiatPurchase);\r\n    _;\r\n  }\r\n\r\n  modifier onlyKnownOriginOwnedToken(uint256 _tokenId) {\r\n    require(tokenOwner[_tokenId] == curatorAccount || tokenOwner[_tokenId] == developerAccount);\r\n    _;\r\n  }\r\n\r\n  modifier onlyKnownOrigin() {\r\n    require(msg.sender == curatorAccount || msg.sender == developerAccount);\r\n    _;\r\n  }\r\n\r\n  modifier onlyAfterPurchaseFromTime(uint256 _tokenId) {\r\n    require(tokenIdToPurchaseFromTime[_tokenId] <= block.timestamp);\r\n    _;\r\n  }\r\n\r\n  function KnownOriginDigitalAsset(address _curatorAccount) public ERC721Token(\"KnownOriginDigitalAsset\", \"KODA\") {\r\n    developerAccount = msg.sender;\r\n    curatorAccount = _curatorAccount;\r\n  }\r\n\r\n  // don't accept payment directly to contract\r\n  function() public payable {\r\n    revert();\r\n  }\r\n\r\n  /**\r\n   * @dev Mint a new KODA token\r\n   * @dev Reverts if not called by management\r\n   * @param _tokenURI the IPFS or equivalent hash\r\n   * @param _edition the identifier of the edition - leading 3 bytes are the artist code, trailing 3 bytes are the asset type\r\n   * @param _priceInWei the price of the KODA token\r\n   * @param _auctionStartDate the date when the token is available for sale\r\n   */\r\n  function mint(string _tokenURI, bytes16 _edition, uint256 _priceInWei, uint32 _auctionStartDate, address _artistAccount) external onlyKnownOrigin {\r\n    require(_artistAccount != address(0));\r\n\r\n    uint256 _tokenId = tokenIdPointer;\r\n\r\n    super._mint(msg.sender, _tokenId);\r\n    super._setTokenURI(_tokenId, _tokenURI);\r\n\r\n    editionToArtistAccount[_edition] = _artistAccount;\r\n\r\n    _populateTokenData(_tokenId, _edition, _priceInWei, _auctionStartDate);\r\n\r\n    tokenIdPointer = tokenIdPointer.add(1);\r\n  }\r\n\r\n  function _populateTokenData(uint _tokenId, bytes16 _edition, uint256 _priceInWei, uint32 _purchaseFromTime) internal {\r\n    tokenIdToEdition[_tokenId] = _edition;\r\n    editionToEditionNumber[_edition] = editionToEditionNumber[_edition].add(1);\r\n    tokenIdToPriceInWei[_tokenId] = _priceInWei;\r\n    tokenIdToPurchaseFromTime[_tokenId] = _purchaseFromTime;\r\n  }\r\n\r\n  /**\r\n   * @dev Burns a KODA token\r\n   * @dev Reverts if token is not unsold or not owned by management\r\n   * @param _tokenId the KODA token ID\r\n   */\r\n  function burn(uint256 _tokenId) public onlyKnownOrigin onlyUnsold(_tokenId) onlyKnownOriginOwnedToken(_tokenId) {\r\n    require(exists(_tokenId));\r\n    super._burn(ownerOf(_tokenId), _tokenId);\r\n\r\n    bytes16 edition = tokenIdToEdition[_tokenId];\r\n\r\n    delete tokenIdToEdition[_tokenId];\r\n    delete tokenIdToPriceInWei[_tokenId];\r\n    delete tokenIdToPurchaseFromTime[_tokenId];\r\n\r\n    editionToEditionNumber[edition] = editionToEditionNumber[edition].sub(1);\r\n  }\r\n\r\n  /**\r\n   * @dev Utility function for updating a KODA assets token URI\r\n   * @dev Reverts if not called by management\r\n   * @param _tokenId the KODA token ID\r\n   * @param _uri the token URI, will be concatenated with baseUri\r\n   */\r\n  function setTokenURI(uint256 _tokenId, string _uri) external onlyKnownOrigin {\r\n    require(exists(_tokenId));\r\n    _setTokenURI(_tokenId, _uri);\r\n  }\r\n\r\n  /**\r\n   * @dev Utility function for updating a KODA assets price\r\n   * @dev Reverts if token is not unsold or not called by management\r\n   * @param _tokenId the KODA token ID\r\n   * @param _priceInWei the price in wei\r\n   */\r\n  function setPriceInWei(uint _tokenId, uint256 _priceInWei) external onlyKnownOrigin onlyUnsold(_tokenId) {\r\n    require(exists(_tokenId));\r\n    tokenIdToPriceInWei[_tokenId] = _priceInWei;\r\n  }\r\n\r\n  /**\r\n   * @dev Used to pre-approve a purchaser in order for internal purchase methods\r\n   * to succeed without calling approve() directly\r\n   * @param _tokenId the KODA token ID\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function _approvePurchaser(address _to, uint256 _tokenId) internal {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != address(0));\r\n\r\n    tokenApprovals[_tokenId] = _to;\r\n    Approval(owner, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Updates the commission structure for the given _type\r\n   * @dev Reverts if not called by management\r\n   * @param _type the asset type\r\n   * @param _curator the curators commission\r\n   * @param _developer the developers commission\r\n   */\r\n  function updateCommission(string _type, uint8 _curator, uint8 _developer) external onlyKnownOrigin {\r\n    require(_curator > 0);\r\n    require(_developer > 0);\r\n    require((_curator + _developer) < 100);\r\n\r\n    editionTypeToCommission[_type] = CommissionStructure({curator : _curator, developer : _developer});\r\n  }\r\n\r\n  /**\r\n   * @dev Utility function for retrieving the commission structure for the provided _type\r\n   * @param _type the asset type\r\n   * @return the commission structure or zero for both values when not found\r\n   */\r\n  function getCommissionForType(string _type) public view returns (uint8 _curator, uint8 _developer) {\r\n    CommissionStructure storage commission = editionTypeToCommission[_type];\r\n    return (commission.curator, commission.developer);\r\n  }\r\n\r\n  /**\r\n   * @dev Purchase the provide token in Ether\r\n   * @dev Reverts if token not unsold and not available to be purchased\r\n   * msg.sender will become the owner of the token\r\n   * msg.value needs to be >= to the token priceInWei\r\n   * @param _tokenId the KODA token ID\r\n   * @return true/false depending on success\r\n   */\r\n  function purchaseWithEther(uint256 _tokenId) public payable onlyUnsold(_tokenId) onlyKnownOriginOwnedToken(_tokenId) onlyAfterPurchaseFromTime(_tokenId) {\r\n    require(exists(_tokenId));\r\n\r\n    uint256 priceInWei = tokenIdToPriceInWei[_tokenId];\r\n    require(msg.value >= priceInWei);\r\n\r\n    // approve sender as they have paid the required amount\r\n    _approvePurchaser(msg.sender, _tokenId);\r\n\r\n    // transfer assets from contract creator (curator) to new owner\r\n    safeTransferFrom(ownerOf(_tokenId), msg.sender, _tokenId);\r\n\r\n    // now purchased - don't allow re-purchase!\r\n    tokenIdToPurchased[_tokenId] = PurchaseState.EtherPurchase;\r\n\r\n    totalPurchaseValueInWei = totalPurchaseValueInWei.add(msg.value);\r\n    totalNumberOfPurchases = totalNumberOfPurchases.add(1);\r\n\r\n    // Only apply commission if the art work has value\r\n    if (priceInWei > 0) {\r\n      _applyCommission(_tokenId);\r\n    }\r\n\r\n    PurchasedWithEther(_tokenId, msg.sender);\r\n  }\r\n\r\n  /**\r\n   * @dev Purchase the provide token in FIAT, management command only for taking fiat payments during KODA physical exhibitions\r\n   * Equivalent to taking the KODA token off the market and marking as sold\r\n   * @dev Reverts if token not unsold and not available to be purchased and not called by management\r\n   * @param _tokenId the KODA token ID\r\n   */\r\n  function purchaseWithFiat(uint256 _tokenId) public onlyKnownOrigin onlyUnsold(_tokenId) onlyAfterPurchaseFromTime(_tokenId) {\r\n    require(exists(_tokenId));\r\n\r\n    // now purchased - don't allow re-purchase!\r\n    tokenIdToPurchased[_tokenId] = PurchaseState.FiatPurchase;\r\n\r\n    totalNumberOfPurchases = totalNumberOfPurchases.add(1);\r\n\r\n    PurchasedWithFiat(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Reverse a fiat purchase made by calling purchaseWithFiat()\r\n   * @dev Reverts if token not purchased with fiat and not available to be purchased and not called by management\r\n   * @param _tokenId the KODA token ID\r\n   */\r\n  function reverseFiatPurchase(uint256 _tokenId) public onlyKnownOrigin onlyFiatPurchased(_tokenId) onlyAfterPurchaseFromTime(_tokenId) {\r\n    require(exists(_tokenId));\r\n\r\n    // reset to Unsold\r\n    tokenIdToPurchased[_tokenId] = PurchaseState.Unsold;\r\n\r\n    totalNumberOfPurchases = totalNumberOfPurchases.sub(1);\r\n\r\n    PurchasedWithFiatReversed(_tokenId);\r\n  }\r\n\r\n  /**\r\n   * @dev Internal function for apply commission on purchase\r\n   */\r\n  function _applyCommission(uint256 _tokenId) internal {\r\n    bytes16 edition = tokenIdToEdition[_tokenId];\r\n\r\n    string memory typeCode = getTypeFromEdition(edition);\r\n\r\n    CommissionStructure memory commission = editionTypeToCommission[typeCode];\r\n\r\n    // split & transfer fee for curator\r\n    uint curatorAccountFee = msg.value / 100 * commission.curator;\r\n    curatorAccount.transfer(curatorAccountFee);\r\n\r\n    // split & transfer fee for developer\r\n    uint developerAccountFee = msg.value / 100 * commission.developer;\r\n    developerAccount.transfer(developerAccountFee);\r\n\r\n    // final payment to commission would be the remaining value\r\n    uint finalCommissionTotal = msg.value - (curatorAccountFee + developerAccountFee);\r\n\r\n    // send ether\r\n    address artistAccount = editionToArtistAccount[edition];\r\n    artistAccount.transfer(finalCommissionTotal);\r\n  }\r\n\r\n  /**\r\n   * @dev Retrieve all asset information for the provided token\r\n   * @param _tokenId the KODA token ID\r\n   * @return tokenId, owner, purchaseState, priceInWei, purchaseFromDateTime\r\n   */\r\n  function assetInfo(uint _tokenId) public view returns (\r\n    uint256 _tokId,\r\n    address _owner,\r\n    PurchaseState _purchaseState,\r\n    uint256 _priceInWei,\r\n    uint32 _purchaseFromTime\r\n  ) {\r\n    return (\r\n      _tokenId,\r\n      tokenOwner[_tokenId],\r\n      tokenIdToPurchased[_tokenId],\r\n      tokenIdToPriceInWei[_tokenId],\r\n      tokenIdToPurchaseFromTime[_tokenId]\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @dev Retrieve all edition information for the provided token\r\n   * @param _tokenId the KODA token ID\r\n   * @return tokenId, edition, editionNumber, tokenUri\r\n   */\r\n  function editionInfo(uint256 _tokenId) public view returns (\r\n    uint256 _tokId,\r\n    bytes16 _edition,\r\n    uint256 _editionNumber,\r\n    string _tokenURI,\r\n    address _artistAccount\r\n  ) {\r\n    bytes16 edition = tokenIdToEdition[_tokenId];\r\n    return (\r\n      _tokenId,\r\n      edition,\r\n      editionToEditionNumber[edition],\r\n      tokenURI(_tokenId),\r\n      editionToArtistAccount[edition]\r\n    );\r\n  }\r\n\r\n  function tokensOf(address _owner) public view returns (uint256[] _tokenIds) {\r\n    return ownedTokens[_owner];\r\n  }\r\n\r\n  /**\r\n   * @dev Return the total number of assets in an edition\r\n   * @param _edition the edition identifier\r\n   */\r\n  function numberOf(bytes16 _edition) public view returns (uint256) {\r\n    return editionToEditionNumber[_edition];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the token purchase state for the given token\r\n   * @param _tokenId the KODA token ID\r\n   * @return the purchase sate, either 0, 1, 2, reverts if token not found\r\n   */\r\n  function isPurchased(uint256 _tokenId) public view returns (PurchaseState _purchased) {\r\n    require(exists(_tokenId));\r\n    return tokenIdToPurchased[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the edition identifier for the given token\r\n   * @param _tokenId the KODA token ID\r\n   * @return the edition is found, reverts if token not found\r\n   */\r\n  function editionOf(uint256 _tokenId) public view returns (bytes16 _edition) {\r\n    require(exists(_tokenId));\r\n    return tokenIdToEdition[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the purchase from time for the given token\r\n   * @param _tokenId the KODA token ID\r\n   * @return the purchased from time, reverts if token not found\r\n   */\r\n  function purchaseFromTime(uint256 _tokenId) public view returns (uint32 _purchaseFromTime) {\r\n    require(exists(_tokenId));\r\n    return tokenIdToPurchaseFromTime[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the price in wei for the given token\r\n   * @param _tokenId the KODA token ID\r\n   * @return the price in wei, reverts if token not found\r\n   */\r\n  function priceInWei(uint256 _tokenId) public view returns (uint256 _priceInWei) {\r\n    require(exists(_tokenId));\r\n    return tokenIdToPriceInWei[_tokenId];\r\n  }\r\n\r\n  /**\r\n   * @dev Get the type for the provided edition, useful for testing purposes\r\n   * @param _edition the edition identifier\r\n   * @return the type or blank string\r\n   */\r\n  function getTypeFromEdition(bytes16 _edition) public pure returns (string) {\r\n    // return last 3 chars that represent the edition type\r\n    return Strings.bytes16ToStr(_edition, 13, 16);\r\n  }\r\n\r\n  /**\r\n   * @dev Get token URI fro the given token, useful for testing purposes\r\n   * @param _tokenId the KODA token ID\r\n   * @return the token ID or only the base URI if not found\r\n   */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    return Strings.strConcat(tokenBaseURI, tokenURIs[_tokenId]);\r\n  }\r\n\r\n  /**\r\n   * @dev Allows management to update the base tokenURI path\r\n   * @dev Reverts if not called by management\r\n   * @param _newBaseURI the new base URI to set\r\n   */\r\n  function setTokenBaseURI(string _newBaseURI) external onlyKnownOrigin {\r\n    tokenBaseURI = _newBaseURI;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows management to update the artist account (where commission is sent)\r\n   * @dev Reverts if not called by management\r\n   * @param _edition edition to adjust\r\n    * @param _artistAccount address of artist on blockchain\r\n   */\r\n  function setArtistAccount(bytes16 _edition, address _artistAccount) external onlyKnownOrigin {\r\n    require(_artistAccount != address(0));\r\n\r\n    editionToArtistAccount[_edition] = _artistAccount;\r\n  }\r\n}",
    "data_type": "ERC721",
    "id": "KnownOriginDigitalAsset_0xdde2d979e8d39bb8416eafcfc1758f3cab2c9c72",
    "file": "./Contract_source_Code/KnownOriginDigitalAsset_0xdde2d979e8d39bb8416eafcfc1758f3cab2c9c72.sol"
}