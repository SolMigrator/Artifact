{
    "name": "CrystalBase",
    "address": "0xcfbc9103362aec4ce3089f155c2da2eea1cb7602",
    "Compiler Version": "v0.4.23+commit.124ca40d",
    "Optimization Enabled": "No with 200 runs",
    "Other Settings": "default evmVersion",
    "creation_bytecode": "60806040526001600e553480156200001657600080fd5b506040805190810160405280600d81526020017f43727970746f4372797374616c000000000000000000000000000000000000008152506040805190810160405280600281526020017f4343000000000000000000000000000000000000000000000000000000000000815250336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160069080519060200190620000db929190620000fd565b508060079080519060200190620000f4929190620000fd565b505050620001ac565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200014057805160ff191683800117855562000171565b8280016001018555821562000171579182015b828111156200017057825182559160200191906001019062000153565b5b50905062000180919062000184565b5090565b620001a991905b80821115620001a55760008160009055506001016200018b565b5090565b90565b613b9780620001bc6000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304d2cdbf1461017a57806306fdde03146101bd578063081812fc1461024d578063095ea7b3146102ba57806317ca1a6d1461030757806318160ddd146103e757806323b872dd146104125780632f745c591461047f57806342842e0e146104e05780634f558e791461054d5780634f6ccce7146105925780636352211e146105d357806367e404ce1461064057806370a0823114610697578063876cf0ef146106ee5780638c3b6f0e146108a65780638da5cb5b146108f557806395d89b411461094c5780639c2f7a43146109dc5780639dc29fac14610a65578063a22cb46514610ab2578063a647e8ec14610b01578063af62a70814610b76578063b78ae50a14610bbe578063b88d4fde14610d38578063c87b56dd14610deb578063cb71253514610e91578063e985e9c514610efe578063f2fde38b14610f79575b600080fd5b34801561018657600080fd5b506101bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbc565b005b3480156101c957600080fd5b506101d261105b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102125780820151818401526020810190506101f7565b50505050905090810190601f16801561023f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025957600080fd5b50610278600480360381019080803590602001909291905050506110fd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c657600080fd5b50610305600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061113a565b005b34801561031357600080fd5b50610348600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611300565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561038f578082015181840152602081019050610374565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156103d15780820151818401526020810190506103b6565b5050505090500194505050505060405180910390f35b3480156103f357600080fd5b506103fc6115c1565b6040518082815260200191505060405180910390f35b34801561041e57600080fd5b5061047d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115ce565b005b34801561048b57600080fd5b506104ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116e5565b6040518082815260200191505060405180910390f35b3480156104ec57600080fd5b5061054b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061175c565b005b34801561055957600080fd5b5061057860048036038101908080359060200190929190505050611794565b604051808215151515815260200191505060405180910390f35b34801561059e57600080fd5b506105bd60048036038101908080359060200190929190505050611806565b6040518082815260200191505060405180910390f35b3480156105df57600080fd5b506105fe6004803603810190808035906020019092919050505061183e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064c57600080fd5b506106556118bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106a357600080fd5b506106d8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118e2565b6040518082815260200191505060405180910390f35b3480156106fa57600080fd5b5061072f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611966565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b83811015610782578082015181840152602081019050610767565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b838110156107c45780820151818401526020810190506107a9565b50505050905001868103845289818151815260200191508051906020019060200280838360005b838110156108065780820151818401526020810190506107eb565b50505050905001868103835288818151815260200191508051906020019060200280838360005b8381101561084857808201518184015260208101905061082d565b50505050905001868103825287818151815260200191508051906020019060200280838360005b8381101561088a57808201518184015260208101905061086f565b505050509050019a505050505050505050505060405180910390f35b3480156108b257600080fd5b506108d160048036038101908080359060200190929190505050611cc5565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561090157600080fd5b5061090a611e42565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095857600080fd5b50610961611e67565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109a1578082015181840152602081019050610986565b50505050905090810190601f1680156109ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109e857600080fd5b50610a0760048036038101908080359060200190929190505050611f09565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b348015610a7157600080fd5b50610ab0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061204b565b005b348015610abe57600080fd5b50610aff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506121bd565b005b348015610b0d57600080fd5b50610b60600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506122f9565b6040518082815260200191505060405180910390f35b348015610b8257600080fd5b50610ba160048036038101908080359060200190929190505050612515565b604051808381526020018281526020019250505060405180910390f35b348015610bca57600080fd5b50610c09600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612687565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015610c58578082015181840152602081019050610c3d565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610c9a578082015181840152602081019050610c7f565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610cdc578082015181840152602081019050610cc1565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610d1e578082015181840152602081019050610d03565b505050509050019850505050505050505060405180910390f35b348015610d4457600080fd5b50610de9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506129c5565b005b348015610df757600080fd5b50610e1660048036038101908080359060200190929190505050612a04565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e56578082015181840152602081019050610e3b565b50505050905090810190601f168015610e835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e9d57600080fd5b50610efc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612acd565b005b348015610f0a57600080fd5b50610f5f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c2f565b604051808215151515815260200191505060405180910390f35b348015610f8557600080fd5b50610fba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cc3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561101757600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110f35780601f106110c8576101008083540402835291602001916110f3565b820191906000526020600020905b8154815290600101906020018083116110d657829003601f168201915b5050505050905090565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006111458261183e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561118257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111c257506111c18133612c2f565b5b15156111cd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166111ee836110fd565b73ffffffffffffffffffffffffffffffffffffffff1614158061123e5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156112fb57826003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b6060806000806000611310613a83565b60646040519080825280602002602001820160405280156113405781602001602082028038833980820191505090505b50955060646040519080825280602002602001820160405280156113735781602001602082028038833980820191505090505b509450600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549350600092505b838310156115b857600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561141157fe5b90600052602060002001549150600d600083815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905061151e600187836040015160ff1681518110151561150657fe5b90602001906020020151612e1890919063ffffffff16565b86826040015160ff1681518110151561153357fe5b906020019060200201818152505061158881606001516fffffffffffffffffffffffffffffffff1686836040015160ff1681518110151561157057fe5b90602001906020020151612e1890919063ffffffff16565b85826040015160ff1681518110151561159d57fe5b906020019060200201818152505082806001019350506113bd565b50505050915091565b6000600a80549050905090565b806115d93382612e36565b15156115e457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561162057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561165c57600080fd5b6116668483612ecb565b6116708483613034565b61167a838361324c565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b60006116f0836118e2565b821015156116fd57600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561174957fe5b9060005260206000200154905092915050565b806117673382612e36565b151561177257600080fd5b61178e84848460206040519081016040528060008152506129c5565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b60006118106115c1565b8210151561181d57600080fd5b600a8281548110151561182c57fe5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156118b357600080fd5b80915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561191f57600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060806060806060600080600061197b613a83565b600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549350836040519080825280602002602001820160405280156119ec5781602001602082028038833980820191505090505b50985083604051908082528060200260200182016040528015611a1e5781602001602082028038833980820191505090505b50975083604051908082528060200260200182016040528015611a505781602001602082028038833980820191505090505b50965083604051908082528060200260200182016040528015611a825781602001602082028038833980820191505090505b50955083604051908082528060200260200182016040528015611ab45781602001602082028038833980820191505090505b509450600092505b83831015611cb857600860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515611b1057fe5b90600052602060002001549150600d600083815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050818984815181101515611bfa57fe5b906020019060200201818152505080602001518884815181101515611c1b57fe5b9060200190602002018181525050806040015160ff168784815181101515611c3f57fe5b906020019060200201818152505080606001516fffffffffffffffffffffffffffffffff168684815181101515611c7257fe5b9060200190602002018181525050806080015167ffffffffffffffff168584815181101515611c9d57fe5b90602001906020020181815250508280600101935050611abc565b5050505091939590929450565b6000806000611cd2613a83565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d2e57600080fd5b611d3785611794565b1515611d4257600080fd5b600d600086815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905080602001519350806040015160ff16925080606001516fffffffffffffffffffffffffffffffff169150509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611eff5780601f10611ed457610100808354040283529160200191611eff565b820191906000526020600020905b815481529060010190602001808311611ee257829003601f168201915b5050505050905090565b6000806000806000611f19613a83565b611f2287611794565b1515611f2d57600080fd5b600d600088815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505090506120048761183e565b955080602001519450806040015160ff16935080606001516fffffffffffffffffffffffffffffffff169250806080015167ffffffffffffffff1691505091939590929450565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120a757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166120c78261183e565b73ffffffffffffffffffffffffffffffffffffffff161415156120e957600080fd5b600d600082815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549060ff02191690556002820160016101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160116101000a81549067ffffffffffffffff0219169055505061216b8282613323565b8173ffffffffffffffffffffffffffffffffffffffff167fa40be0e2033315d6cfb4292e7356bcc8f7770857da44e2e3bc1b45df1abe47ae826040518082815260200191505060405180910390a25050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156121f857600080fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b600080612304613a83565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561236057600080fd5b60008611151561236f57600080fd5b60008411151561237e57600080fd5b600e549150600e6000815480929190600101919050555061239f878361345b565b60a0604051908101604052808381526020018781526020018660ff168152602001856fffffffffffffffffffffffffffffffff1681526020014267ffffffffffffffff16815250905080600d6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160020160116101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050508673ffffffffffffffffffffffffffffffffffffffff167fc55cd8e67314b975a2c9e23071d221a1aabd4ecc7b1d00d3bcf1d7617ec34249838888886040518085815260200184815260200183815260200182815260200194505050505060405180910390a28192505050949350505050565b600080612520613a83565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561257c57600080fd5b61258584611794565b151561259057600080fd5b600d600085815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050806040015160ff16925080606001516fffffffffffffffffffffffffffffffff16915050915091565b60608060608060008060008061269b613a83565b60648a1015156126aa57600080fd5b600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205494508460405190808252806020026020018201604052801561271b5781602001602082028038833980820191505090505b5098508460405190808252806020026020018201604052801561274d5781602001602082028038833980820191505090505b5097508460405190808252806020026020018201604052801561277f5781602001602082028038833980820191505090505b509650846040519080825280602002602001820160405280156127b15781602001602082028038833980820191505090505b509550600092505b848310156129b757600860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561280d57fe5b90600052602060002001549150600d600083815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905089816040015160ff1614156129aa5781898581518110151561290657fe5b90602001906020020181815250508060200151888581518110151561292757fe5b906020019060200201818152505080606001516fffffffffffffffffffffffffffffffff16878581518110151561295a57fe5b9060200190602002018181525050806080015167ffffffffffffffff16868481518110151561298557fe5b90602001906020020181815250506129a7600185612e1890919063ffffffff16565b93505b82806001019350506127b9565b505050505092959194509250565b816129d03382612e36565b15156129db57600080fd5b6129e68585856115ce565b6129f2858585856134b2565b15156129fd57600080fd5b5050505050565b6060612a0f82611794565b1515612a1a57600080fd5b600c60008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ac15780601f10612a9657610100808354040283529160200191612ac1565b820191906000526020600020905b815481529060010190602001808311612aa457829003601f168201915b50505050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b2957600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16612b498261183e565b73ffffffffffffffffffffffffffffffffffffffff16141515612b6b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612ba757600080fd5b612bb18382612ecb565b612bbb8382613034565b612bc5828261324c565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d1e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612d5a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808284019050838110151515612e2c57fe5b8091505092915050565b600080612e428361183e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612eb157508373ffffffffffffffffffffffffffffffffffffffff16612e99846110fd565b73ffffffffffffffffffffffffffffffffffffffff16145b80612ec25750612ec18185612c2f565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff16612eeb8261183e565b73ffffffffffffffffffffffffffffffffffffffff16141515612f0d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156130305760006003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b600080600061304385856136a0565b600960008581526020019081526020016000205492506130af6001600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506137cf90919063ffffffff16565b9150600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156130fd57fe5b9060005260206000200154905080600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561315757fe5b90600052602060002001819055506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156131b357fe5b9060005260206000200181905550600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054809190600190036132139190613ad2565b50600060096000868152602001908152602001600020819055508260096000838152602001908152602001600020819055505050505050565b600061325883836137e8565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806009600084815260200190815260200160002081905550505050565b60008060006133328585613942565b6000600c600086815260200190815260200160002080546001816001161561010002031660029004905014151561338357600c600085815260200190815260200160002060006133829190613afe565b5b600b60008581526020019081526020016000205492506133b26001600a805490506137cf90919063ffffffff16565b9150600a828154811015156133c357fe5b9060005260206000200154905080600a848154811015156133e057fe5b90600052602060002001819055506000600a838154811015156133ff57fe5b9060005260206000200181905550600a8054809190600190036134229190613ad2565b506000600b60008681526020019081526020016000208190555082600b6000838152602001908152602001600020819055505050505050565b61346582826139c0565b600a80549050600b600083815260200190815260200160002081905550600a8190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b6000806134d48573ffffffffffffffffffffffffffffffffffffffff16613a70565b15156134e35760019150613697565b8473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156135a557808201518184015260208101905061358a565b50505050905090810190601f1680156135d25780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156135f357600080fd5b505af1158015613607573d6000803e3d6000fd5b505050506040513d602081101561361d57600080fd5b8101908080519060200190929190505050905063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b8173ffffffffffffffffffffffffffffffffffffffff166136c08261183e565b73ffffffffffffffffffffffffffffffffffffffff161415156136e257600080fd5b6137356001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546137cf90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008282111515156137dd57fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561385657600080fd5b816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506138fb6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e1890919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b61394c8282612ecb565b6139568282613034565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156139fc57600080fd5b613a06828261324c565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080823b905060008111915050919050565b60a0604051908101604052806000815260200160008152602001600060ff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681525090565b815481835581811115613af957818360005260206000209182019101613af89190613b46565b5b505050565b50805460018160011615610100020316600290046000825580601f10613b245750613b43565b601f016020900490600052602060002090810190613b429190613b46565b5b50565b613b6891905b80821115613b64576000816000905550600101613b4c565b5090565b905600a165627a7a723058207a59dc8356fd772a95f43d9ba99927b290337e52252dcac7558d2ccb63ab6bc30029",
    "abi": [
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_sender",
                    "type": "address"
                }
            ],
            "name": "setAcceptable",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getApproved",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "getCrystalsSummary",
            "outputs": [
                {
                    "name": "amounts",
                    "type": "uint256[]"
                },
                {
                    "name": "weights",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "tokenOfOwnerByIndex",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "exists",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_index",
                    "type": "uint256"
                }
            ],
            "name": "tokenByIndex",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "sender",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "getCrystals",
            "outputs": [
                {
                    "name": "tokenIds",
                    "type": "uint256[]"
                },
                {
                    "name": "genes",
                    "type": "uint256[]"
                },
                {
                    "name": "kinds",
                    "type": "uint256[]"
                },
                {
                    "name": "weights",
                    "type": "uint256[]"
                },
                {
                    "name": "mintedAts",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getCrystalGeneKindWeight",
            "outputs": [
                {
                    "name": "gene",
                    "type": "uint256"
                },
                {
                    "name": "kind",
                    "type": "uint256"
                },
                {
                    "name": "weight",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "owner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getCrystal",
            "outputs": [
                {
                    "name": "owner",
                    "type": "address"
                },
                {
                    "name": "gene",
                    "type": "uint256"
                },
                {
                    "name": "kind",
                    "type": "uint256"
                },
                {
                    "name": "weight",
                    "type": "uint256"
                },
                {
                    "name": "mintedAt",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "burn",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_approved",
                    "type": "bool"
                }
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_gene",
                    "type": "uint256"
                },
                {
                    "name": "_kind",
                    "type": "uint256"
                },
                {
                    "name": "_weight",
                    "type": "uint256"
                }
            ],
            "name": "mint",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "getCrystalKindWeight",
            "outputs": [
                {
                    "name": "kind",
                    "type": "uint256"
                },
                {
                    "name": "weight",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_kind",
                    "type": "uint256"
                }
            ],
            "name": "getCrystalsByKind",
            "outputs": [
                {
                    "name": "tokenIds",
                    "type": "uint256[]"
                },
                {
                    "name": "genes",
                    "type": "uint256[]"
                },
                {
                    "name": "weights",
                    "type": "uint256[]"
                },
                {
                    "name": "mintedAts",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_data",
                    "type": "bytes"
                }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "tokenURI",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "_transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_operator",
                    "type": "address"
                }
            ],
            "name": "isApprovedForAll",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "CrystalBurned",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "gene",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "kind",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "weight",
                    "type": "uint256"
                }
            ],
            "name": "CrystalMinted",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_from",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_approved",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "_operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "_approved",
                    "type": "bool"
                }
            ],
            "name": "ApprovalForAll",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "name": "previousOwner",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "name": "newOwner",
                    "type": "address"
                }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
        }
    ],
    "deployed_bytecode": "0x608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806304d2cdbf1461017a57806306fdde03146101bd578063081812fc1461024d578063095ea7b3146102ba57806317ca1a6d1461030757806318160ddd146103e757806323b872dd146104125780632f745c591461047f57806342842e0e146104e05780634f558e791461054d5780634f6ccce7146105925780636352211e146105d357806367e404ce1461064057806370a0823114610697578063876cf0ef146106ee5780638c3b6f0e146108a65780638da5cb5b146108f557806395d89b411461094c5780639c2f7a43146109dc5780639dc29fac14610a65578063a22cb46514610ab2578063a647e8ec14610b01578063af62a70814610b76578063b78ae50a14610bbe578063b88d4fde14610d38578063c87b56dd14610deb578063cb71253514610e91578063e985e9c514610efe578063f2fde38b14610f79575b600080fd5b34801561018657600080fd5b506101bb600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610fbc565b005b3480156101c957600080fd5b506101d261105b565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102125780820151818401526020810190506101f7565b50505050905090810190601f16801561023f5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561025957600080fd5b50610278600480360381019080803590602001909291905050506110fd565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156102c657600080fd5b50610305600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061113a565b005b34801561031357600080fd5b50610348600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611300565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561038f578082015181840152602081019050610374565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156103d15780820151818401526020810190506103b6565b5050505090500194505050505060405180910390f35b3480156103f357600080fd5b506103fc6115c1565b6040518082815260200191505060405180910390f35b34801561041e57600080fd5b5061047d600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115ce565b005b34801561048b57600080fd5b506104ca600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506116e5565b6040518082815260200191505060405180910390f35b3480156104ec57600080fd5b5061054b600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061175c565b005b34801561055957600080fd5b5061057860048036038101908080359060200190929190505050611794565b604051808215151515815260200191505060405180910390f35b34801561059e57600080fd5b506105bd60048036038101908080359060200190929190505050611806565b6040518082815260200191505060405180910390f35b3480156105df57600080fd5b506105fe6004803603810190808035906020019092919050505061183e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064c57600080fd5b506106556118bc565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156106a357600080fd5b506106d8600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506118e2565b6040518082815260200191505060405180910390f35b3480156106fa57600080fd5b5061072f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611966565b60405180806020018060200180602001806020018060200186810386528b818151815260200191508051906020019060200280838360005b83811015610782578082015181840152602081019050610767565b5050505090500186810385528a818151815260200191508051906020019060200280838360005b838110156107c45780820151818401526020810190506107a9565b50505050905001868103845289818151815260200191508051906020019060200280838360005b838110156108065780820151818401526020810190506107eb565b50505050905001868103835288818151815260200191508051906020019060200280838360005b8381101561084857808201518184015260208101905061082d565b50505050905001868103825287818151815260200191508051906020019060200280838360005b8381101561088a57808201518184015260208101905061086f565b505050509050019a505050505050505050505060405180910390f35b3480156108b257600080fd5b506108d160048036038101908080359060200190929190505050611cc5565b60405180848152602001838152602001828152602001935050505060405180910390f35b34801561090157600080fd5b5061090a611e42565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561095857600080fd5b50610961611e67565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156109a1578082015181840152602081019050610986565b50505050905090810190601f1680156109ce5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156109e857600080fd5b50610a0760048036038101908080359060200190929190505050611f09565b604051808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018581526020018481526020018381526020018281526020019550505050505060405180910390f35b348015610a7157600080fd5b50610ab0600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061204b565b005b348015610abe57600080fd5b50610aff600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035151590602001909291905050506121bd565b005b348015610b0d57600080fd5b50610b60600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190929190803590602001909291905050506122f9565b6040518082815260200191505060405180910390f35b348015610b8257600080fd5b50610ba160048036038101908080359060200190929190505050612515565b604051808381526020018281526020019250505060405180910390f35b348015610bca57600080fd5b50610c09600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612687565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b83811015610c58578082015181840152602081019050610c3d565b50505050905001858103845288818151815260200191508051906020019060200280838360005b83811015610c9a578082015181840152602081019050610c7f565b50505050905001858103835287818151815260200191508051906020019060200280838360005b83811015610cdc578082015181840152602081019050610cc1565b50505050905001858103825286818151815260200191508051906020019060200280838360005b83811015610d1e578082015181840152602081019050610d03565b505050509050019850505050505050505060405180910390f35b348015610d4457600080fd5b50610de9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506129c5565b005b348015610df757600080fd5b50610e1660048036038101908080359060200190929190505050612a04565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610e56578082015181840152602081019050610e3b565b50505050905090810190601f168015610e835780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610e9d57600080fd5b50610efc600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050612acd565b005b348015610f0a57600080fd5b50610f5f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612c2f565b604051808215151515815260200191505060405180910390f35b348015610f8557600080fd5b50610fba600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050612cc3565b005b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561101757600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b606060068054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156110f35780601f106110c8576101008083540402835291602001916110f3565b820191906000526020600020905b8154815290600101906020018083116110d657829003601f168201915b5050505050905090565b60006003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006111458261183e565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561118257600080fd5b8073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806111c257506111c18133612c2f565b5b15156111cd57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166111ee836110fd565b73ffffffffffffffffffffffffffffffffffffffff1614158061123e5750600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614155b156112fb57826003600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040518082815260200191505060405180910390a35b505050565b6060806000806000611310613a83565b60646040519080825280602002602001820160405280156113405781602001602082028038833980820191505090505b50955060646040519080825280602002602001820160405280156113735781602001602082028038833980820191505090505b509450600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549350600092505b838310156115b857600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561141157fe5b90600052602060002001549150600d600083815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905061151e600187836040015160ff1681518110151561150657fe5b90602001906020020151612e1890919063ffffffff16565b86826040015160ff1681518110151561153357fe5b906020019060200201818152505061158881606001516fffffffffffffffffffffffffffffffff1686836040015160ff1681518110151561157057fe5b90602001906020020151612e1890919063ffffffff16565b85826040015160ff1681518110151561159d57fe5b906020019060200201818152505082806001019350506113bd565b50505050915091565b6000600a80549050905090565b806115d93382612e36565b15156115e457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415151561162057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415151561165c57600080fd5b6116668483612ecb565b6116708483613034565b61167a838361324c565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040518082815260200191505060405180910390a350505050565b60006116f0836118e2565b821015156116fd57600080fd5b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561174957fe5b9060005260206000200154905092915050565b806117673382612e36565b151561177257600080fd5b61178e84848460206040519081016040528060008152506129c5565b50505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415915050919050565b60006118106115c1565b8210151561181d57600080fd5b600a8281548110151561182c57fe5b90600052602060002001549050919050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156118b357600080fd5b80915050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561191f57600080fd5b600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060806060806060600080600061197b613a83565b600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549350836040519080825280602002602001820160405280156119ec5781602001602082028038833980820191505090505b50985083604051908082528060200260200182016040528015611a1e5781602001602082028038833980820191505090505b50975083604051908082528060200260200182016040528015611a505781602001602082028038833980820191505090505b50965083604051908082528060200260200182016040528015611a825781602001602082028038833980820191505090505b50955083604051908082528060200260200182016040528015611ab45781602001602082028038833980820191505090505b509450600092505b83831015611cb857600860008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002083815481101515611b1057fe5b90600052602060002001549150600d600083815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050818984815181101515611bfa57fe5b906020019060200201818152505080602001518884815181101515611c1b57fe5b9060200190602002018181525050806040015160ff168784815181101515611c3f57fe5b906020019060200201818152505080606001516fffffffffffffffffffffffffffffffff168684815181101515611c7257fe5b9060200190602002018181525050806080015167ffffffffffffffff168584815181101515611c9d57fe5b90602001906020020181815250508280600101935050611abc565b5050505091939590929450565b6000806000611cd2613a83565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611d2e57600080fd5b611d3785611794565b1515611d4257600080fd5b600d600086815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905080602001519350806040015160ff16925080606001516fffffffffffffffffffffffffffffffff169150509193909250565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611eff5780601f10611ed457610100808354040283529160200191611eff565b820191906000526020600020905b815481529060010190602001808311611ee257829003601f168201915b5050505050905090565b6000806000806000611f19613a83565b611f2287611794565b1515611f2d57600080fd5b600d600088815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff168152505090506120048761183e565b955080602001519450806040015160ff16935080606001516fffffffffffffffffffffffffffffffff169250806080015167ffffffffffffffff1691505091939590929450565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156120a757600080fd5b8173ffffffffffffffffffffffffffffffffffffffff166120c78261183e565b73ffffffffffffffffffffffffffffffffffffffff161415156120e957600080fd5b600d600082815260200190815260200160002060008082016000905560018201600090556002820160006101000a81549060ff02191690556002820160016101000a8154906fffffffffffffffffffffffffffffffff02191690556002820160116101000a81549067ffffffffffffffff0219169055505061216b8282613323565b8173ffffffffffffffffffffffffffffffffffffffff167fa40be0e2033315d6cfb4292e7356bcc8f7770857da44e2e3bc1b45df1abe47ae826040518082815260200191505060405180910390a25050565b3373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156121f857600080fd5b80600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b600080612304613a83565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561236057600080fd5b60008611151561236f57600080fd5b60008411151561237e57600080fd5b600e549150600e6000815480929190600101919050555061239f878361345b565b60a0604051908101604052808381526020018781526020018660ff168152602001856fffffffffffffffffffffffffffffffff1681526020014267ffffffffffffffff16815250905080600d6000848152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a8154816fffffffffffffffffffffffffffffffff02191690836fffffffffffffffffffffffffffffffff16021790555060808201518160020160116101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055509050508673ffffffffffffffffffffffffffffffffffffffff167fc55cd8e67314b975a2c9e23071d221a1aabd4ecc7b1d00d3bcf1d7617ec34249838888886040518085815260200184815260200183815260200182815260200194505050505060405180910390a28192505050949350505050565b600080612520613a83565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561257c57600080fd5b61258584611794565b151561259057600080fd5b600d600085815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff16815250509050806040015160ff16925080606001516fffffffffffffffffffffffffffffffff16915050915091565b60608060608060008060008061269b613a83565b60648a1015156126aa57600080fd5b600460008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205494508460405190808252806020026020018201604052801561271b5781602001602082028038833980820191505090505b5098508460405190808252806020026020018201604052801561274d5781602001602082028038833980820191505090505b5097508460405190808252806020026020018201604052801561277f5781602001602082028038833980820191505090505b509650846040519080825280602002602001820160405280156127b15781602001602082028038833980820191505090505b509550600092505b848310156129b757600860008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208381548110151561280d57fe5b90600052602060002001549150600d600083815260200190815260200160002060a0604051908101604052908160008201548152602001600182015481526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a90046fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff166fffffffffffffffffffffffffffffffff1681526020016002820160119054906101000a900467ffffffffffffffff1667ffffffffffffffff1667ffffffffffffffff1681525050905089816040015160ff1614156129aa5781898581518110151561290657fe5b90602001906020020181815250508060200151888581518110151561292757fe5b906020019060200201818152505080606001516fffffffffffffffffffffffffffffffff16878581518110151561295a57fe5b9060200190602002018181525050806080015167ffffffffffffffff16868481518110151561298557fe5b90602001906020020181815250506129a7600185612e1890919063ffffffff16565b93505b82806001019350506127b9565b505050505092959194509250565b816129d03382612e36565b15156129db57600080fd5b6129e68585856115ce565b6129f2858585856134b2565b15156129fd57600080fd5b5050505050565b6060612a0f82611794565b1515612a1a57600080fd5b600c60008381526020019081526020016000208054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612ac15780601f10612a9657610100808354040283529160200191612ac1565b820191906000526020600020905b815481529060010190602001808311612aa457829003601f168201915b50505050509050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b2957600080fd5b8273ffffffffffffffffffffffffffffffffffffffff16612b498261183e565b73ffffffffffffffffffffffffffffffffffffffff16141515612b6b57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515612ba757600080fd5b612bb18382612ecb565b612bbb8382613034565b612bc5828261324c565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a3505050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d1e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515612d5a57600080fd5b8073ffffffffffffffffffffffffffffffffffffffff166000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a3806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000808284019050838110151515612e2c57fe5b8091505092915050565b600080612e428361183e565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480612eb157508373ffffffffffffffffffffffffffffffffffffffff16612e99846110fd565b73ffffffffffffffffffffffffffffffffffffffff16145b80612ec25750612ec18185612c2f565b5b91505092915050565b8173ffffffffffffffffffffffffffffffffffffffff16612eeb8261183e565b73ffffffffffffffffffffffffffffffffffffffff16141515612f0d57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff166003600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156130305760006003600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040518082815260200191505060405180910390a35b5050565b600080600061304385856136a0565b600960008581526020019081526020016000205492506130af6001600860008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490506137cf90919063ffffffff16565b9150600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156130fd57fe5b9060005260206000200154905080600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561315757fe5b90600052602060002001819055506000600860008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020838154811015156131b357fe5b9060005260206000200181905550600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054809190600190036132139190613ad2565b50600060096000868152602001908152602001600020819055508260096000838152602001908152602001600020819055505050505050565b600061325883836137e8565b600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020829080600181540180825580915050906001820390600052602060002001600090919290919091505550806009600084815260200190815260200160002081905550505050565b60008060006133328585613942565b6000600c600086815260200190815260200160002080546001816001161561010002031660029004905014151561338357600c600085815260200190815260200160002060006133829190613afe565b5b600b60008581526020019081526020016000205492506133b26001600a805490506137cf90919063ffffffff16565b9150600a828154811015156133c357fe5b9060005260206000200154905080600a848154811015156133e057fe5b90600052602060002001819055506000600a838154811015156133ff57fe5b9060005260206000200181905550600a8054809190600190036134229190613ad2565b506000600b60008681526020019081526020016000208190555082600b6000838152602001908152602001600020819055505050505050565b61346582826139c0565b600a80549050600b600083815260200190815260200160002081905550600a8190806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b6000806134d48573ffffffffffffffffffffffffffffffffffffffff16613a70565b15156134e35760019150613697565b8473ffffffffffffffffffffffffffffffffffffffff1663f0b9e5ba8786866040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156135a557808201518184015260208101905061358a565b50505050905090810190601f1680156135d25780820380516001836020036101000a031916815260200191505b50945050505050602060405180830381600087803b1580156135f357600080fd5b505af1158015613607573d6000803e3d6000fd5b505050506040513d602081101561361d57600080fd5b8101908080519060200190929190505050905063f0b9e5ba7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505b50949350505050565b8173ffffffffffffffffffffffffffffffffffffffff166136c08261183e565b73ffffffffffffffffffffffffffffffffffffffff161415156136e257600080fd5b6137356001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546137cf90919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060006002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60008282111515156137dd57fe5b818303905092915050565b600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561385657600080fd5b816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506138fb6001600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054612e1890919063ffffffff16565b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505050565b61394c8282612ecb565b6139568282613034565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156139fc57600080fd5b613a06828261324c565b8173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040518082815260200191505060405180910390a35050565b600080823b905060008111915050919050565b60a0604051908101604052806000815260200160008152602001600060ff16815260200160006fffffffffffffffffffffffffffffffff168152602001600067ffffffffffffffff1681525090565b815481835581811115613af957818360005260206000209182019101613af89190613b46565b5b505050565b50805460018160011615610100020316600290046000825580601f10613b245750613b43565b601f016020900490600052602060002090810190613b429190613b46565b5b50565b613b6891905b80821115613b64576000816000905550600101613b4c565b5090565b905600a165627a7a723058207a59dc8356fd772a95f43d9ba99927b290337e52252dcac7558d2ccb63ab6bc30029",
    "constructor_argument": "",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2018-05-11\r\n*/\r\n\r\npragma solidity ^0.4.23;\r\n\r\n// File: contracts/zeppelin-solidity/contracts/ownership/Ownable.sol\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() public {\r\n    owner = msg.sender;\r\n  }\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) public onlyOwner {\r\n    require(newOwner != address(0));\r\n    OwnershipTransferred(owner, newOwner);\r\n    owner = newOwner;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/Acceptable.sol\r\n\r\n// @title Acceptable\r\n// @author Takayuki Jimba\r\n// @dev Provide basic access control.\r\ncontract Acceptable is Ownable {\r\n    address public sender;\r\n\r\n    // @dev Throws if called by any address other than the sender.\r\n    modifier onlyAcceptable {\r\n        require(msg.sender == sender);\r\n        _;\r\n    }\r\n\r\n    // @dev Change acceptable address\r\n    // @param _sender The address to new sender\r\n    function setAcceptable(address _sender) public onlyOwner {\r\n        sender = _sender;\r\n    }\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/contracts/token/ERC721/ERC721Basic.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic interface\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Basic {\r\n  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\r\n  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\r\n  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);  \r\n\r\n  function balanceOf(address _owner) public view returns (uint256 _balance);\r\n  function ownerOf(uint256 _tokenId) public view returns (address _owner);\r\n  function exists(uint256 _tokenId) public view returns (bool _exists);\r\n  \r\n  function approve(address _to, uint256 _tokenId) public;\r\n  function getApproved(uint256 _tokenId) public view returns (address _operator);\r\n  \r\n  function setApprovalForAll(address _operator, bool _approved) public;\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool);\r\n\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public;\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;  \r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public;\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/contracts/token/ERC721/ERC721.sol\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Enumerable is ERC721Basic {\r\n  function totalSupply() public view returns (uint256);\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);\r\n  function tokenByIndex(uint256 _index) public view returns (uint256);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Metadata is ERC721Basic {\r\n  function name() public view returns (string _name);\r\n  function symbol() public view returns (string _symbol);\r\n  function tokenURI(uint256 _tokenId) public view returns (string);\r\n}\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, full implementation interface\r\n * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/contracts/token/ERC721/DeprecatedERC721.sol\r\n\r\n/**\r\n * @title ERC-721 methods shipped in OpenZeppelin v1.7.0, removed in the latest version of the standard\r\n * @dev Only use this interface for compatibility with previously deployed contracts\r\n * @dev Use ERC721 for interacting with new contracts which are standard-compliant\r\n */\r\ncontract DeprecatedERC721 is ERC721 {\r\n  function takeOwnership(uint256 _tokenId) public;\r\n  function transfer(address _to, uint256 _tokenId) public;\r\n  function tokensOf(address _owner) public view returns (uint256[]);\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/contracts/AddressUtils.sol\r\n\r\n/**\r\n * Utility library of inline functions on addresses\r\n */\r\nlibrary AddressUtils {\r\n\r\n  /**\r\n   * Returns whether there is code in the target address\r\n   * @dev This function will return false if invoked during the constructor of a contract,\r\n   *  as the code is not actually created until after the constructor finishes.\r\n   * @param addr address address to check\r\n   * @return whether there is code in the target address\r\n   */\r\n  function isContract(address addr) internal view returns (bool) {\r\n    uint256 size;\r\n    assembly { size := extcodesize(addr) }\r\n    return size > 0;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/contracts/math/SafeMath.sol\r\n\r\n/**\r\n * @title SafeMath\r\n * @dev Math operations with safety checks that throw on error\r\n */\r\nlibrary SafeMath {\r\n\r\n  /**\r\n  * @dev Multiplies two numbers, throws on overflow.\r\n  */\r\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    if (a == 0) {\r\n      return 0;\r\n    }\r\n    uint256 c = a * b;\r\n    assert(c / a == b);\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Integer division of two numbers, truncating the quotient.\r\n  */\r\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n    uint256 c = a / b;\r\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n    return c;\r\n  }\r\n\r\n  /**\r\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\r\n  */\r\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    assert(b <= a);\r\n    return a - b;\r\n  }\r\n\r\n  /**\r\n  * @dev Adds two numbers, throws on overflow.\r\n  */\r\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    assert(c >= a);\r\n    return c;\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/contracts/token/ERC721/ERC721Receiver.sol\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n *  from ERC721 asset contracts.\r\n */\r\ncontract ERC721Receiver {\r\n  /**\r\n   * @dev Magic value to be returned upon successful reception of an NFT\r\n   *  Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`,\r\n   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n   */\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; \r\n\r\n  /**\r\n   * @notice Handle the receipt of an NFT\r\n   * @dev The ERC721 smart contract calls this function on the recipient\r\n   *  after a `safetransfer`. This function MAY throw to revert and reject the\r\n   *  transfer. This function MUST use 50,000 gas or less. Return of other\r\n   *  than the magic value MUST result in the transaction being reverted.\r\n   *  Note: the contract address is always the message sender.\r\n   * @param _from The sending address \r\n   * @param _tokenId The NFT identifier which is being transfered\r\n   * @param _data Additional data with no specified format\r\n   * @return `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n   */\r\n  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/contracts/token/ERC721/ERC721BasicToken.sol\r\n\r\n/**\r\n * @title ERC721 Non-Fungible Token Standard basic implementation\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721BasicToken is ERC721Basic {\r\n  using SafeMath for uint256;\r\n  using AddressUtils for address;\r\n  \r\n  // Equals to `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`\r\n  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`\r\n  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba; \r\n\r\n  // Mapping from token ID to owner\r\n  mapping (uint256 => address) internal tokenOwner;\r\n\r\n  // Mapping from token ID to approved address\r\n  mapping (uint256 => address) internal tokenApprovals;\r\n\r\n  // Mapping from owner to number of owned token\r\n  mapping (address => uint256) internal ownedTokensCount;\r\n\r\n  // Mapping from owner to operator approvals\r\n  mapping (address => mapping (address => bool)) internal operatorApprovals;\r\n\r\n  /**\r\n  * @dev Guarantees msg.sender is owner of the given token\r\n  * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender\r\n  */\r\n  modifier onlyOwnerOf(uint256 _tokenId) {\r\n    require(ownerOf(_tokenId) == msg.sender);\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator\r\n  * @param _tokenId uint256 ID of the token to validate\r\n  */\r\n  modifier canTransfer(uint256 _tokenId) {\r\n    require(isApprovedOrOwner(msg.sender, _tokenId));\r\n    _;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the balance of the specified address\r\n  * @param _owner address to query the balance of\r\n  * @return uint256 representing the amount owned by the passed address\r\n  */\r\n  function balanceOf(address _owner) public view returns (uint256) {\r\n    require(_owner != address(0));\r\n    return ownedTokensCount[_owner];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the owner of the specified token ID\r\n  * @param _tokenId uint256 ID of the token to query the owner of\r\n  * @return owner address currently marked as the owner of the given token ID\r\n  */\r\n  function ownerOf(uint256 _tokenId) public view returns (address) {\r\n    address owner = tokenOwner[_tokenId];\r\n    require(owner != address(0));\r\n    return owner;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns whether the specified token exists\r\n  * @param _tokenId uint256 ID of the token to query the existance of\r\n  * @return whether the token exists\r\n  */\r\n  function exists(uint256 _tokenId) public view returns (bool) {\r\n    address owner = tokenOwner[_tokenId];\r\n    return owner != address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Approves another address to transfer the given token ID\r\n  * @dev The zero address indicates there is no approved address.\r\n  * @dev There can only be one approved address per token at a given time.\r\n  * @dev Can only be called by the token owner or an approved operator.\r\n  * @param _to address to be approved for the given token ID\r\n  * @param _tokenId uint256 ID of the token to be approved\r\n  */\r\n  function approve(address _to, uint256 _tokenId) public {\r\n    address owner = ownerOf(_tokenId);\r\n    require(_to != owner);\r\n    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));\r\n\r\n    if (getApproved(_tokenId) != address(0) || _to != address(0)) {\r\n      tokenApprovals[_tokenId] = _to;\r\n      Approval(owner, _to, _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @dev Gets the approved address for a token ID, or zero if no address set\r\n   * @param _tokenId uint256 ID of the token to query the approval of\r\n   * @return address currently approved for a the given token ID\r\n   */\r\n  function getApproved(uint256 _tokenId) public view returns (address) {\r\n    return tokenApprovals[_tokenId];\r\n  }\r\n\r\n\r\n  /**\r\n  * @dev Sets or unsets the approval of a given operator\r\n  * @dev An operator is allowed to transfer all tokens of the sender on their behalf\r\n  * @param _to operator address to set the approval\r\n  * @param _approved representing the status of the approval to be set\r\n  */\r\n  function setApprovalForAll(address _to, bool _approved) public {\r\n    require(_to != msg.sender);\r\n    operatorApprovals[msg.sender][_to] = _approved;\r\n    ApprovalForAll(msg.sender, _to, _approved);\r\n  }\r\n\r\n  /**\r\n   * @dev Tells whether an operator is approved by a given owner\r\n   * @param _owner owner address which you want to query the approval of\r\n   * @param _operator operator address which you want to query the approval of\r\n   * @return bool whether the given operator is approved by the given owner\r\n   */\r\n  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {\r\n    return operatorApprovals[_owner][_operator];\r\n  }\r\n\r\n  /**\r\n  * @dev Transfers the ownership of a given token ID to another address\r\n  * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    require(_from != address(0));\r\n    require(_to != address(0));\r\n\r\n    clearApproval(_from, _tokenId);\r\n    removeTokenFrom(_from, _tokenId);\r\n    addTokenTo(_to, _tokenId);\r\n    \r\n    Transfer(_from, _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {\r\n    safeTransferFrom(_from, _to, _tokenId, \"\");\r\n  }\r\n\r\n  /**\r\n  * @dev Safely transfers the ownership of a given token ID to another address\r\n  * @dev If the target address is a contract, it must implement `onERC721Received`,\r\n  *  which is called upon a safe transfer, and return the magic value\r\n  *  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`; otherwise,\r\n  *  the transfer is reverted.\r\n  * @dev Requires the msg sender to be the owner, approved, or operator\r\n  * @param _from current owner of the token\r\n  * @param _to address to receive the ownership of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes data to send along with a safe transfer check\r\n  */\r\n  function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) public canTransfer(_tokenId) {\r\n    transferFrom(_from, _to, _tokenId);\r\n    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));\r\n  }\r\n\r\n  /**\r\n   * @dev Returns whether the given spender can transfer a given token ID\r\n   * @param _spender address of the spender to query\r\n   * @param _tokenId uint256 ID of the token to be transferred\r\n   * @return bool whether the msg.sender is approved for the given token ID,\r\n   *  is an operator of the owner, or is the owner of the token\r\n   */\r\n  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {\r\n    address owner = ownerOf(_tokenId);\r\n    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to The address that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    require(_to != address(0));\r\n    addTokenTo(_to, _tokenId);\r\n    Transfer(address(0), _to, _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    clearApproval(_owner, _tokenId);\r\n    removeTokenFrom(_owner, _tokenId);\r\n    Transfer(_owner, address(0), _tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to clear current approval of a given token ID\r\n  * @dev Reverts if the given address is not indeed the owner of the token\r\n  * @param _owner owner of the token\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  */\r\n  function clearApproval(address _owner, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _owner);\r\n    if (tokenApprovals[_tokenId] != address(0)) {\r\n      tokenApprovals[_tokenId] = address(0);\r\n      Approval(_owner, address(0), _tokenId);\r\n    }\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    require(tokenOwner[_tokenId] == address(0));\r\n    tokenOwner[_tokenId] = _to;\r\n    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    require(ownerOf(_tokenId) == _from);\r\n    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);\r\n    tokenOwner[_tokenId] = address(0);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to invoke `onERC721Received` on a target address\r\n  * @dev The call is not executed if the target address is not a contract\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _to target address that will receive the tokens\r\n  * @param _tokenId uint256 ID of the token to be transferred\r\n  * @param _data bytes optional data to send along with the call\r\n  * @return whether the call correctly returned the expected magic value\r\n  */\r\n  function checkAndCallSafeTransfer(address _from, address _to, uint256 _tokenId, bytes _data) internal returns (bool) {\r\n    if (!_to.isContract()) {\r\n      return true;\r\n    }\r\n    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);\r\n    return (retval == ERC721_RECEIVED);\r\n  }\r\n}\r\n\r\n// File: contracts/zeppelin-solidity/contracts/token/ERC721/ERC721Token.sol\r\n\r\n/**\r\n * @title Full ERC721 Token\r\n * This implementation includes all the required and some optional functionality of the ERC721 standard\r\n * Moreover, it includes approve all functionality using operator terminology\r\n * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n */\r\ncontract ERC721Token is ERC721, ERC721BasicToken {\r\n  // Token name\r\n  string internal name_;\r\n\r\n  // Token symbol\r\n  string internal symbol_;\r\n\r\n  // Mapping from owner to list of owned token IDs\r\n  mapping (address => uint256[]) internal ownedTokens;\r\n\r\n  // Mapping from token ID to index of the owner tokens list\r\n  mapping(uint256 => uint256) internal ownedTokensIndex;\r\n\r\n  // Array with all token ids, used for enumeration\r\n  uint256[] internal allTokens;\r\n\r\n  // Mapping from token id to position in the allTokens array\r\n  mapping(uint256 => uint256) internal allTokensIndex;\r\n\r\n  // Optional mapping for token URIs \r\n  mapping(uint256 => string) internal tokenURIs;\r\n\r\n  /**\r\n  * @dev Constructor function\r\n  */\r\n  function ERC721Token(string _name, string _symbol) public {\r\n    name_ = _name;\r\n    symbol_ = _symbol;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token name\r\n  * @return string representing the token name\r\n  */\r\n  function name() public view returns (string) {\r\n    return name_;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token symbol\r\n  * @return string representing the token symbol\r\n  */\r\n  function symbol() public view returns (string) {\r\n    return symbol_;\r\n  }\r\n\r\n  /**\r\n  * @dev Returns an URI for a given token ID\r\n  * @dev Throws if the token ID does not exist. May return an empty string.\r\n  * @param _tokenId uint256 ID of the token to query\r\n  */\r\n  function tokenURI(uint256 _tokenId) public view returns (string) {\r\n    require(exists(_tokenId));\r\n    return tokenURIs[_tokenId];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to set the token URI for a given token\r\n  * @dev Reverts if the token ID does not exist\r\n  * @param _tokenId uint256 ID of the token to set its URI\r\n  * @param _uri string URI to assign\r\n  */\r\n  function _setTokenURI(uint256 _tokenId, string _uri) internal {\r\n    require(exists(_tokenId));\r\n    tokenURIs[_tokenId] = _uri;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of the tokens list of the requested owner\r\n  * @param _owner address owning the tokens list to be accessed\r\n  * @param _index uint256 representing the index to be accessed of the requested tokens list\r\n  * @return uint256 token ID at the given index of the tokens list owned by the requested address\r\n  */\r\n  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {\r\n    require(_index < balanceOf(_owner));\r\n    return ownedTokens[_owner][_index];\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the total amount of tokens stored by the contract\r\n  * @return uint256 representing the total amount of tokens\r\n  */\r\n  function totalSupply() public view returns (uint256) {\r\n    return allTokens.length;\r\n  }\r\n\r\n  /**\r\n  * @dev Gets the token ID at a given index of all the tokens in this contract\r\n  * @dev Reverts if the index is greater or equal to the total number of tokens\r\n  * @param _index uint256 representing the index to be accessed of the tokens list\r\n  * @return uint256 token ID at the given index of the tokens list\r\n  */\r\n  function tokenByIndex(uint256 _index) public view returns (uint256) {\r\n    require(_index < totalSupply());\r\n    return allTokens[_index];\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to add a token ID to the list of a given address\r\n  * @param _to address representing the new owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address\r\n  */\r\n  function addTokenTo(address _to, uint256 _tokenId) internal {\r\n    super.addTokenTo(_to, _tokenId);\r\n    uint256 length = ownedTokens[_to].length;\r\n    ownedTokens[_to].push(_tokenId);\r\n    ownedTokensIndex[_tokenId] = length;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to remove a token ID from the list of a given address\r\n  * @param _from address representing the previous owner of the given token ID\r\n  * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address\r\n  */\r\n  function removeTokenFrom(address _from, uint256 _tokenId) internal {\r\n    super.removeTokenFrom(_from, _tokenId);\r\n\r\n    uint256 tokenIndex = ownedTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);\r\n    uint256 lastToken = ownedTokens[_from][lastTokenIndex];\r\n\r\n    ownedTokens[_from][tokenIndex] = lastToken;\r\n    ownedTokens[_from][lastTokenIndex] = 0;\r\n    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to\r\n    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping\r\n    // the lastToken to the first position, and then dropping the element placed in the last position of the list\r\n\r\n    ownedTokens[_from].length--;\r\n    ownedTokensIndex[_tokenId] = 0;\r\n    ownedTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to mint a new token\r\n  * @dev Reverts if the given token ID already exists\r\n  * @param _to address the beneficiary that will own the minted token\r\n  * @param _tokenId uint256 ID of the token to be minted by the msg.sender\r\n  */\r\n  function _mint(address _to, uint256 _tokenId) internal {\r\n    super._mint(_to, _tokenId);\r\n    \r\n    allTokensIndex[_tokenId] = allTokens.length;\r\n    allTokens.push(_tokenId);\r\n  }\r\n\r\n  /**\r\n  * @dev Internal function to burn a specific token\r\n  * @dev Reverts if the token does not exist\r\n  * @param _owner owner of the token to burn\r\n  * @param _tokenId uint256 ID of the token being burned by the msg.sender\r\n  */\r\n  function _burn(address _owner, uint256 _tokenId) internal {\r\n    super._burn(_owner, _tokenId);\r\n\r\n    // Clear metadata (if any)\r\n    if (bytes(tokenURIs[_tokenId]).length != 0) {\r\n      delete tokenURIs[_tokenId];\r\n    }\r\n\r\n    // Reorg all tokens array\r\n    uint256 tokenIndex = allTokensIndex[_tokenId];\r\n    uint256 lastTokenIndex = allTokens.length.sub(1);\r\n    uint256 lastToken = allTokens[lastTokenIndex];\r\n\r\n    allTokens[tokenIndex] = lastToken;\r\n    allTokens[lastTokenIndex] = 0;\r\n\r\n    allTokens.length--;\r\n    allTokensIndex[_tokenId] = 0;\r\n    allTokensIndex[lastToken] = tokenIndex;\r\n  }\r\n\r\n}\r\n\r\n// File: contracts/CrystalBase.sol\r\n\r\n// @title CrystalBase\r\n// @author Takayuki Jimba\r\n// @dev ERC721 token.\r\n//      mint, burn and transferFrom are supposed to be called from CryptoCrystal contract only.\r\ncontract CrystalBase is Acceptable, ERC721Token {\r\n\r\n    // Each of Crystal occupies 3 slots.\r\n    struct Crystal {\r\n        /* slot1 */\r\n\r\n        uint256 tokenId;\r\n\r\n        /* slot2 */\r\n        uint256 gene;\r\n\r\n        /* slot3 */\r\n\r\n        // kind is between 0 and 100.\r\n        // 2^8 = 256 is adequate.\r\n        uint8 kind;\r\n\r\n        // totalWeight of cryptocrystals is 21 * 10**13.\r\n        // 2^128 = 3.4028237e+38 is adequate.\r\n        uint128 weight;\r\n\r\n        // unix timestamp\r\n        uint64 mintedAt;\r\n    }\r\n\r\n    mapping(uint256 => Crystal) internal tokenIdToCrystal;\r\n    event CrystalBurned(address indexed owner, uint256 tokenId);\r\n    event CrystalMinted(address indexed owner, uint256 tokenId, uint256 gene, uint256 kind, uint256 weight);\r\n\r\n    uint256 currentTokenId = 1;\r\n\r\n    constructor() ERC721Token(\"CryptoCrystal\", \"CC\") public {\r\n\r\n    }\r\n\r\n    function mint(\r\n        address _owner,\r\n        uint256 _gene,\r\n        uint256 _kind,\r\n        uint256 _weight\r\n    ) public onlyAcceptable returns(uint256) {\r\n        require(_gene > 0);\r\n        require(_weight > 0);\r\n\r\n        uint256 _tokenId = currentTokenId;\r\n        currentTokenId++;\r\n        super._mint(_owner, _tokenId);\r\n        Crystal memory _crystal = Crystal({\r\n            tokenId: _tokenId,\r\n            gene: _gene,\r\n            kind: uint8(_kind),\r\n            weight: uint128(_weight),\r\n            mintedAt: uint64(now)\r\n            });\r\n        tokenIdToCrystal[_tokenId] = _crystal;\r\n        emit CrystalMinted(_owner, _tokenId, _gene, _kind, _weight);\r\n        return _tokenId;\r\n    }\r\n\r\n    function burn(address _owner, uint256 _tokenId) public onlyAcceptable {\r\n        require(ownerOf(_tokenId) == _owner);\r\n\r\n        delete tokenIdToCrystal[_tokenId];\r\n        super._burn(_owner, _tokenId);\r\n        emit CrystalBurned(_owner, _tokenId);\r\n    }\r\n\r\n    // @dev Transfers the ownership of a given token ID to another address.\r\n    //      _transferFrom is almost the same to openzeppelin-solidity's implementation.\r\n    //      ref. https://github.com/OpenZeppelin/openzeppelin-solidity/blob/ad12381549c4c0711c2f3310e9fb1f65d51c299c/contracts/token/ERC721/ERC721BasicToken.sol#L140\r\n    //      We use onlyAcceptable modifier instead of canTransfer.\r\n    //      _transferFrom is intended to be called only from cryptocrystal contract.\r\n    // @param _from owner of the token\r\n    // @param _to address to receive the ownership of the given token ID\r\n    // @param _tokenId uint256 ID of the token to be transferred\r\n    function _transferFrom(address _from, address _to, uint256 _tokenId) public onlyAcceptable {\r\n        require(ownerOf(_tokenId) == _from);\r\n        require(_to != address(0));\r\n\r\n        clearApproval(_from, _tokenId);\r\n        removeTokenFrom(_from, _tokenId);\r\n        addTokenTo(_to, _tokenId);\r\n\r\n        emit Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    function getCrystalKindWeight(uint256 _tokenId) public onlyAcceptable view returns(\r\n        uint256 kind,\r\n        uint256 weight\r\n    ) {\r\n        require(exists(_tokenId));\r\n\r\n        Crystal memory _crystal = tokenIdToCrystal[_tokenId];\r\n        kind = _crystal.kind;\r\n        weight = _crystal.weight;\r\n    }\r\n\r\n    function getCrystalGeneKindWeight(uint256 _tokenId) public onlyAcceptable view returns(\r\n        uint256 gene,\r\n        uint256 kind,\r\n        uint256 weight\r\n    ) {\r\n        require(exists(_tokenId));\r\n\r\n        Crystal memory _crystal = tokenIdToCrystal[_tokenId];\r\n        gene = _crystal.gene;\r\n        kind = _crystal.kind;\r\n        weight = _crystal.weight;\r\n    }\r\n\r\n    function getCrystal(uint256 _tokenId) external view returns(\r\n        address owner,\r\n        uint256 gene,\r\n        uint256 kind,\r\n        uint256 weight,\r\n        uint256 mintedAt\r\n    ) {\r\n        require(exists(_tokenId));\r\n\r\n        Crystal memory _crystal = tokenIdToCrystal[_tokenId];\r\n\r\n        owner = ownerOf(_tokenId);\r\n        gene = _crystal.gene;\r\n        kind = _crystal.kind;\r\n        weight = _crystal.weight;\r\n        mintedAt = _crystal.mintedAt;\r\n    }\r\n\r\n    function getCrystalsSummary(address _owner) external view returns(\r\n        uint256[] amounts,\r\n        uint256[] weights\r\n    ) {\r\n        amounts = new uint256[](100);\r\n        weights = new uint256[](100);\r\n        uint256 _tokenCount = ownedTokensCount[_owner];\r\n        for (uint256 i = 0; i < _tokenCount; i++) {\r\n            uint256 _tokenId = ownedTokens[_owner][i];\r\n            Crystal memory _crystal = tokenIdToCrystal[_tokenId];\r\n            amounts[_crystal.kind] = amounts[_crystal.kind].add(1);\r\n            weights[_crystal.kind] = weights[_crystal.kind].add(_crystal.weight);\r\n        }\r\n    }\r\n\r\n    function getCrystals(address _owner) external view returns(\r\n        uint256[] tokenIds,\r\n        uint256[] genes,\r\n        uint256[] kinds,\r\n        uint256[] weights,\r\n        uint256[] mintedAts\r\n    ) {\r\n        uint256 _tokenCount = ownedTokensCount[_owner];\r\n        tokenIds = new uint256[](_tokenCount);\r\n        genes = new uint256[](_tokenCount);\r\n        kinds = new uint256[](_tokenCount);\r\n        weights = new uint256[](_tokenCount);\r\n        mintedAts = new uint256[](_tokenCount);\r\n        for (uint256 i = 0; i < _tokenCount; i++) {\r\n            uint256 _tokenId = ownedTokens[_owner][i];\r\n            Crystal memory _crystal = tokenIdToCrystal[_tokenId];\r\n            tokenIds[i] = _tokenId;\r\n            genes[i] = _crystal.gene;\r\n            kinds[i] = _crystal.kind;\r\n            weights[i] = _crystal.weight;\r\n            mintedAts[i] = _crystal.mintedAt;\r\n        }\r\n    }\r\n\r\n    function getCrystalsByKind(address _owner, uint256 _kind) external view returns(\r\n        uint256[] tokenIds,\r\n        uint256[] genes,\r\n        uint256[] weights,\r\n        uint256[] mintedAts\r\n    ) {\r\n        require(_kind < 100);\r\n\r\n        uint256 _tokenCount = ownedTokensCount[_owner];\r\n        tokenIds = new uint256[](_tokenCount);\r\n        genes = new uint256[](_tokenCount);\r\n        weights = new uint256[](_tokenCount);\r\n        mintedAts = new uint256[](_tokenCount);\r\n        uint256 index;\r\n        for (uint256 i = 0; i < _tokenCount; i++) {\r\n            uint256 _tokenId = ownedTokens[_owner][i];\r\n            Crystal memory _crystal = tokenIdToCrystal[_tokenId];\r\n            if (_crystal.kind == _kind) {\r\n                tokenIds[index] = _tokenId;\r\n                genes[index] = _crystal.gene;\r\n                weights[index] = _crystal.weight;\r\n                mintedAts[i] = _crystal.mintedAt;\r\n                index = index.add(1);\r\n            }\r\n        }\r\n    }\r\n}",
    "data_type": "ERC721",
    "id": "CrystalBase_0xcfbc9103362aec4ce3089f155c2da2eea1cb7602",
    "file": "./Contract_source_Code/CrystalBase_0xcfbc9103362aec4ce3089f155c2da2eea1cb7602.sol"
}