{
    "name": "EtherLambosCore",
    "address": "0xda9f43015749056182352e9dc6d3ee0b6293d80a",
    "Compiler Version": "v0.4.18+commit.9cf6e910",
    "Optimization Enabled": "No with 200 runs",
    "Other Settings": "default evmVersion",
    "creation_bytecode": "60606040526000600260146101000a81548160ff021916908315150217905550600f60035534156200003057600080fd5b6001600260146101000a81548160ff021916908315150217905550336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506200010e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600080620001156401000000000262003042176401000000009004565b5062000578565b600062000121620004ad565b60006060604051908101604052808781526020014267ffffffffffffffff1681526020018567ffffffffffffffff1681525091506001600480548060010182816200016d9190620004e3565b916000526020600020906002020160008590919091506000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050500390508063ffffffff16811415156200020557600080fd5b7f26762795cda5552a98dbf495f5525efb05f3d55c5764fa0c6cfaa27150fe180785828460000151604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a16200029e60008683620002aa6401000000000262003228176401000000009004565b80925050509392505050565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415156200040957600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506007600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b60606040519081016040528060008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b815481835581811511620005135760020281600202836000526020600020918201910162000512919062000518565b5b505050565b6200057591905b8082111562000571576000808201600090556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff0219169055506002016200051f565b5090565b90565b6136b480620005886000396000f300606060405260043610610225576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146102835780630519ce79146102dd5780630560ff44146103325780630668f649146103e257806306fdde031461040b578063095ea7b31461049957806309ca60c1146104db5780630a0f81681461053057806312df2f491461058557806318160ddd146105da57806323b872dd1461060357806327d7874c146106645780632ba73c151461069d5780632e25d2a6146106d6578063313138e11461072b57806331e0900c1461075757806335347560146107ba5780633f4ba83a146107f15780634a4d9b00146108065780634e0a33791461083f5780635663896e146108785780635c975abb1461089b5780635fd8c710146108c85780636352211e146108dd5780636af04a571461094057806370a082311461099557806370ff6325146109e257806371587988146109f75780637a7d493714610a305780638456cb5914610a595780638462151c14610a6e5780638601332214610afc57806395d89b4114610b11578063a080c8ba14610b9f578063a9059cbb14610bea578063b047fb5014610c2c578063b34d471d14610c81578063b38697f614610cb6578063b47cc55614610d19578063bc4006f514610d52578063cfe7e7a014610da7578063e17b25af14610dd3578063efbbbd6514610e0c578063f28f0f6a14610e4a578063f92561f314610eb1575b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561028157600080fd5b005b341561028e57600080fd5b6102c360048080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019091905050610eda565b604051808215151515815260200191505060405180910390f35b34156102e857600080fd5b6102f06111eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561033d57600080fd5b61036760048080359060200190919080359060200190820180359060200191909192905050611211565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a757808201518184015260208101905061038c565b50505050905090810190601f1680156103d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ed57600080fd5b6103f561137c565b6040518082815260200191505060405180910390f35b341561041657600080fd5b61041e611382565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045e578082015181840152602081019050610443565b50505050905090810190601f16801561048b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104a457600080fd5b6104d9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506113bb565b005b34156104e657600080fd5b61052e600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091905050611499565b005b341561053b57600080fd5b610543611579565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561059057600080fd5b61059861159e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105e557600080fd5b6105ed6115c4565b6040518082815260200191505060405180910390f35b341561060e57600080fd5b610662600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115d4565b005b341561066f57600080fd5b61069b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116a1565b005b34156106a857600080fd5b6106d4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061177b565b005b34156106e157600080fd5b6106e9611856565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561073657600080fd5b610755600480803590602001909190803590602001909190505061187c565b005b341561076257600080fd5b61077860048080359060200190919050506118f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107c557600080fd5b6107db600480803590602001909190505061192b565b6040518082815260200191505060405180910390f35b34156107fc57600080fd5b61080461195d565b005b341561081157600080fd5b61083d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611af6565b005b341561084a57600080fd5b610876600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c2d565b005b341561088357600080fd5b6108996004808035906020019091905050611d08565b005b34156108a657600080fd5b6108ae611e1d565b604051808215151515815260200191505060405180910390f35b34156108d357600080fd5b6108db611e30565b005b34156108e857600080fd5b6108fe6004808035906020019091905050611f03565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561094b57600080fd5b610953611f7c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109a057600080fd5b6109cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611fa2565b6040518082815260200191505060405180910390f35b34156109ed57600080fd5b6109f5611feb565b005b3415610a0257600080fd5b610a2e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612191565b005b3415610a3b57600080fd5b610a436122ae565b6040518082815260200191505060405180910390f35b3415610a6457600080fd5b610a6c6122b4565b005b3415610a7957600080fd5b610aa5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506123f8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610ae8578082015181840152602081019050610acd565b505050509050019250505060405180910390f35b3415610b0757600080fd5b610b0f61252f565b005b3415610b1c57600080fd5b610b246126d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b64578082015181840152602081019050610b49565b50505050905090810190601f168015610b915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610baa57600080fd5b610bc0600480803590602001909190505061270e565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b3415610bf557600080fd5b610c2a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612754565b005b3415610c3757600080fd5b610c3f612868565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610c8c57600080fd5b610cb4600480803590602001909190803590602001909190803590602001909190505061288e565b005b3415610cc157600080fd5b610cd76004808035906020019091905050612a33565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d2457600080fd5b610d50600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612a66565b005b3415610d5d57600080fd5b610d65612b9d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610db257600080fd5b610dd16004808035906020019091908035906020019091905050612bc3565b005b3415610dde57600080fd5b610e0a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612d04565b005b3415610e1757600080fd5b610e2d6004808035906020019091905050612da3565b604051808381526020018281526020019250505060405180910390f35b3415610e5557600080fd5b610eaf600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091908035906020019091908035906020019091905050612df9565b005b3415610ebc57600080fd5b610ec4612f22565b6040518082815260200191505060405180910390f35b600060405180807f737570706f727473496e74657266616365286279746573342900000000000000815250601901905060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806111e4575060405180807f746f6b656e4d657461646174612875696e743235362c737472696e6729000000815250601d019050604051809103902060405180807f746f6b656e734f664f776e6572286164647265737329000000000000000000008152506016019050604051809103902060405180807f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81526020017f74323536290000000000000000000000000000000000000000000000000000008152506025019050604051809103902060405180807f7472616e7366657228616464726573732c75696e7432353629000000000000008152506019019050604051809103902060405180807f617070726f766528616464726573732c75696e743235362900000000000000008152506018019050604051809103902060405180807f6f776e65724f662875696e7432353629000000000000000000000000000000008152506010019050604051809103902060405180807f62616c616e63654f6628616464726573732900000000000000000000000000008152506012019050604051809103902060405180807f746f74616c537570706c79282900000000000000000000000000000000000000815250600d019050604051809103902060405180807f73796d626f6c28290000000000000000000000000000000000000000000000008152506008019050604051809103902060405180807f6e616d6528290000000000000000000000000000000000000000000000000000815250600601905060405180910390201818181818181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611219613570565b611221613584565b60008073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561128057600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb4799f2878787600060405160a001526040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001806020018281038252848482818152602001925080828437820191505094505050505060a060405180830381600087803b151561133b57600080fd5b6102c65a03f1151561134c57600080fd5b5050506040518060800180519060200160405280925081935050506113718282612f28565b925050509392505050565b600c5481565b6040805190810160405280600b81526020017f45746865724c616d626f7300000000000000000000000000000000000000000081525081565b600260149054906101000a900460ff161515156113d757600080fd5b6113e13382612f80565b15156113ec57600080fd5b6113f68183612fec565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114f757600080fd5b829050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561155557600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600b60008154809291906001019190505550611572848284613042565b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160048054905003905090565b600260149054906101000a900460ff161515156115f057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561162c57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561166757600080fd5b61167133826131bc565b151561167c57600080fd5b6116868382612f80565b151561169157600080fd5b61169c838383613228565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116fc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561173857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117d657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561181257600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118d857600080fd5b600c600081548092919060010191905055506118f4828261342a565b5050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060048381548110151561193d57fe5b906000526020600020906002020190508060000154915081915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119b857600080fd5b600260149054906101000a900460ff1615156119d357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a3157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a8f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611aec57600080fd5b611af4613492565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b5357600080fd5b8190508073ffffffffffffffffffffffffffffffffffffffff166325746a7d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515611bc257600080fd5b6102c65a03f11515611bd357600080fd5b505050604051805190501515611be857600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c8857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611cc457600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611db057506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80611e085750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611e1357600080fd5b8060038190555050565b600260149054906101000a900460ff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e8e57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f7757600080fd5b919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061209357506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806120eb5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156120f657600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fd8c7106040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561217b57600080fd5b6102c65a03f1151561218c57600080fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121ec57600080fd5b600260149054906101000a900460ff16151561220757600080fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa44619930581604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061235c57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806123b45750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156123bf57600080fd5b600260149054906101000a900460ff161515156123db57600080fd5b6001600260146101000a81548160ff021916908315150217905550565b6124006135af565b600061240a6135af565b600080600061241887611fa2565b9450600085141561244a5760006040518059106124325750595b90808252806020026020018201604052509550612525565b846040518059106124585750595b908082528060200260200182016040525093506124736115c4565b925060009150600190505b8281111515612521578673ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612514578084838151811015156124fd57fe5b906020019060200201818152505081806001019250505b808060010191505061247e565b8395505b5050505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806125d757506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061262f5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561263a57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fd8c7106040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15156126bf57600080fd5b6102c65a03f115156126d057600080fd5b505050565b6040805190810160405280600281526020017f454c00000000000000000000000000000000000000000000000000000000000081525081565b60008060048381548110151561272057fe5b906000526020600020906002020190508060010160089054906101000a900467ffffffffffffffff16915081915050919050565b600260149054906101000a900460ff1615151561277057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156127ac57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156127e757600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561284457600080fd5b61284e3382612f80565b151561285957600080fd5b612864338383613228565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128ec57600080fd5b600090505b81811015612a2d5761290533828501612f80565b151561291057600080fd5b61293e818401600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612fec565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663995cd65382850186336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1515612a0c57600080fd5b6102c65a03f11515612a1d57600080fd5b50505080806001019150506128f1565b50505050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ac357600080fd5b8190508073ffffffffffffffffffffffffffffffffffffffff1663f4b86c486000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515612b3257600080fd5b6102c65a03f11515612b4357600080fd5b505050604051805190501515612b5857600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff16151515612bdf57600080fd5b612be93383612f80565b1515612bf457600080fd5b612c2082600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612fec565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663995cd6538383336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1515612cec57600080fd5b6102c65a03f11515612cfd57600080fd5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d5f57600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600484815481101515612db757fe5b906000526020600020906002020190508060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1692508060000154915050915091565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e5a57600080fd5b869250879150600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612ebb57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505b600090505b84811015612f1857600b600081548092919060010191905055507b097edd871cfda3a5697758bf0e3cbb5ac5741c6400000000000000008185010288019150612f0a828488613042565b508080600101915050612ec0565b5050505050505050565b600b5481565b612f30613570565b612f38613570565b60008084604051805910612f495750595b9080825280601f01601f19166020018201604052509250602083019150859050612f74828287613525565b82935050505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b806007600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600061304c6135c3565b60006060604051908101604052808781526020014267ffffffffffffffff1681526020018567ffffffffffffffff16815250915060016004805480600101828161309691906135f9565b916000526020600020906002020160008590919091506000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050500390508063ffffffff168114151561312d57600080fd5b7f26762795cda5552a98dbf495f5525efb05f3d55c5764fa0c6cfaa27150fe180785828460000151604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a16131b060008683613228565b80925050509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff166007600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561338657600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506007600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b8160048281548110151561343a57fe5b9060005260206000209060020201600001819055507f272448c13d10252513897c38c25bf3b0384e3fb8060c7acf11a39696894ffd878183604051808381526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156134ed57600080fd5b600260149054906101000a900460ff16151561350857600080fd5b6000600260146101000a81548160ff021916908315150217905550565b60005b60208210151561354d5782518452602084019350602083019250602082039150613528565b6001826020036101000a0390508019835116818551168181178652505050505050565b602060405190810160405280600081525090565b6080604051908101604052806004905b60008019168152602001906001900390816135945790505090565b602060405190810160405280600081525090565b60606040519081016040528060008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b81548183558181151161362657600202816002028360005260206000209182019101613625919061362b565b5b505050565b61368591905b80821115613681576000808201600090556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff021916905550600201613631565b5090565b905600a165627a7a723058203f5a39911159de7c11a04261251bf63c9fed76eed8dd55cafbad0bf4ba2829630029",
    "abi": [
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_interfaceID",
                    "type": "bytes4"
                }
            ],
            "name": "supportsInterface",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cfoAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                },
                {
                    "name": "_preferredTransport",
                    "type": "string"
                }
            ],
            "name": "tokenMetadata",
            "outputs": [
                {
                    "name": "infoUrl",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "lambosTuneCount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "name",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_attributes",
                    "type": "uint256"
                },
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_model",
                    "type": "uint64"
                }
            ],
            "name": "createLambo",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "ceoAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "serviceStation",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_from",
                    "type": "address"
                },
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCEO",
                    "type": "address"
                }
            ],
            "name": "setCEO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCOO",
                    "type": "address"
                }
            ],
            "name": "setCOO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "marketPlace",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newattributes",
                    "type": "uint256"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "tuneLambo",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "lamboIndexToApproved",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_id",
                    "type": "uint256"
                }
            ],
            "name": "getLamboAttributes",
            "outputs": [
                {
                    "name": "attributes",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "unpause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_address",
                    "type": "address"
                }
            ],
            "name": "setServicestationAddress",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_newCFO",
                    "type": "address"
                }
            ],
            "name": "setCFO",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "secs",
                    "type": "uint256"
                }
            ],
            "name": "setSecondsPerBlock",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "paused",
            "outputs": [
                {
                    "name": "",
                    "type": "bool"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "withdrawBalance",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "ownerOf",
            "outputs": [
                {
                    "name": "owner",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "newContractAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "balanceOf",
            "outputs": [
                {
                    "name": "count",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "withdrawTuneBalances",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_v2Address",
                    "type": "address"
                }
            ],
            "name": "setNewAddress",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "secondsPerBlock",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "pause",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_owner",
                    "type": "address"
                }
            ],
            "name": "tokensOfOwner",
            "outputs": [
                {
                    "name": "ownerTokens",
                    "type": "uint256[]"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [],
            "name": "withdrawSaleBalances",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "symbol",
            "outputs": [
                {
                    "name": "",
                    "type": "string"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_id",
                    "type": "uint256"
                }
            ],
            "name": "getLamboModel",
            "outputs": [
                {
                    "name": "model",
                    "type": "uint64"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_to",
                    "type": "address"
                },
                {
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "transfer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "cooAddress",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_price",
                    "type": "uint256"
                },
                {
                    "name": "_tokenIdStart",
                    "type": "uint256"
                },
                {
                    "name": "_tokenCount",
                    "type": "uint256"
                }
            ],
            "name": "bulkCreateLamboSale",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "name": "lamboIndexToOwner",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_address",
                    "type": "address"
                }
            ],
            "name": "setMarketplaceAddress",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "erc721Metadata",
            "outputs": [
                {
                    "name": "",
                    "type": "address"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_carId",
                    "type": "uint256"
                },
                {
                    "name": "_price",
                    "type": "uint256"
                }
            ],
            "name": "createLamboSale",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_contractAddress",
                    "type": "address"
                }
            ],
            "name": "setMetadataAddress",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [
                {
                    "name": "_id",
                    "type": "uint256"
                }
            ],
            "name": "getLambo",
            "outputs": [
                {
                    "name": "buildTime",
                    "type": "uint256"
                },
                {
                    "name": "attributes",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "constant": false,
            "inputs": [
                {
                    "name": "_attributes",
                    "type": "uint256"
                },
                {
                    "name": "_owner",
                    "type": "address"
                },
                {
                    "name": "_model",
                    "type": "uint64"
                },
                {
                    "name": "count",
                    "type": "uint256"
                },
                {
                    "name": "startNo",
                    "type": "uint256"
                }
            ],
            "name": "bulkCreateLambo",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "constant": true,
            "inputs": [],
            "name": "lambosBuildCount",
            "outputs": [
                {
                    "name": "",
                    "type": "uint256"
                }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "to",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Transfer",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "approved",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Approval",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "owner",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "name": "lamboId",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "attributes",
                    "type": "uint256"
                }
            ],
            "name": "Build",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "_newattributes",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "name": "_tokenId",
                    "type": "uint256"
                }
            ],
            "name": "Tune",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "name": "newContract",
                    "type": "address"
                }
            ],
            "name": "ContractUpgrade",
            "type": "event"
        }
    ],
    "deployed_bytecode": "0x606060405260043610610225576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146102835780630519ce79146102dd5780630560ff44146103325780630668f649146103e257806306fdde031461040b578063095ea7b31461049957806309ca60c1146104db5780630a0f81681461053057806312df2f491461058557806318160ddd146105da57806323b872dd1461060357806327d7874c146106645780632ba73c151461069d5780632e25d2a6146106d6578063313138e11461072b57806331e0900c1461075757806335347560146107ba5780633f4ba83a146107f15780634a4d9b00146108065780634e0a33791461083f5780635663896e146108785780635c975abb1461089b5780635fd8c710146108c85780636352211e146108dd5780636af04a571461094057806370a082311461099557806370ff6325146109e257806371587988146109f75780637a7d493714610a305780638456cb5914610a595780638462151c14610a6e5780638601332214610afc57806395d89b4114610b11578063a080c8ba14610b9f578063a9059cbb14610bea578063b047fb5014610c2c578063b34d471d14610c81578063b38697f614610cb6578063b47cc55614610d19578063bc4006f514610d52578063cfe7e7a014610da7578063e17b25af14610dd3578063efbbbd6514610e0c578063f28f0f6a14610e4a578063f92561f314610eb1575b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561028157600080fd5b005b341561028e57600080fd5b6102c360048080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916906020019091905050610eda565b604051808215151515815260200191505060405180910390f35b34156102e857600080fd5b6102f06111eb565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561033d57600080fd5b61036760048080359060200190919080359060200190820180359060200191909192905050611211565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156103a757808201518184015260208101905061038c565b50505050905090810190601f1680156103d45780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156103ed57600080fd5b6103f561137c565b6040518082815260200191505060405180910390f35b341561041657600080fd5b61041e611382565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561045e578082015181840152602081019050610443565b50505050905090810190601f16801561048b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34156104a457600080fd5b6104d9600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506113bb565b005b34156104e657600080fd5b61052e600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091905050611499565b005b341561053b57600080fd5b610543611579565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561059057600080fd5b61059861159e565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156105e557600080fd5b6105ed6115c4565b6040518082815260200191505060405180910390f35b341561060e57600080fd5b610662600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803573ffffffffffffffffffffffffffffffffffffffff169060200190919080359060200190919050506115d4565b005b341561066f57600080fd5b61069b600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506116a1565b005b34156106a857600080fd5b6106d4600480803573ffffffffffffffffffffffffffffffffffffffff1690602001909190505061177b565b005b34156106e157600080fd5b6106e9611856565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561073657600080fd5b610755600480803590602001909190803590602001909190505061187c565b005b341561076257600080fd5b61077860048080359060200190919050506118f8565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156107c557600080fd5b6107db600480803590602001909190505061192b565b6040518082815260200191505060405180910390f35b34156107fc57600080fd5b61080461195d565b005b341561081157600080fd5b61083d600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611af6565b005b341561084a57600080fd5b610876600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611c2d565b005b341561088357600080fd5b6108996004808035906020019091905050611d08565b005b34156108a657600080fd5b6108ae611e1d565b604051808215151515815260200191505060405180910390f35b34156108d357600080fd5b6108db611e30565b005b34156108e857600080fd5b6108fe6004808035906020019091905050611f03565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b341561094b57600080fd5b610953611f7c565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34156109a057600080fd5b6109cc600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050611fa2565b6040518082815260200191505060405180910390f35b34156109ed57600080fd5b6109f5611feb565b005b3415610a0257600080fd5b610a2e600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612191565b005b3415610a3b57600080fd5b610a436122ae565b6040518082815260200191505060405180910390f35b3415610a6457600080fd5b610a6c6122b4565b005b3415610a7957600080fd5b610aa5600480803573ffffffffffffffffffffffffffffffffffffffff169060200190919050506123f8565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b83811015610ae8578082015181840152602081019050610acd565b505050509050019250505060405180910390f35b3415610b0757600080fd5b610b0f61252f565b005b3415610b1c57600080fd5b610b246126d5565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b64578082015181840152602081019050610b49565b50505050905090810190601f168015610b915780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3415610baa57600080fd5b610bc0600480803590602001909190505061270e565b604051808267ffffffffffffffff1667ffffffffffffffff16815260200191505060405180910390f35b3415610bf557600080fd5b610c2a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091908035906020019091905050612754565b005b3415610c3757600080fd5b610c3f612868565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610c8c57600080fd5b610cb4600480803590602001909190803590602001909190803590602001909190505061288e565b005b3415610cc157600080fd5b610cd76004808035906020019091905050612a33565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610d2457600080fd5b610d50600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612a66565b005b3415610d5d57600080fd5b610d65612b9d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3415610db257600080fd5b610dd16004808035906020019091908035906020019091905050612bc3565b005b3415610dde57600080fd5b610e0a600480803573ffffffffffffffffffffffffffffffffffffffff16906020019091905050612d04565b005b3415610e1757600080fd5b610e2d6004808035906020019091905050612da3565b604051808381526020018281526020019250505060405180910390f35b3415610e5557600080fd5b610eaf600480803590602001909190803573ffffffffffffffffffffffffffffffffffffffff1690602001909190803567ffffffffffffffff16906020019091908035906020019091908035906020019091905050612df9565b005b3415610ebc57600080fd5b610ec4612f22565b6040518082815260200191505060405180910390f35b600060405180807f737570706f727473496e74657266616365286279746573342900000000000000815250601901905060405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806111e4575060405180807f746f6b656e4d657461646174612875696e743235362c737472696e6729000000815250601d019050604051809103902060405180807f746f6b656e734f664f776e6572286164647265737329000000000000000000008152506016019050604051809103902060405180807f7472616e7366657246726f6d28616464726573732c616464726573732c75696e81526020017f74323536290000000000000000000000000000000000000000000000000000008152506025019050604051809103902060405180807f7472616e7366657228616464726573732c75696e7432353629000000000000008152506019019050604051809103902060405180807f617070726f766528616464726573732c75696e743235362900000000000000008152506018019050604051809103902060405180807f6f776e65724f662875696e7432353629000000000000000000000000000000008152506010019050604051809103902060405180807f62616c616e63654f6628616464726573732900000000000000000000000000008152506012019050604051809103902060405180807f746f74616c537570706c79282900000000000000000000000000000000000000815250600d019050604051809103902060405180807f73796d626f6c28290000000000000000000000000000000000000000000000008152506008019050604051809103902060405180807f6e616d6528290000000000000000000000000000000000000000000000000000815250600601905060405180910390201818181818181818187bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611219613570565b611221613584565b60008073ffffffffffffffffffffffffffffffffffffffff16600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561128057600080fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb4799f2878787600060405160a001526040518463ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180848152602001806020018281038252848482818152602001925080828437820191505094505050505060a060405180830381600087803b151561133b57600080fd5b6102c65a03f1151561134c57600080fd5b5050506040518060800180519060200160405280925081935050506113718282612f28565b925050509392505050565b600c5481565b6040805190810160405280600b81526020017f45746865724c616d626f7300000000000000000000000000000000000000000081525081565b600260149054906101000a900460ff161515156113d757600080fd5b6113e13382612f80565b15156113ec57600080fd5b6113f68183612fec565b7f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925338383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a15050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156114f757600080fd5b829050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561155557600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690505b600b60008154809291906001019190505550611572848284613042565b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160048054905003905090565b600260149054906101000a900460ff161515156115f057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561162c57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561166757600080fd5b61167133826131bc565b151561167c57600080fd5b6116868382612f80565b151561169157600080fd5b61169c838383613228565b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156116fc57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561173857600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117d657600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561181257600080fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118d857600080fd5b600c600081548092919060010191905055506118f4828261342a565b5050565b60076020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060048381548110151561193d57fe5b906000526020600020906002020190508060000154915081915050919050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156119b857600080fd5b600260149054906101000a900460ff1615156119d357600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a3157600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a8f57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff16600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611aec57600080fd5b611af4613492565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611b5357600080fd5b8190508073ffffffffffffffffffffffffffffffffffffffff166325746a7d6000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515611bc257600080fd5b6102c65a03f11515611bd357600080fd5b505050604051805190501515611be857600080fd5b80600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611c8857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611cc457600080fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611db057506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b80611e085750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b1515611e1357600080fd5b8060038190555050565b600260149054906101000a900460ff1681565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611e8e57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff16319050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050505050565b60006005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614151515611f7757600080fd5b919050565b600d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061209357506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806120eb5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156120f657600080fd5b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fd8c7106040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b151561217b57600080fd5b6102c65a03f1151561218c57600080fd5b505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156121ec57600080fd5b600260149054906101000a900460ff16151561220757600080fd5b80600d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f450db8da6efbe9c22f2347f7c2021231df1fc58d3ae9a2fa75d39fa44619930581604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a150565b60035481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061235c57506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806123b45750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b15156123bf57600080fd5b600260149054906101000a900460ff161515156123db57600080fd5b6001600260146101000a81548160ff021916908315150217905550565b6124006135af565b600061240a6135af565b600080600061241887611fa2565b9450600085141561244a5760006040518059106124325750595b90808252806020026020018201604052509550612525565b846040518059106124585750595b908082528060200260200182016040525093506124736115c4565b925060009150600190505b8281111515612521578673ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612514578084838151811015156124fd57fe5b906020019060200201818152505081806001019250505b808060010191505061247e565b8395505b5050505050919050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806125d757506000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b8061262f5750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b151561263a57600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635fd8c7106040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401600060405180830381600087803b15156126bf57600080fd5b6102c65a03f115156126d057600080fd5b505050565b6040805190810160405280600281526020017f454c00000000000000000000000000000000000000000000000000000000000081525081565b60008060048381548110151561272057fe5b906000526020600020906002020190508060010160089054906101000a900467ffffffffffffffff16915081915050919050565b600260149054906101000a900460ff1615151561277057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156127ac57600080fd5b3073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156127e757600080fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561284457600080fd5b61284e3382612f80565b151561285957600080fd5b612864338383613228565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128ec57600080fd5b600090505b81811015612a2d5761290533828501612f80565b151561291057600080fd5b61293e818401600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612fec565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663995cd65382850186336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1515612a0c57600080fd5b6102c65a03f11515612a1d57600080fd5b50505080806001019150506128f1565b50505050565b60056020528060005260406000206000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612ac357600080fd5b8190508073ffffffffffffffffffffffffffffffffffffffff1663f4b86c486000604051602001526040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b1515612b3257600080fd5b6102c65a03f11515612b4357600080fd5b505050604051805190501515612b5857600080fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260149054906101000a900460ff16151515612bdf57600080fd5b612be93383612f80565b1515612bf457600080fd5b612c2082600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612fec565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663995cd6538383336040518463ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808481526020018381526020018273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019350505050600060405180830381600087803b1515612cec57600080fd5b6102c65a03f11515612cfd57600080fd5b5050505050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612d5f57600080fd5b80600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806000600484815481101515612db757fe5b906000526020600020906002020190508060010160009054906101000a900467ffffffffffffffff1667ffffffffffffffff1692508060000154915050915091565b6000806000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612e5a57600080fd5b869250879150600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612ebb57600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1692505b600090505b84811015612f1857600b600081548092919060010191905055507b097edd871cfda3a5697758bf0e3cbb5ac5741c6400000000000000008185010288019150612f0a828488613042565b508080600101915050612ec0565b5050505050505050565b600b5481565b612f30613570565b612f38613570565b60008084604051805910612f495750595b9080825280601f01601f19166020018201604052509250602083019150859050612f74828287613525565b82935050505092915050565b60008273ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b806007600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600061304c6135c3565b60006060604051908101604052808781526020014267ffffffffffffffff1681526020018567ffffffffffffffff16815250915060016004805480600101828161309691906135f9565b916000526020600020906002020160008590919091506000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555050500390508063ffffffff168114151561312d57600080fd5b7f26762795cda5552a98dbf495f5525efb05f3d55c5764fa0c6cfaa27150fe180785828460000151604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001838152602001828152602001935050505060405180910390a16131b060008683613228565b80925050509392505050565b60008273ffffffffffffffffffffffffffffffffffffffff166007600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614905092915050565b600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001019190505550816005600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614151561338657600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008154809291906001900391905055506007600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b7fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef838383604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001935050505060405180910390a1505050565b8160048281548110151561343a57fe5b9060005260206000209060020201600001819055507f272448c13d10252513897c38c25bf3b0384e3fb8060c7acf11a39696894ffd878183604051808381526020018281526020019250505060405180910390a15050565b6000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156134ed57600080fd5b600260149054906101000a900460ff16151561350857600080fd5b6000600260146101000a81548160ff021916908315150217905550565b60005b60208210151561354d5782518452602084019350602083019250602082039150613528565b6001826020036101000a0390508019835116818551168181178652505050505050565b602060405190810160405280600081525090565b6080604051908101604052806004905b60008019168152602001906001900390816135945790505090565b602060405190810160405280600081525090565b60606040519081016040528060008152602001600067ffffffffffffffff168152602001600067ffffffffffffffff1681525090565b81548183558181151161362657600202816002028360005260206000209182019101613625919061362b565b5b505050565b61368591905b80821115613681576000808201600090556001820160006101000a81549067ffffffffffffffff02191690556001820160086101000a81549067ffffffffffffffff021916905550600201613631565b5090565b905600a165627a7a723058203f5a39911159de7c11a04261251bf63c9fed76eed8dd55cafbad0bf4ba2829630029",
    "constructor_argument": "",
    "Contract Source Code": "/**\r\n *Submitted for verification at Etherscan.io on 2018-03-11\r\n*/\r\n\r\npragma solidity ^0.4.11;\r\n\r\n\r\n/**\r\n * @title Ownable\r\n * @dev The Ownable contract has an owner address, and provides basic authorization control\r\n * functions, this simplifies the implementation of \"user permissions\".\r\n */\r\ncontract Ownable {\r\n  address public owner;\r\n\r\n\r\n  /**\r\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\r\n   * account.\r\n   */\r\n  function Ownable() {\r\n    owner = msg.sender;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Throws if called by any account other than the owner.\r\n   */\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner);\r\n    _;\r\n  }\r\n\r\n\r\n  /**\r\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\r\n   * @param newOwner The address to transfer ownership to.\r\n   */\r\n  function transferOwnership(address newOwner) onlyOwner {\r\n    if (newOwner != address(0)) {\r\n      owner = newOwner;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens\r\n/// @author Dieter Shirley <[email\u00a0protected]> (https://github.com/dete)\r\ncontract ERC721 {\r\n    // Required methods\r\n    function totalSupply() public view returns (uint256 total);\r\n    function balanceOf(address _owner) public view returns (uint256 balance);\r\n    function ownerOf(uint256 _tokenId) external view returns (address owner);\r\n    function approve(address _to, uint256 _tokenId) external;\r\n    function transfer(address _to, uint256 _tokenId) external;\r\n    function transferFrom(address _from, address _to, uint256 _tokenId) external;\r\n    \r\n    // Optional methods used by ServiceStation contract\r\n    function tuneLambo(uint256 _newattributes, uint256 _tokenId) external;\r\n    function getLamboAttributes(uint256 _id) external view returns (uint256 attributes);\r\n    function getLamboModel(uint256 _tokenId) external view returns (uint64 _model);\r\n    // Events\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n    event Approval(address owner, address approved, uint256 tokenId);\r\n\r\n    // Optional\r\n    // function name() public view returns (string name);\r\n    // function symbol() public view returns (string symbol);\r\n    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);\r\n    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);\r\n\r\n    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool);\r\n}\r\n\r\n\r\n\r\n/// @title A facet of EtherLamboCore that manages special access privileges.\r\n/// @author Axiom Zen (https://www.axiomzen.co) adapted by Kenny Bania\r\n/// @dev ...\r\ncontract EtherLambosAccessControl {\r\n    // This facet controls access control for Etherlambos. There are four roles managed here:\r\n    //\r\n    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart\r\n    //         contracts. It is also the only role that can unpause the smart contract. It is initially\r\n    //         set to the address that created the smart contract in the EtherLamboCore constructor.\r\n    //\r\n    //     - The CFO: The CFO can withdraw funds from EtherLamboCore and its auction contracts.\r\n    //\r\n    //     - The COO: The COO can release new models for sale.\r\n    //\r\n    // It should be noted that these roles are distinct without overlap in their access abilities, the\r\n    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any\r\n    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This\r\n    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of\r\n    // convenience. The less we use an address, the less likely it is that we somehow compromise the\r\n    // account.\r\n\r\n    /// @dev Emited when contract is upgraded - See README.md for updgrade plan\r\n    event ContractUpgrade(address newContract);\r\n\r\n    // The addresses of the accounts (or contracts) that can execute actions within each roles.\r\n    address public ceoAddress;\r\n    address public cfoAddress;\r\n    address public cooAddress;\r\n\r\n    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked\r\n    bool public paused = false;\r\n\r\n    /// @dev Access modifier for CEO-only functionality\r\n    modifier onlyCEO() {\r\n        require(msg.sender == ceoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for CFO-only functionality\r\n    modifier onlyCFO() {\r\n        require(msg.sender == cfoAddress);\r\n        _;\r\n    }\r\n\r\n    /// @dev Access modifier for COO-only functionality\r\n    modifier onlyCOO() {\r\n        require(msg.sender == cooAddress);\r\n        _;\r\n    }\r\n\r\n    modifier onlyCLevel() {\r\n        require(\r\n            msg.sender == cooAddress ||\r\n            msg.sender == ceoAddress ||\r\n            msg.sender == cfoAddress\r\n        );\r\n        _;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.\r\n    /// @param _newCEO The address of the new CEO\r\n    function setCEO(address _newCEO) external onlyCEO {\r\n        require(_newCEO != address(0));\r\n\r\n        ceoAddress = _newCEO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.\r\n    /// @param _newCFO The address of the new CFO\r\n    function setCFO(address _newCFO) external onlyCEO {\r\n        require(_newCFO != address(0));\r\n\r\n        cfoAddress = _newCFO;\r\n    }\r\n\r\n    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.\r\n    /// @param _newCOO The address of the new COO\r\n    function setCOO(address _newCOO) external onlyCEO {\r\n        require(_newCOO != address(0));\r\n\r\n        cooAddress = _newCOO;\r\n    }\r\n\r\n    /*** Pausable functionality adapted from OpenZeppelin ***/\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS NOT paused\r\n    modifier whenNotPaused() {\r\n        require(!paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Modifier to allow actions only when the contract IS paused\r\n    modifier whenPaused {\r\n        require(paused);\r\n        _;\r\n    }\r\n\r\n    /// @dev Called by any \"C-level\" role to pause the contract. Used only when\r\n    ///  a bug or exploit is detected and we need to limit damage.\r\n    function pause() external onlyCLevel whenNotPaused {\r\n        paused = true;\r\n    }\r\n\r\n    /// @dev Unpauses the smart contract. Can only be called by the CEO, since\r\n    ///  one reason we may pause the contract is when CFO or COO accounts are\r\n    ///  compromised.\r\n    /// @notice This is public rather than external so it can be called by\r\n    ///  derived contracts.\r\n    function unpause() public onlyCEO whenPaused {\r\n        // can't unpause if contract was upgraded\r\n        paused = false;\r\n    }\r\n}\r\n\r\n\r\n\r\n/// @title Base contract for EtherLambos. Holds all common structs, events and base variables.\r\n/// @author Axiom Zen (https://www.axiomzen.co) adapted by Kenny Bania\r\n/// @dev ...\r\ncontract EtherLambosBase is EtherLambosAccessControl {\r\n    /*** EVENTS ***/\r\n\r\n    /// @dev The Build event is fired whenever a new car model is build by the COO\r\n    event Build(address owner, uint256 lamboId, uint256 attributes);\r\n\r\n    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a car\r\n    ///  ownership is assigned, including builds.\r\n    event Transfer(address from, address to, uint256 tokenId);\r\n\r\n    event Tune(uint256 _newattributes, uint256 _tokenId);\r\n    \r\n    /*** DATA TYPES ***/\r\n\r\n    /// @dev The main EtherLambos struct. Every car in EtherLambos is represented by a copy\r\n    ///  of this structure, so great care was taken to ensure that it fits neatly into\r\n    ///  exactly two 256-bit words. Note that the order of the members in this structure\r\n    ///  is important because of the byte-packing rules used by Ethereum.\r\n    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html\r\n    struct Lambo {\r\n        // sports-car attributes like max speed, weight etc. are stored here.\r\n        // These attributes can be changed due to tuning/upgrades\r\n        uint256 attributes;\r\n\r\n        // The timestamp from the block when this car came was constructed.\r\n        uint64 buildTime;\r\n        \r\n        // the Lambo model identifier\r\n        uint64 model;\r\n\r\n    }\r\n\r\n\r\n    // An approximation of currently how many seconds are in between blocks.\r\n    uint256 public secondsPerBlock = 15;\r\n\r\n    /*** STORAGE ***/\r\n\r\n    /// @dev An array containing the Lambo struct for all Lambos in existence. The ID\r\n    ///  of each car is actually an index into this array. Note that 0 is invalid index.\r\n    Lambo[] lambos;\r\n\r\n    /// @dev A mapping from car IDs to the address that owns them. All cars have\r\n    ///  some valid owner address.\r\n    mapping (uint256 => address) public lamboIndexToOwner;\r\n\r\n    // @dev A mapping from owner address to count of tokens that address owns.\r\n    //  Used internally inside balanceOf() to resolve ownership count.\r\n    mapping (address => uint256) ownershipTokenCount;\r\n\r\n    /// @dev A mapping from LamboIDs to an address that has been approved to call\r\n    ///  transferFrom(). Each Lambo can only have one approved address for transfer\r\n    ///  at any time. A zero value means no approval is outstanding.\r\n    mapping (uint256 => address) public lamboIndexToApproved;\r\n\r\n    /// @dev The address of the MarketPlace contract that handles sales of Lambos. This\r\n    ///  same contract handles both peer-to-peer sales as well as new model sales. \r\n    MarketPlace public marketPlace;\r\n    ServiceStation public serviceStation;\r\n    /// @dev Assigns ownership of a specific Lambo to an address.\r\n    function _transfer(address _from, address _to, uint256 _tokenId) internal {\r\n        // Since the number of lambos is capped to 2^32 we can't overflow this\r\n        ownershipTokenCount[_to]++;\r\n        // transfer ownership\r\n        lamboIndexToOwner[_tokenId] = _to;\r\n        // When creating new lambos _from is 0x0, but we can't account that address.\r\n        if (_from != address(0)) {\r\n            ownershipTokenCount[_from]--;\r\n            // clear any previously approved ownership exchange\r\n            delete lamboIndexToApproved[_tokenId];\r\n        }\r\n        // Emit the transfer event.\r\n        Transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @dev An internal method that creates a new lambo and stores it. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate both a Build event\r\n    ///  and a Transfer event.\r\n    /// @param _attributes The lambo's attributes.\r\n    /// @param _owner The inital owner of this car, must be non-zero\r\n    function _createLambo(\r\n        uint256 _attributes,\r\n        address _owner,\r\n        uint64  _model\r\n    )\r\n        internal\r\n        returns (uint)\r\n    {\r\n\r\n        \r\n        Lambo memory _lambo = Lambo({\r\n            attributes: _attributes,\r\n            buildTime: uint64(now),\r\n            model:_model\r\n        });\r\n        uint256 newLamboId = lambos.push(_lambo) - 1;\r\n\r\n        // It's probably never going to happen, 4 billion cars is A LOT, but\r\n        // let's just be 100% sure we never let this happen.\r\n        require(newLamboId == uint256(uint32(newLamboId)));\r\n\r\n        // emit the build event\r\n        Build(\r\n            _owner,\r\n            newLamboId,\r\n            _lambo.attributes\r\n        );\r\n\r\n        // This will assign ownership, and also emit the Transfer event as\r\n        // per ERC721 draft\r\n        _transfer(0, _owner, newLamboId);\r\n\r\n        return newLamboId;\r\n    }\r\n     /// @dev An internal method that tunes an existing lambo. This\r\n    ///  method doesn't do any checking and should only be called when the\r\n    ///  input data is known to be valid. Will generate a Tune event\r\n    /// @param _newattributes The lambo's new attributes.\r\n    /// @param _tokenId The car to be tuned.\r\n    function _tuneLambo(\r\n        uint256 _newattributes,\r\n        uint256 _tokenId\r\n    )\r\n        internal\r\n    {\r\n        lambos[_tokenId].attributes=_newattributes;\r\n     \r\n        // emit the tune event\r\n        Tune(\r\n            _tokenId,\r\n            _newattributes\r\n        );\r\n\r\n    }\r\n    // Any C-level can fix how many seconds per blocks are currently observed.\r\n    function setSecondsPerBlock(uint256 secs) external onlyCLevel {\r\n        //require(secs < cooldowns[0]);\r\n        secondsPerBlock = secs;\r\n    }\r\n}\r\n\r\n/// @title The external contract that is responsible for generating metadata for the cars,\r\n///  it has one function that will return the data as bytes.\r\ncontract ERC721Metadata {\r\n    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.\r\n    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {\r\n        if (_tokenId == 1) {\r\n            buffer[0] = \"Hello World! :D\";\r\n            count = 15;\r\n        } else if (_tokenId == 2) {\r\n            buffer[0] = \"I would definitely choose a medi\";\r\n            buffer[1] = \"um length string.\";\r\n            count = 49;\r\n        } else if (_tokenId == 3) {\r\n            buffer[0] = \"Lorem ipsum dolor sit amet, mi e\";\r\n            buffer[1] = \"st accumsan dapibus augue lorem,\";\r\n            buffer[2] = \" tristique vestibulum id, libero\";\r\n            buffer[3] = \" suscipit varius sapien aliquam.\";\r\n            count = 128;\r\n        }\r\n    }\r\n}\r\n\r\n/// @title The facet of the EtherLambosCore contract that manages ownership, ERC-721 (draft) compliant.\r\n/// @author Axiom Zen (https://www.axiomzen.co) adapted by Cryptoknights\r\n/// @dev Ref: https://github.com/ethereum/EIPs/issues/721\r\n\r\ncontract EtherLambosOwnership is EtherLambosBase, ERC721 {\r\n\r\n    /// @notice Name and symbol of the non fungible token, as defined in ERC721.\r\n    string public constant name = \"EtherLambos\";\r\n    string public constant symbol = \"EL\";\r\n\r\n    // The contract that will return lambo metadata\r\n    ERC721Metadata public erc721Metadata;\r\n\r\n    bytes4 constant InterfaceSignature_ERC165 =\r\n        bytes4(keccak256('supportsInterface(bytes4)'));\r\n\r\n    bytes4 constant InterfaceSignature_ERC721 =\r\n        bytes4(keccak256('name()')) ^\r\n        bytes4(keccak256('symbol()')) ^\r\n        bytes4(keccak256('totalSupply()')) ^\r\n        bytes4(keccak256('balanceOf(address)')) ^\r\n        bytes4(keccak256('ownerOf(uint256)')) ^\r\n        bytes4(keccak256('approve(address,uint256)')) ^\r\n        bytes4(keccak256('transfer(address,uint256)')) ^\r\n        bytes4(keccak256('transferFrom(address,address,uint256)')) ^\r\n        bytes4(keccak256('tokensOfOwner(address)')) ^\r\n        bytes4(keccak256('tokenMetadata(uint256,string)'));\r\n\r\n    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).\r\n    ///  Returns true for any standardized interfaces implemented by this contract. We implement\r\n    ///  ERC-165 (obviously!) and ERC-721.\r\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool)\r\n    {\r\n        // DEBUG ONLY\r\n        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) && (InterfaceSignature_ERC721 == 0x9a20483d));\r\n\r\n        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));\r\n    }\r\n\r\n    /// @dev Set the address of the sibling contract that tracks metadata.\r\n    ///  CEO only.\r\n    function setMetadataAddress(address _contractAddress) public onlyCEO {\r\n        erc721Metadata = ERC721Metadata(_contractAddress);\r\n    }\r\n\r\n    // Internal utility functions: These functions all assume that their input arguments\r\n    // are valid. We leave it to public methods to sanitize their inputs and follow\r\n    // the required logic.\r\n\r\n    /// @dev Checks if a given address is the current owner of a particular Lambo.\r\n    /// @param _claimant the address we are validating against.\r\n    /// @param _tokenId kitten id, only valid when > 0\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return lamboIndexToOwner[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Checks if a given address currently has transferApproval for a particular Lambo.\r\n    /// @param _claimant the address we are confirming Lambo is approved for.\r\n    /// @param _tokenId lambo id, only valid when > 0\r\n    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return lamboIndexToApproved[_tokenId] == _claimant;\r\n    }\r\n\r\n    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous\r\n    ///  approval. Setting _approved to address(0) clears all transfer approval.\r\n    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because\r\n    ///  _approve() and transferFrom() are used together for putting Lambos on sale, and\r\n    ///  there is no value in spamming the log with Approval events in that case.\r\n    function _approve(uint256 _tokenId, address _approved) internal {\r\n        lamboIndexToApproved[_tokenId] = _approved;\r\n    }\r\n\r\n    /// @notice Returns the number of Lambos owned by a specific address.\r\n    /// @param _owner The owner address to check.\r\n    /// @dev Required for ERC-721 compliance\r\n    function balanceOf(address _owner) public view returns (uint256 count) {\r\n        return ownershipTokenCount[_owner];\r\n    }\r\n\r\n    /// @notice Transfers a Lambo to another address. If transferring to a smart\r\n    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or\r\n    ///  EtherLambos specifically) or your Lambo may be lost forever. Seriously.\r\n    /// @param _to The address of the recipient, can be a user or contract.\r\n    /// @param _tokenId The ID of the Lambo to transfer.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transfer(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any lambos.\r\n        require(_to != address(this));\r\n        // Disallow transfers to the auction contracts to prevent accidental\r\n        // misuse. Marketplace contracts should only take ownership of Lambos\r\n        // through the allow + transferFrom flow.\r\n        require(_to != address(marketPlace));\r\n\r\n        // You can only send your own car.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Reassign ownership, clear pending approvals, emit Transfer event.\r\n        _transfer(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Grant another address the right to transfer a specific Lambo via\r\n    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.\r\n    /// @param _to The address to be granted transfer approval. Pass address(0) to\r\n    ///  clear all approvals.\r\n    /// @param _tokenId The ID of the Lambo that can be transferred if this call succeeds.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function approve(\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Only an owner can grant transfer approval.\r\n        require(_owns(msg.sender, _tokenId));\r\n\r\n        // Register the approval (replacing any previous approval).\r\n        _approve(_tokenId, _to);\r\n\r\n        // Emit approval event.\r\n        Approval(msg.sender, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Transfer a Lambo owned by another address, for which the calling address\r\n    ///  has previously been granted transfer approval by the owner.\r\n    /// @param _from The address that owns the Lambo to be transfered.\r\n    /// @param _to The address that should take ownership of the Lambo. Can be any address,\r\n    ///  including the caller.\r\n    /// @param _tokenId The ID of the Lambo to be transferred.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _tokenId\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Safety check to prevent against an unexpected 0x0 default.\r\n        require(_to != address(0));\r\n        // Disallow transfers to this contract to prevent accidental misuse.\r\n        // The contract should never own any lambos.\r\n        require(_to != address(this));\r\n        // Check for approval and valid ownership\r\n        require(_approvedFor(msg.sender, _tokenId));\r\n        require(_owns(_from, _tokenId));\r\n\r\n        // Reassign ownership (also clears pending approvals and emits Transfer event).\r\n        _transfer(_from, _to, _tokenId);\r\n    }\r\n\r\n    /// @notice Returns the total number of Lambos currently in existence.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function totalSupply() public view returns (uint) {\r\n        return lambos.length - 1;\r\n    }\r\n\r\n    /// @notice Returns the address currently assigned ownership of a given Lambo.\r\n    /// @dev Required for ERC-721 compliance.\r\n    function ownerOf(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (address owner)\r\n    {\r\n        owner = lamboIndexToOwner[_tokenId];\r\n\r\n        require(owner != address(0));\r\n    }\r\n\r\n    /// @notice Returns a list of all Lambo IDs assigned to an address.\r\n    /// @param _owner The owner whose Lambo we are interested in.\r\n    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly\r\n    ///  expensive (it walks the entire Lambo array looking for cars belonging to owner),\r\n    ///  but it also returns a dynamic array, which is only supported for web3 calls, and\r\n    ///  not contract-to-contract calls.\r\n    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {\r\n        uint256 tokenCount = balanceOf(_owner);\r\n\r\n        if (tokenCount == 0) {\r\n            // Return an empty array\r\n            return new uint256[](0);\r\n        } else {\r\n            uint256[] memory result = new uint256[](tokenCount);\r\n            uint256 totalCars = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all cars have IDs starting at 1 and increasing\r\n            // sequentially up to the totalCat count.\r\n            uint256 carId;\r\n\r\n            for (carId = 1; carId <= totalCars; carId++) {\r\n                if (lamboIndexToOwner[carId] == _owner) {\r\n                    result[resultIndex] = carId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson <[email\u00a0protected]>)\r\n    ///  This method is licenced under the Apache License.\r\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n    function _memcpy(uint _dest, uint _src, uint _len) private view {\r\n        // Copy word-length chunks while possible\r\n        for(; _len >= 32; _len -= 32) {\r\n            assembly {\r\n                mstore(_dest, mload(_src))\r\n            }\r\n            _dest += 32;\r\n            _src += 32;\r\n        }\r\n\r\n        // Copy remaining bytes\r\n        uint256 mask = 256 ** (32 - _len) - 1;\r\n        assembly {\r\n            let srcpart := and(mload(_src), not(mask))\r\n            let destpart := and(mload(_dest), mask)\r\n            mstore(_dest, or(destpart, srcpart))\r\n        }\r\n    }\r\n\r\n    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson <[email\u00a0protected]>)\r\n    ///  This method is licenced under the Apache License.\r\n    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol\r\n    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {\r\n        var outputString = new string(_stringLength);\r\n        uint256 outputPtr;\r\n        uint256 bytesPtr;\r\n\r\n        assembly {\r\n            outputPtr := add(outputString, 32)\r\n            bytesPtr := _rawBytes\r\n        }\r\n\r\n        _memcpy(outputPtr, bytesPtr, _stringLength);\r\n\r\n        return outputString;\r\n    }\r\n\r\n    /// @notice Returns a URI pointing to a metadata package for this token conforming to\r\n    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)\r\n    /// @param _tokenId The ID number of the Lambos whose metadata should be returned.\r\n    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {\r\n        require(erc721Metadata != address(0));\r\n        bytes32[4] memory buffer;\r\n        uint256 count;\r\n        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);\r\n\r\n        return _toString(buffer, count);\r\n    }\r\n}\r\n\r\n\r\n/// @title MarketPlace core\r\n/// @dev Contains models, variables, and internal methods for the marketplace.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract MarketPlaceBase is Ownable {\r\n\r\n    // Represents an sale on an NFT\r\n    struct Sale {\r\n        // Current owner of NFT\r\n        address seller;\r\n        // Price (in wei) \r\n        uint128 price;\r\n        // Time when sale started\r\n        // NOTE: 0 if this sale has been concluded\r\n        uint64 startedAt;\r\n    }\r\n    \r\n    struct Affiliates {\r\n        address affiliate_address;\r\n        uint64 commission;\r\n        uint64 pricecut;\r\n    }\r\n    \r\n    //Affiliates[] affiliates;\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    // Cut owner takes on each sale, measured in basis points (1/100 of a percent).\r\n    // Values 0-10,000 map to 0%-100%\r\n    uint256 public ownerCut;\r\n\r\n    //map the Affiliate Code to the Affiliate\r\n    mapping (uint256 => Affiliates) codeToAffiliate;\r\n\r\n    // Map from token ID to their corresponding sale.\r\n    mapping (uint256 => Sale) tokenIdToSale;\r\n\r\n    event SaleCreated(uint256 tokenId, uint256 price);\r\n    event SaleSuccessful(uint256 tokenId, uint256 price, address buyer);\r\n    event SaleCancelled(uint256 tokenId);\r\n\r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n\r\n    /// @dev Escrows the NFT, assigning ownership to this contract.\r\n    /// Throws if the escrow fails.\r\n    /// @param _owner - Current owner address of token to escrow.\r\n    /// @param _tokenId - ID of token whose approval to verify.\r\n    function _escrow(address _owner, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transferFrom(_owner, this, _tokenId);\r\n    }\r\n\r\n    /// @dev Transfers an NFT owned by this contract to another address.\r\n    /// Returns true if the transfer succeeds.\r\n    /// @param _receiver - Address to transfer NFT to.\r\n    /// @param _tokenId - ID of token to transfer.\r\n    function _transfer(address _receiver, uint256 _tokenId) internal {\r\n        // it will throw if transfer fails\r\n        nonFungibleContract.transfer(_receiver, _tokenId);\r\n    }\r\n\r\n    /// @dev Adds an sale to the list of open sales. Also fires the\r\n    ///  SaleCreated event.\r\n    /// @param _tokenId The ID of the token to be put on sale.\r\n    /// @param _sale Sale to add.\r\n    function _addSale(uint256 _tokenId, Sale _sale) internal {\r\n        \r\n\r\n        tokenIdToSale[_tokenId] = _sale;\r\n\r\n        SaleCreated(\r\n            uint256(_tokenId),\r\n            uint256(_sale.price)\r\n        );\r\n    }\r\n\r\n    /// @dev Cancels a sale unconditionally.\r\n    function _cancelSale(uint256 _tokenId, address _seller) internal {\r\n        _removeSale(_tokenId);\r\n        _transfer(_seller, _tokenId);\r\n        SaleCancelled(_tokenId);\r\n    }\r\n\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bid(uint256 _tokenId, uint256 _bidAmount)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        // Get a reference to the sale struct\r\n        Sale storage sale = tokenIdToSale[_tokenId];\r\n\r\n        // Explicitly check that this sale is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return a sale object that is all zeros.)\r\n        require(_isOnSale(sale));\r\n\r\n        // Check that the bid is greater than or equal to the current price\r\n        uint256 price = sale.price;\r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the sale struct\r\n        // gets deleted.\r\n        address seller = sale.seller;\r\n\r\n        // The bid is good! Remove the sale before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeSale(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the Marketplace's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 marketplaceCut = _computeCut(price);\r\n            uint256 sellerProceeds = price - marketplaceCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. If the excess\r\n        // is anything worth worrying about, transfer it back to bidder.\r\n        // NOTE: We checked above that the bid amount is greater than or\r\n        // equal to the price so this cannot underflow.\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        // Return the funds. Similar to the previous transfer, this is\r\n        // not susceptible to a re-entry attack because the auction is\r\n        // removed before any transfers occur.\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        // Tell the world!\r\n        SaleSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n\r\n    /// @dev Removes a sale from the list of open sales.\r\n    /// @param _tokenId - ID of NFT on sale.\r\n    function _removeSale(uint256 _tokenId) internal {\r\n        delete tokenIdToSale[_tokenId];\r\n    }\r\n\r\n    /// @dev Returns true if the NFT is on sale.\r\n    /// @param _sale - Sale to check.\r\n    function _isOnSale(Sale storage _sale) internal view returns (bool) {\r\n        return (_sale.startedAt > 0);\r\n    }\r\n\r\n\r\n    /// @dev Computes owner's cut of a sale.\r\n    /// @param _price - Sale price of NFT.\r\n    function _computeCut(uint256 _price) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the Marketplace constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * ownerCut / 10000;\r\n    }\r\n    function _computeAffiliateCut(uint256 _price,Affiliates affiliate) internal view returns (uint256) {\r\n        // NOTE: We don't use SafeMath (or similar) in this function because\r\n        //  all of our entry functions carefully cap the maximum values for\r\n        //  currency (at 128-bits), and ownerCut <= 10000 (see the require()\r\n        //  statement in the Marketplace constructor). The result of this\r\n        //  function is always guaranteed to be <= _price.\r\n        return _price * affiliate.commission / 10000;\r\n    }\r\n    /// @dev Adds an affiliate to the list.\r\n    /// @param _code The referall code of the affiliate.\r\n    /// @param _affiliate Affiliate to add.\r\n    function _addAffiliate(uint256 _code, Affiliates _affiliate) internal {\r\n        codeToAffiliate[_code] = _affiliate;\r\n   \r\n    }\r\n    \r\n    /// @dev Removes a affiliate from the list.\r\n    /// @param _code - The referall code of the affiliate.\r\n    function _removeAffiliate(uint256 _code) internal {\r\n        delete codeToAffiliate[_code];\r\n    }\r\n    \r\n    \r\n    //_bidReferral(_tokenId, msg.value);\r\n    /// @dev Computes the price and transfers winnings.\r\n    /// Does NOT transfer ownership of token.\r\n    function _bidReferral(uint256 _tokenId, uint256 _bidAmount,Affiliates _affiliate)\r\n        internal\r\n        returns (uint256)\r\n    {\r\n        \r\n        // Get a reference to the sale struct\r\n        Sale storage sale = tokenIdToSale[_tokenId];\r\n\r\n        //Only Owner of Contract can sell referrals\r\n        require(sale.seller==owner);\r\n\r\n        // Explicitly check that this sale is currently live.\r\n        // (Because of how Ethereum mappings work, we can't just count\r\n        // on the lookup above failing. An invalid _tokenId will just\r\n        // return a sale object that is all zeros.)\r\n        require(_isOnSale(sale));\r\n        // Check that the bid is greater than or equal to the current price\r\n        \r\n        uint256 price = sale.price;\r\n        \r\n        //deduce the affiliate pricecut\r\n        price=price * _affiliate.pricecut / 10000;  \r\n        require(_bidAmount >= price);\r\n\r\n        // Grab a reference to the seller before the sale struct\r\n        // gets deleted.\r\n        address seller = sale.seller;\r\n        address affiliate_address = _affiliate.affiliate_address;\r\n        \r\n        // The bid is good! Remove the sale before sending the fees\r\n        // to the sender so we can't have a reentrancy attack.\r\n        _removeSale(_tokenId);\r\n\r\n        // Transfer proceeds to seller (if there are any!)\r\n        if (price > 0) {\r\n            // Calculate the Marketplace's cut.\r\n            // (NOTE: _computeCut() is guaranteed to return a\r\n            // value <= price, so this subtraction can't go negative.)\r\n            uint256 affiliateCut = _computeAffiliateCut(price,_affiliate);\r\n            uint256 sellerProceeds = price - affiliateCut;\r\n\r\n            // NOTE: Doing a transfer() in the middle of a complex\r\n            // method like this is generally discouraged because of\r\n            // reentrancy attacks and DoS attacks if the seller is\r\n            // a contract with an invalid fallback function. We explicitly\r\n            // guard against reentrancy attacks by removing the auction\r\n            // before calling transfer(), and the only thing the seller\r\n            // can DoS is the sale of their own asset! (And if it's an\r\n            // accident, they can call cancelAuction(). )\r\n            seller.transfer(sellerProceeds);\r\n            affiliate_address.transfer(affiliateCut);\r\n        }\r\n\r\n        // Calculate any excess funds included with the bid. If the excess\r\n        // is anything worth worrying about, transfer it back to bidder.\r\n        // NOTE: We checked above that the bid amount is greater than or\r\n        // equal to the price so this cannot underflow.\r\n        uint256 bidExcess = _bidAmount - price;\r\n\r\n        // Return the funds. Similar to the previous transfer, this is\r\n        // not susceptible to a re-entry attack because the auction is\r\n        // removed before any transfers occur.\r\n        msg.sender.transfer(bidExcess);\r\n\r\n        // Tell the world!\r\n        SaleSuccessful(_tokenId, price, msg.sender);\r\n\r\n        return price;\r\n    }\r\n}\r\n\r\n/**\r\n * @title Pausable\r\n * @dev Base contract which allows children to implement an emergency stop mechanism.\r\n */\r\ncontract Pausable is Ownable {\r\n  event Pause();\r\n  event Unpause();\r\n\r\n  bool public paused = false;\r\n\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS paused\r\n   */\r\n  modifier whenNotPaused() {\r\n    require(!paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev modifier to allow actions only when the contract IS NOT paused\r\n   */\r\n  modifier whenPaused {\r\n    require(paused);\r\n    _;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to pause, triggers stopped state\r\n   */\r\n  function pause() onlyOwner whenNotPaused returns (bool) {\r\n    paused = true;\r\n    Pause();\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @dev called by the owner to unpause, returns to normal state\r\n   */\r\n  function unpause() onlyOwner whenPaused returns (bool) {\r\n    paused = false;\r\n    Unpause();\r\n    return true;\r\n  }\r\n}\r\n\r\n/// @title MarketPlace for non-fungible tokens.\r\n/// @notice We omit a fallback function to prevent accidental sends to this contract.\r\ncontract MarketPlace is Pausable, MarketPlaceBase {\r\n\r\n\t// @dev Sanity check that allows us to ensure that we are pointing to the\r\n    //  right auction in our setSaleMarketplaceAddress() call.\r\n    bool public isMarketplace = true;\r\n\t\r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\r\n\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    /// @param _cut - percent cut the owner takes on each sale, must be\r\n    ///  between 0-10,000.\r\n    function MarketPlace(address _nftAddress, uint256 _cut) public {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        //require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n    function setNFTAddress(address _nftAddress, uint256 _cut) external onlyOwner {\r\n        require(_cut <= 10000);\r\n        ownerCut = _cut;\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        //require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        bool res = nftAddress.send(this.balance);\r\n    }\r\n\r\n    /// @dev Creates and begins a new sale.\r\n    /// @param _tokenId - ID of token to sale, sender must be owner.\r\n    /// @param _price - Price of item (in wei)\r\n    /// @param _seller - Seller, if not the message sender\r\n    function createSale(\r\n        uint256 _tokenId,\r\n        uint256 _price,\r\n        address _seller\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Sanity check that no inputs overflow how many bits we've allocated\r\n        // to store them in the auction struct.\r\n        require(_price == uint256(uint128(_price)));\r\n        \r\n        //require(_owns(msg.sender, _tokenId));\r\n        //_escrow(msg.sender, _tokenId);\r\n        \r\n        require(msg.sender == address(nonFungibleContract));\r\n        _escrow(_seller, _tokenId);\r\n        \r\n        Sale memory sale = Sale(\r\n            _seller,\r\n            uint128(_price),\r\n            uint64(now)\r\n        );\r\n        _addSale(_tokenId, sale);\r\n    }\r\n\r\n\r\n    \r\n\r\n    /// @dev Bids on a sale, completing the sale and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bid(uint256 _tokenId)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n       _bid(_tokenId, msg.value); \r\n       _transfer(msg.sender, _tokenId);\r\n      \r\n    }\r\n\r\n    /// @dev Bids on a sale, completing the sale and transferring\r\n    ///  ownership of the NFT if enough Ether is supplied.\r\n    /// @param _tokenId - ID of token to bid on.\r\n    function bidReferral(uint256 _tokenId,uint256 _code)\r\n        external\r\n        payable\r\n        whenNotPaused\r\n    {\r\n        // _bid will throw if the bid or funds transfer fails\r\n        Affiliates storage affiliate = codeToAffiliate[_code];\r\n        \r\n        require(affiliate.affiliate_address!=0&&_code>0);\r\n        _bidReferral(_tokenId, msg.value,affiliate);\r\n        _transfer(msg.sender, _tokenId);\r\n\r\n       \r\n    }\r\n    \r\n    /// @dev Cancels an sale that hasn't been won yet.\r\n    ///  Returns the NFT to original owner.\r\n    /// @notice This is a state-modifying function that can\r\n    ///  be called while the contract is paused.\r\n    /// @param _tokenId - ID of token on sale\r\n    function cancelSale(uint256 _tokenId)\r\n        external\r\n    {\r\n        Sale storage sale = tokenIdToSale[_tokenId];\r\n        require(_isOnSale(sale));\r\n        address seller = sale.seller;\r\n        require(msg.sender == seller);\r\n        _cancelSale(_tokenId, seller);\r\n    }\r\n\r\n    /// @dev Cancels a sale when the contract is paused.\r\n    ///  Only the owner may do this, and NFTs are returned to\r\n    ///  the seller. This should only be used in emergencies.\r\n    /// @param _tokenId - ID of the NFT on sale to cancel.\r\n    function cancelSaleWhenPaused(uint256 _tokenId)\r\n        whenPaused\r\n        onlyOwner\r\n        external\r\n    {\r\n        Sale storage sale = tokenIdToSale[_tokenId];\r\n        require(_isOnSale(sale));\r\n        _cancelSale(_tokenId, sale.seller);\r\n    }\r\n\r\n    /// @dev Returns sale info for an NFT on sale.\r\n    /// @param _tokenId - ID of NFT on sale.\r\n    function getSale(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns\r\n    (\r\n        address seller,\r\n        uint256 price,\r\n        uint256 startedAt\r\n    ) {\r\n        Sale storage sale = tokenIdToSale[_tokenId];\r\n        require(_isOnSale(sale));\r\n        return (\r\n            sale.seller,\r\n            sale.price,\r\n            sale.startedAt\r\n        );\r\n    }\r\n\r\n    /// @dev Returns the current price of a sale.\r\n    /// @param _tokenId - ID of the token price we are checking.\r\n    function getCurrentPrice(uint256 _tokenId)\r\n        external\r\n        view\r\n        returns (uint256)\r\n    {\r\n        Sale storage sale = tokenIdToSale[_tokenId];\r\n        require(_isOnSale(sale));\r\n        return sale.price;\r\n    }\r\n\r\n\r\n    /// @dev Creates and begins a new sale.\r\n    /// @param _code - ID of token to sale, sender must be owner.\r\n    /// @param _commission - percentage of commission for affiliate\r\n    /// @param _pricecut - percentage of sell price cut for buyer\r\n    /// @param _affiliate_address - affiliate address \r\n    function createAffiliate(\r\n        uint256 _code,\r\n        uint64  _commission,\r\n        uint64  _pricecut,\r\n        address _affiliate_address\r\n    )\r\n        external\r\n        onlyOwner\r\n    {\r\n\r\n        Affiliates memory affiliate = Affiliates(\r\n            address(_affiliate_address),\r\n            uint64(_commission),\r\n            uint64(_pricecut)\r\n        );\r\n        _addAffiliate(_code, affiliate);\r\n    }\r\n    \r\n    /// @dev Returns affiliate info for an affiliate code.\r\n    /// @param _code - code for an affiliate.\r\n    function getAffiliate(uint256 _code)\r\n        external\r\n        view\r\n        onlyOwner\r\n        returns\r\n    (\r\n         address affiliate_address,\r\n         uint64 commission,\r\n         uint64 pricecut\r\n    ) {\r\n        Affiliates storage affiliate = codeToAffiliate[_code];\r\n        \r\n        return (\r\n            affiliate.affiliate_address,\r\n            affiliate.commission,\r\n            affiliate.pricecut\r\n        );\r\n    }\r\n     /// @dev Removes affiliate.\r\n    ///  Only the owner may do this\r\n    /// @param _code - code for an affiliate.\r\n    function removeAffiliate(uint256 _code)\r\n        onlyOwner\r\n        external\r\n    {\r\n        _removeAffiliate(_code); \r\n        \r\n    }\r\n}\r\n\r\n\r\n/// @title ServiceStationBase core\r\n/// @dev Contains models, variables, and internal methods for the ServiceStation.\r\ncontract ServiceStationBase {\r\n\r\n    // Reference to contract tracking NFT ownership\r\n    ERC721 public nonFungibleContract;\r\n\r\n    struct Tune{\r\n        uint256 startChange;\r\n        uint256 rangeChange;\r\n        uint256 attChange;\r\n        bool plusMinus;\r\n        bool replace;\r\n        uint128 price;\r\n        bool active;\r\n        uint64 model;\r\n    }\r\n    Tune[] options;\r\n    \r\n   \r\n    \r\n    /// @dev Returns true if the claimant owns the token.\r\n    /// @param _claimant - Address claiming to own the token.\r\n    /// @param _tokenId - ID of token whose ownership to verify.\r\n    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {\r\n        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);\r\n    }\r\n  \r\n    /// @dev Calls the NFT Contract with the tuned attributes \r\n    function _tune(uint256 _newattributes, uint256 _tokenId) internal {\r\n    nonFungibleContract.tuneLambo(_newattributes, _tokenId);\r\n    }\r\n    \r\n    function _changeAttributes(uint256 _tokenId,uint256 _optionIndex) internal {\r\n    \r\n    //Get model from token\r\n    uint64 model = nonFungibleContract.getLamboModel(_tokenId);\r\n    //throw if tune option is not made for model\r\n    require(options[_optionIndex].model==model);\r\n    \r\n    //Get original attributes\r\n    uint256 attributes = nonFungibleContract.getLamboAttributes(_tokenId);\r\n    uint256 part=0;\r\n    \r\n    //Dissect for options\r\n    part=(attributes/(10 ** options[_optionIndex].startChange)) % (10 ** options[_optionIndex].rangeChange);\r\n    //part=1544;\r\n    //Change attributes & verify\r\n    //Should attChange be added,subtracted or replaced?\r\n    if(options[_optionIndex].replace == false)\r\n        {\r\n            \r\n            //change should be added\r\n            if(options[_optionIndex].plusMinus == false)\r\n            {\r\n                //e.g. if range = 4 then value can not be higher then 9999 - overflow check\r\n                require((part+options[_optionIndex].attChange)<(10**options[_optionIndex].rangeChange));\r\n                //add to attributes\r\n                attributes=attributes+options[_optionIndex].attChange*(10 ** options[_optionIndex].startChange);\r\n            }\r\n            else{\r\n                //do some subtraction\r\n                //e.g. value must be greater then 0\r\n                require(part>options[_optionIndex].attChange);\r\n                //substract from attributes \r\n                attributes-=options[_optionIndex].attChange*(10 ** options[_optionIndex].startChange);\r\n            }\r\n        }\r\n    else\r\n        {\r\n            //do some replacing\r\n            attributes=attributes-part*(10 ** options[_optionIndex].startChange);\r\n            attributes+=options[_optionIndex].attChange*(10 ** options[_optionIndex].startChange);\r\n        }\r\n    \r\n  \r\n   \r\n    //Tune Lambo in NFT contract\r\n    _tune(uint256(attributes), _tokenId);\r\n       \r\n        \r\n    }\r\n    \r\n    \r\n}\r\n\r\n\r\n/// @title ServiceStation for non-fungible tokens.\r\ncontract ServiceStation is Pausable, ServiceStationBase {\r\n\r\n\t// @dev Sanity check that allows us to ensure that we are pointing to the right call.\r\n    bool public isServicestation = true;\r\n\t\r\n    /// @dev The ERC-165 interface signature for ERC-721.\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/165\r\n    ///  Ref: https://github.com/ethereum/EIPs/issues/721\r\n    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);\r\n\r\n    uint256 public optionCount;\r\n    mapping (uint64 => uint256) public modelIndexToOptionCount;\r\n    /// @dev Constructor creates a reference to the NFT ownership contract\r\n    ///  and verifies the owner cut is in the valid range.\r\n    /// @param _nftAddress - address of a deployed contract implementing\r\n    ///  the Nonfungible Interface.\r\n    function ServiceStation(address _nftAddress) public {\r\n\r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        //require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n        _newTuneOption(0,0,0,false,false,0,0);\r\n        \r\n    }\r\n    function setNFTAddress(address _nftAddress) external onlyOwner {\r\n        \r\n        ERC721 candidateContract = ERC721(_nftAddress);\r\n        //require(candidateContract.supportsInterface(InterfaceSignature_ERC721));\r\n        nonFungibleContract = candidateContract;\r\n    }\r\n    \r\n    function newTuneOption(\r\n        uint32 _startChange,\r\n        uint32 _rangeChange,\r\n        uint256 _attChange,\r\n        bool _plusMinus,\r\n        bool _replace,\r\n        uint128 _price,\r\n        uint64 _model\r\n        )\r\n        external\r\n        {\r\n           //Only allow owner to add new options\r\n           require(msg.sender == owner ); \r\n           optionCount++;\r\n           modelIndexToOptionCount[_model]++;\r\n           _newTuneOption(_startChange,_rangeChange,_attChange,_plusMinus, _replace,_price,_model);\r\n       \r\n        }\r\n    function changeTuneOption(\r\n        uint32 _startChange,\r\n        uint32 _rangeChange,\r\n        uint256 _attChange,\r\n        bool _plusMinus,\r\n        bool _replace,\r\n        uint128 _price,\r\n        bool _isactive,\r\n        uint64 _model,\r\n        uint256 _optionIndex\r\n        )\r\n        external\r\n        {\r\n           //Only allow owner to add new options\r\n           require(msg.sender == owner ); \r\n           \r\n           \r\n           _changeTuneOption(_startChange,_rangeChange,_attChange,_plusMinus, _replace,_price,_isactive,_model,_optionIndex);\r\n       \r\n        }\r\n        \r\n    function _newTuneOption( uint32 _startChange,\r\n        uint32 _rangeChange,\r\n        uint256 _attChange,\r\n        bool _plusMinus,\r\n        bool _replace,\r\n        uint128 _price,\r\n        uint64 _model\r\n        ) \r\n        internal\r\n        {\r\n        \r\n           Tune memory _option = Tune({\r\n            startChange: _startChange,\r\n            rangeChange: _rangeChange,\r\n            attChange: _attChange,\r\n            plusMinus: _plusMinus,\r\n            replace: _replace,\r\n            price: _price,\r\n            active: true,\r\n            model: _model\r\n            });\r\n        \r\n        options.push(_option);\r\n    }\r\n    \r\n    function _changeTuneOption( uint32 _startChange,\r\n        uint32 _rangeChange,\r\n        uint256 _attChange,\r\n        bool _plusMinus,\r\n        bool _replace,\r\n        uint128 _price,\r\n        bool _isactive,\r\n        uint64 _model,\r\n        uint256 _optionIndex\r\n        ) \r\n        internal\r\n        {\r\n        \r\n           Tune memory _option = Tune({\r\n            startChange: _startChange,\r\n            rangeChange: _rangeChange,\r\n            attChange: _attChange,\r\n            plusMinus: _plusMinus,\r\n            replace: _replace,\r\n            price: _price,\r\n            active: _isactive,\r\n            model: _model\r\n            });\r\n        \r\n        options[_optionIndex]=_option;\r\n    }\r\n    \r\n    function disableTuneOption(uint256 index) external\r\n    {\r\n        require(msg.sender == owner ); \r\n        options[index].active=false;\r\n    }\r\n    \r\n    function enableTuneOption(uint256 index) external\r\n    {\r\n        require(msg.sender == owner ); \r\n        options[index].active=true;\r\n    }\r\n    function getOption(uint256 _index) \r\n    external view\r\n    returns (\r\n        uint256 _startChange,\r\n        uint256 _rangeChange,\r\n        uint256 _attChange,\r\n        bool _plusMinus,\r\n        uint128 _price,\r\n        bool active,\r\n        uint64 model\r\n    ) \r\n    {\r\n      \r\n        //require(options[_index].active);\r\n        return (\r\n            options[_index].startChange,\r\n            options[_index].rangeChange,\r\n            options[_index].attChange,\r\n            options[_index].plusMinus,\r\n            options[_index].price,\r\n            options[_index].active,\r\n            options[_index].model\r\n        );  \r\n    }\r\n    \r\n    function getOptionCount() external view returns (uint256 _optionCount)\r\n        {\r\n        return optionCount;    \r\n        }\r\n    \r\n    function tuneLambo(uint256 _tokenId,uint256 _optionIndex) external payable\r\n    {\r\n       //Caller needs to own Lambo\r\n       require(_owns(msg.sender, _tokenId)); \r\n       //Tuning Option needs to be enabled\r\n       require(options[_optionIndex].active);\r\n       //Enough money for tuning to spend?\r\n       require(msg.value>=options[_optionIndex].price);\r\n       \r\n       _changeAttributes(_tokenId,_optionIndex);\r\n    }\r\n    /// @dev Remove all Ether from the contract, which is the owner's cuts\r\n    ///  as well as any Ether sent directly to the contract address.\r\n    ///  Always transfers to the NFT contract, but can be called either by\r\n    ///  the owner or the NFT contract.\r\n    function withdrawBalance() external {\r\n        address nftAddress = address(nonFungibleContract);\r\n\r\n        require(\r\n            msg.sender == owner ||\r\n            msg.sender == nftAddress\r\n        );\r\n        // We are using this boolean method to make sure that even if one fails it will still work\r\n        bool res = owner.send(this.balance);\r\n    }\r\n\r\n    function getOptionsForModel(uint64 _model) external view returns(uint256[] _optionsModel) {\r\n        //uint256 tokenCount = balanceOf(_owner);\r\n\r\n        //if (tokenCount == 0) {\r\n            // Return an empty array\r\n        //    return new uint256[](0);\r\n        //} else {\r\n            uint256[] memory result = new uint256[](modelIndexToOptionCount[_model]);\r\n            //uint256 totalCars = totalSupply();\r\n            uint256 resultIndex = 0;\r\n\r\n            // We count on the fact that all cars have IDs starting at 0 and increasing\r\n            // sequentially up to the optionCount count.\r\n            uint256 optionId;\r\n\r\n            for (optionId = 1; optionId <= optionCount; optionId++) {\r\n                if (options[optionId].model == _model && options[optionId].active == true) {\r\n                    result[resultIndex] = optionId;\r\n                    resultIndex++;\r\n                }\r\n            }\r\n\r\n            return result;\r\n       // }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n////No SiringClockAuction needed for Lambos\r\n////No separate modification for SaleContract needed\r\n\r\n/// @title Handles creating sales for sale of lambos.\r\n///  This wrapper of ReverseSale exists only so that users can create\r\n///  sales with only one transaction.\r\ncontract EtherLambosSale is EtherLambosOwnership {\r\n\r\n    // @notice The sale contract variables are defined in EtherLambosBase to allow\r\n    //  us to refer to them in EtherLambosOwnership to prevent accidental transfers.\r\n    // `saleMarketplace` refers to the auction for p2p sale of cars.\r\n   \r\n\r\n    /// @dev Sets the reference to the sale auction.\r\n    /// @param _address - Address of sale contract.\r\n    function setMarketplaceAddress(address _address) external onlyCEO {\r\n        MarketPlace candidateContract = MarketPlace(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isMarketplace());\r\n\r\n        // Set the new contract address\r\n        marketPlace = candidateContract;\r\n    }\r\n\r\n\r\n    /// @dev Put a lambo up for sale.\r\n    ///  Does some ownership trickery to create auctions in one tx.\r\n    function createLamboSale(\r\n        uint256 _carId,\r\n        uint256 _price\r\n    )\r\n        external\r\n        whenNotPaused\r\n    {\r\n        // Sale contract checks input sizes\r\n        // If lambo is already on any sale, this will throw\r\n        // because it will be owned by the sale contract.\r\n        require(_owns(msg.sender, _carId));\r\n        \r\n        _approve(_carId, marketPlace);\r\n        // Sale throws if inputs are invalid and clears\r\n        // transfer after escrowing the lambo.\r\n        marketPlace.createSale(\r\n            _carId,\r\n            _price,\r\n            msg.sender\r\n        );\r\n    }\r\n    \r\n    \r\n    function bulkCreateLamboSale(\r\n        uint256 _price,\r\n        uint256 _tokenIdStart,\r\n        uint256 _tokenCount\r\n    )\r\n        external\r\n        onlyCOO\r\n    {\r\n        // Sale contract checks input sizes\r\n        // If lambo is already on any sale, this will throw\r\n        // because it will be owned by the sale contract.\r\n        for(uint256 i=0;i<_tokenCount;i++)\r\n            {\r\n            require(_owns(msg.sender, _tokenIdStart+i));\r\n        \r\n            _approve(_tokenIdStart+i, marketPlace);\r\n            // Sale throws if inputs are invalid and clears\r\n            // transfer after escrowing the lambo.\r\n            marketPlace.createSale(\r\n                _tokenIdStart+i,\r\n                _price,\r\n             msg.sender\r\n            );\r\n        }\r\n    }\r\n    /// @dev Transfers the balance of the marketPlace contract\r\n    /// to the EtherLambosCore contract. We use two-step withdrawal to\r\n    /// prevent two transfer calls in the auction bid function.\r\n    function withdrawSaleBalances() external onlyCLevel {\r\n        marketPlace.withdrawBalance();\r\n        \r\n    }\r\n}\r\n\r\n/// @title all functions related to creating lambos\r\ncontract EtherLambosBuilding is EtherLambosSale {\r\n\r\n    // Limits the number of cars the contract owner can ever create.\r\n    //uint256 public constant PROMO_CREATION_LIMIT = 5000;\r\n    //uint256 public constant GEN0_CREATION_LIMIT = 45000;\r\n\r\n\r\n    // Counts the number of cars the contract owner has created.\r\n    uint256 public lambosBuildCount;\r\n\r\n\r\n    /// @dev we can build lambos. Only callable by COO\r\n    /// @param _attributes the encoded attributes of the lambo to be created, any value is accepted\r\n    /// @param _owner the future owner of the created lambo. Default to contract COO\r\n    /// @param _model the model of the created lambo. \r\n    function createLambo(uint256 _attributes, address _owner, uint64 _model) external onlyCOO {\r\n        address lamboOwner = _owner;\r\n        if (lamboOwner == address(0)) {\r\n             lamboOwner = cooAddress;\r\n        }\r\n        //require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n\r\n        lambosBuildCount++;\r\n        _createLambo(_attributes, lamboOwner, _model);\r\n    }\r\n\r\n    function bulkCreateLambo(uint256 _attributes, address _owner, uint64 _model,uint256 count, uint256 startNo) external onlyCOO {\r\n        address lamboOwner = _owner;\r\n        uint256 att=_attributes;\r\n        if (lamboOwner == address(0)) {\r\n             lamboOwner = cooAddress;\r\n        }\r\n        \r\n        //do some replacing\r\n            //_attributes=_attributes-part*(10 ** 66);\r\n        \r\n        \r\n        //require(promoCreatedCount < PROMO_CREATION_LIMIT);\r\n        for(uint256 i=0;i<count;i++)\r\n            {\r\n            lambosBuildCount++;\r\n            att=_attributes+(startNo+i)*(10 ** 66);\r\n            _createLambo(att, lamboOwner, _model);\r\n            }\r\n    }\r\n}\r\n\r\n/// @title all functions related to tuning lambos\r\ncontract EtherLambosTuning is EtherLambosBuilding {\r\n\r\n    // Counts the number of tunings have been done.\r\n    uint256 public lambosTuneCount;\r\n\r\n    function setServicestationAddress(address _address) external onlyCEO {\r\n        ServiceStation candidateContract = ServiceStation(_address);\r\n\r\n        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117\r\n        require(candidateContract.isServicestation());\r\n\r\n        // Set the new contract address\r\n        serviceStation = candidateContract;\r\n    }\r\n    /// @dev we can tune lambos. Only callable by ServiceStation contract\r\n    /// @param _newattributes the new encoded attributes of the lambo to be updated\r\n    /// @param _tokenId the lambo to be tuned.\r\n    function tuneLambo(uint256 _newattributes, uint256 _tokenId) external {\r\n        \r\n        //Tuning can only be done by the ServiceStation Contract. \r\n        require(\r\n            msg.sender == address(serviceStation)\r\n        );\r\n        \r\n        \r\n        lambosTuneCount++;\r\n        _tuneLambo(_newattributes, _tokenId);\r\n    }\r\n    function withdrawTuneBalances() external onlyCLevel {\r\n        serviceStation.withdrawBalance();\r\n        \r\n    }\r\n\r\n}\r\n\r\n/// @title EtherLambos: Collectible, tuneable, and super stylish lambos on the Ethereum blockchain.\r\n/// @author Cryptoknights code adapted from Axiom Zen (https://www.axiomzen.co)\r\n/// @dev The main EtherLambos contract, keeps track of lambos.\r\ncontract EtherLambosCore is EtherLambosTuning {\r\n\r\n    // This is the main EtherLambos contract. In order to keep our code seperated into logical sections,\r\n    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts\r\n    // that handle sales. The sales are\r\n    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping\r\n    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks\r\n    // lambo ownership. \r\n    //\r\n    // Secondly, we break the core contract into multiple files using inheritence, one for each major\r\n    // facet of functionality of EtherLambos. This allows us to keep related code bundled together while still\r\n    // avoiding a single giant file with everything in it. The breakdown is as follows:\r\n    //\r\n    //      - EtherLambosBase: This is where we define the most fundamental code shared throughout the core\r\n    //             functionality. This includes our main data storage, constants and data types, plus\r\n    //             internal functions for managing these items.\r\n    //\r\n    //      - EtherLambosAccessControl: This contract manages the various addresses and constraints for operations\r\n    //             that can be executed only by specific roles. Namely CEO, CFO and COO.\r\n    //\r\n    //      - EtherLambosOwnership: This provides the methods required for basic non-fungible token\r\n    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).\r\n    //\r\n    //      - EtherLambosSale: Here we have the public methods for sales. \r\n    //\r\n    //      - EtherLambosBuilding: This final facet contains the functionality we use for creating new cars.\r\n    //             \r\n\r\n    // Set in case the core contract is broken and an upgrade is required\r\n    address public newContractAddress;\r\n\r\n    /// @notice Creates the main EtherLambos smart contract instance.\r\n    function EtherLambosCore() public {\r\n        // Starts paused.\r\n        paused = true;\r\n\r\n        // the creator of the contract is the initial CEO\r\n        ceoAddress = msg.sender;\r\n\r\n        // the creator of the contract is also the initial COO\r\n        cooAddress = msg.sender;\r\n\r\n        // start with the car 0 \r\n        _createLambo(uint256(-1), address(0),0);\r\n    }\r\n\r\n    /// @dev Used to mark the smart contract as upgraded, in case there is a serious\r\n    ///  breaking bug. This method does nothing but keep track of the new contract and\r\n    ///  emit a message indicating that the new address is set. It's up to clients of this\r\n    ///  contract to update to the new contract address in that case. (This contract will\r\n    ///  be paused indefinitely if such an upgrade takes place.)\r\n    /// @param _v2Address new address\r\n    function setNewAddress(address _v2Address) external onlyCEO whenPaused {\r\n        // See README.md for updgrade plan\r\n        newContractAddress = _v2Address;\r\n        ContractUpgrade(_v2Address);\r\n    }\r\n\r\n    /// @notice No tipping!\r\n    /// @dev Reject all Ether from being sent here, unless it's from the marketPlace contract.\r\n    /// (Hopefully, we can prevent user accidents.)\r\n    function() external payable {\r\n        require(\r\n            msg.sender == address(marketPlace)\r\n        );\r\n    }\r\n\r\n    /// @notice Returns all the relevant information about a specific lambo.\r\n    /// @param _id The ID of the lambo of interest.\r\n    function getLambo(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint256 buildTime,\r\n        uint256 attributes\r\n    ) {\r\n        Lambo storage kit = lambos[_id];\r\n\r\n        buildTime = uint256(kit.buildTime);\r\n        attributes = kit.attributes;\r\n    }\r\n    /// @notice Returns all the relevant information about a specific lambo.\r\n    /// @param _id The ID of the lambo of interest.\r\n    function getLamboAttributes(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint256 attributes\r\n    ) {\r\n        Lambo storage kit = lambos[_id];\r\n        attributes = kit.attributes;\r\n        return attributes;\r\n    }\r\n    \r\n    /// @notice Returns all the relevant information about a specific lambo.\r\n    /// @param _id The ID of the lambo of interest.\r\n    function getLamboModel(uint256 _id)\r\n        external\r\n        view\r\n        returns (\r\n        uint64 model\r\n    ) {\r\n        Lambo storage kit = lambos[_id];\r\n        model = kit.model;\r\n        return model;\r\n    }\r\n    /// @dev Override unpause so it requires all external contract addresses\r\n    ///  to be set before contract can be unpaused. Also, we can't have\r\n    ///  newContractAddress set either, because then the contract was upgraded.\r\n    /// @notice This is public rather than external so we can call super.unpause\r\n    ///  without using an expensive CALL.\r\n    function unpause() public onlyCEO whenPaused {\r\n        require(marketPlace != address(0));\r\n        require(serviceStation != address(0));\r\n        require(newContractAddress == address(0));\r\n\r\n        // Actually unpause the contract.\r\n        super.unpause();\r\n    }\r\n\r\n    // @dev Allows the CFO to capture the balance available to the contract.\r\n    function withdrawBalance() external onlyCFO {\r\n        uint256 balance = this.balance;\r\n        cfoAddress.send(balance);\r\n     \r\n    }\r\n}",
    "data_type": "ERC721",
    "id": "EtherLambosCore_0xda9f43015749056182352e9dc6d3ee0b6293d80a",
    "file": "./Contract_source_Code/EtherLambosCore_0xda9f43015749056182352e9dc6d3ee0b6293d80a.sol"
}